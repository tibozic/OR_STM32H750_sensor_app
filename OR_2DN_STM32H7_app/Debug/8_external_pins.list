
8_external_pins.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001444  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080016e4  080016e4  000116e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080017a4  080017a4  000117a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080017a8  080017a8  000117a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  24000000  080017ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000030  24000064  08001810  00020064  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000094  08001810  00020094  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f9bb  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000038a1  00000000  00000000  0002fa4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000005e8  00000000  00000000  000332f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000486  00000000  00000000  000338d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002a69f  00000000  00000000  00033d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00005af2  00000000  00000000  0005e3fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000eec62  00000000  00000000  00063eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      0000003c  00000000  00000000  00152b51  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000ca8  00000000  00000000  00152b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 000000b9  00000000  00000000  00153838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000018b1  00000000  00000000  001538f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__do_global_dtors_aux>:
 8000340:	b510      	push	{r4, lr}
 8000342:	4c05      	ldr	r4, [pc, #20]	; (8000358 <__do_global_dtors_aux+0x18>)
 8000344:	7823      	ldrb	r3, [r4, #0]
 8000346:	b933      	cbnz	r3, 8000356 <__do_global_dtors_aux+0x16>
 8000348:	4b04      	ldr	r3, [pc, #16]	; (800035c <__do_global_dtors_aux+0x1c>)
 800034a:	b113      	cbz	r3, 8000352 <__do_global_dtors_aux+0x12>
 800034c:	4804      	ldr	r0, [pc, #16]	; (8000360 <__do_global_dtors_aux+0x20>)
 800034e:	f3af 8000 	nop.w
 8000352:	2301      	movs	r3, #1
 8000354:	7023      	strb	r3, [r4, #0]
 8000356:	bd10      	pop	{r4, pc}
 8000358:	24000064 	.word	0x24000064
 800035c:	00000000 	.word	0x00000000
 8000360:	080016cc 	.word	0x080016cc

08000364 <frame_dummy>:
 8000364:	b508      	push	{r3, lr}
 8000366:	4b03      	ldr	r3, [pc, #12]	; (8000374 <frame_dummy+0x10>)
 8000368:	b11b      	cbz	r3, 8000372 <frame_dummy+0xe>
 800036a:	4903      	ldr	r1, [pc, #12]	; (8000378 <frame_dummy+0x14>)
 800036c:	4803      	ldr	r0, [pc, #12]	; (800037c <frame_dummy+0x18>)
 800036e:	f3af 8000 	nop.w
 8000372:	bd08      	pop	{r3, pc}
 8000374:	00000000 	.word	0x00000000
 8000378:	24000068 	.word	0x24000068
 800037c:	080016cc 	.word	0x080016cc

08000380 <main>:

#define GPIOEEN		(1u << 4)
#define GPIOJEN		(1u << 9)

int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	// connect clock to PD and PJ
	RCC->AHB4ENR |= (GPIOEEN | GPIOJEN);
 8000384:	4b20      	ldr	r3, [pc, #128]	; (8000408 <main+0x88>)
 8000386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800038a:	4a1f      	ldr	r2, [pc, #124]	; (8000408 <main+0x88>)
 800038c:	f443 7304 	orr.w	r3, r3, #528	; 0x210
 8000390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// set PE3 (external LED) to output mode (01)
	GPIOE->MODER |=  (1u << 6);
 8000394:	4b1d      	ldr	r3, [pc, #116]	; (800040c <main+0x8c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a1c      	ldr	r2, [pc, #112]	; (800040c <main+0x8c>)
 800039a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800039e:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(1u << 7);
 80003a0:	4b1a      	ldr	r3, [pc, #104]	; (800040c <main+0x8c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a19      	ldr	r2, [pc, #100]	; (800040c <main+0x8c>)
 80003a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003aa:	6013      	str	r3, [r2, #0]

	// set PJ2 (internal LED) to output mode (01)
	GPIOJ->MODER |=  (1u << 4);
 80003ac:	4b18      	ldr	r3, [pc, #96]	; (8000410 <main+0x90>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a17      	ldr	r2, [pc, #92]	; (8000410 <main+0x90>)
 80003b2:	f043 0310 	orr.w	r3, r3, #16
 80003b6:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER &= ~(1u << 5);
 80003b8:	4b15      	ldr	r3, [pc, #84]	; (8000410 <main+0x90>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a14      	ldr	r2, [pc, #80]	; (8000410 <main+0x90>)
 80003be:	f023 0320 	bic.w	r3, r3, #32
 80003c2:	6013      	str	r3, [r2, #0]

	// set PD0 to high speed
	//GPIOD->OSPEEDR |=  (1u << 1);
	//GPIOD->OSPEEDR &= ~(1u << 0);

	uart3_tx_init();
 80003c4:	f000 f90c 	bl	80005e0 <uart3_tx_init>
	systick_init();
 80003c8:	f000 f8cc 	bl	8000564 <systick_init>

	while(1)
	{
		// enable internal LED (on pin 2)
		GPIOJ->BSRR = (1u << 2);
 80003cc:	4b10      	ldr	r3, [pc, #64]	; (8000410 <main+0x90>)
 80003ce:	2204      	movs	r2, #4
 80003d0:	619a      	str	r2, [r3, #24]

		// enable external LED (on pin 0)
		GPIOE->BSRR = (1u << 3);
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <main+0x8c>)
 80003d4:	2208      	movs	r2, #8
 80003d6:	619a      	str	r2, [r3, #24]
		printf("Both LEDs are ON\n\r");
 80003d8:	480e      	ldr	r0, [pc, #56]	; (8000414 <main+0x94>)
 80003da:	f000 f9ef 	bl	80007bc <iprintf>

		systick_delay_ms(1000);
 80003de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003e2:	f000 f8d3 	bl	800058c <systick_delay_ms>

		// disable internal LED
		GPIOJ->BSRR = (1u << 18);
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <main+0x90>)
 80003e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80003ec:	619a      	str	r2, [r3, #24]

		// disable external LED
		GPIOE->BSRR = (1u << 19);
 80003ee:	4b07      	ldr	r3, [pc, #28]	; (800040c <main+0x8c>)
 80003f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80003f4:	619a      	str	r2, [r3, #24]
		printf("Both LEDs are OFF\n\r");
 80003f6:	4808      	ldr	r0, [pc, #32]	; (8000418 <main+0x98>)
 80003f8:	f000 f9e0 	bl	80007bc <iprintf>

		systick_delay_ms(1000);
 80003fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000400:	f000 f8c4 	bl	800058c <systick_delay_ms>
		GPIOJ->BSRR = (1u << 2);
 8000404:	bf00      	nop
 8000406:	e7e1      	b.n	80003cc <main+0x4c>
 8000408:	58024400 	.word	0x58024400
 800040c:	58021000 	.word	0x58021000
 8000410:	58022400 	.word	0x58022400
 8000414:	080016e4 	.word	0x080016e4
 8000418:	080016f8 	.word	0x080016f8

0800041c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b086      	sub	sp, #24
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000428:	2300      	movs	r3, #0
 800042a:	617b      	str	r3, [r7, #20]
 800042c:	e00a      	b.n	8000444 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800042e:	f3af 8000 	nop.w
 8000432:	4601      	mov	r1, r0
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	1c5a      	adds	r2, r3, #1
 8000438:	60ba      	str	r2, [r7, #8]
 800043a:	b2ca      	uxtb	r2, r1
 800043c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800043e:	697b      	ldr	r3, [r7, #20]
 8000440:	3301      	adds	r3, #1
 8000442:	617b      	str	r3, [r7, #20]
 8000444:	697a      	ldr	r2, [r7, #20]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	429a      	cmp	r2, r3
 800044a:	dbf0      	blt.n	800042e <_read+0x12>
	}

return len;
 800044c:	687b      	ldr	r3, [r7, #4]
}
 800044e:	4618      	mov	r0, r3
 8000450:	3718      	adds	r7, #24
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b086      	sub	sp, #24
 800045a:	af00      	add	r7, sp, #0
 800045c:	60f8      	str	r0, [r7, #12]
 800045e:	60b9      	str	r1, [r7, #8]
 8000460:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000462:	2300      	movs	r3, #0
 8000464:	617b      	str	r3, [r7, #20]
 8000466:	e009      	b.n	800047c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	1c5a      	adds	r2, r3, #1
 800046c:	60ba      	str	r2, [r7, #8]
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	4618      	mov	r0, r3
 8000472:	f000 f8a9 	bl	80005c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	3301      	adds	r3, #1
 800047a:	617b      	str	r3, [r7, #20]
 800047c:	697a      	ldr	r2, [r7, #20]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	429a      	cmp	r2, r3
 8000482:	dbf1      	blt.n	8000468 <_write+0x12>
	}
	return len;
 8000484:	687b      	ldr	r3, [r7, #4]
}
 8000486:	4618      	mov	r0, r3
 8000488:	3718      	adds	r7, #24
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <_close>:

int _close(int file)
{
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
	return -1;
 8000496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800049a:	4618      	mov	r0, r3
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr

080004a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004a6:	b480      	push	{r7}
 80004a8:	b083      	sub	sp, #12
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
 80004ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004b6:	605a      	str	r2, [r3, #4]
	return 0;
 80004b8:	2300      	movs	r3, #0
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <_isatty>:

int _isatty(int file)
{
 80004c6:	b480      	push	{r7}
 80004c8:	b083      	sub	sp, #12
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
	return 1;
 80004ce:	2301      	movs	r3, #1
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
	return 0;
 80004e8:	2300      	movs	r3, #0
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
	...

080004f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000500:	4a14      	ldr	r2, [pc, #80]	; (8000554 <_sbrk+0x5c>)
 8000502:	4b15      	ldr	r3, [pc, #84]	; (8000558 <_sbrk+0x60>)
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800050c:	4b13      	ldr	r3, [pc, #76]	; (800055c <_sbrk+0x64>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d102      	bne.n	800051a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <_sbrk+0x64>)
 8000516:	4a12      	ldr	r2, [pc, #72]	; (8000560 <_sbrk+0x68>)
 8000518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <_sbrk+0x64>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4413      	add	r3, r2
 8000522:	693a      	ldr	r2, [r7, #16]
 8000524:	429a      	cmp	r2, r3
 8000526:	d207      	bcs.n	8000538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000528:	f000 f916 	bl	8000758 <__errno>
 800052c:	4603      	mov	r3, r0
 800052e:	220c      	movs	r2, #12
 8000530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000536:	e009      	b.n	800054c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000538:	4b08      	ldr	r3, [pc, #32]	; (800055c <_sbrk+0x64>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800053e:	4b07      	ldr	r3, [pc, #28]	; (800055c <_sbrk+0x64>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4413      	add	r3, r2
 8000546:	4a05      	ldr	r2, [pc, #20]	; (800055c <_sbrk+0x64>)
 8000548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800054a:	68fb      	ldr	r3, [r7, #12]
}
 800054c:	4618      	mov	r0, r3
 800054e:	3718      	adds	r7, #24
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	24080000 	.word	0x24080000
 8000558:	00000400 	.word	0x00000400
 800055c:	24000080 	.word	0x24000080
 8000560:	24000098 	.word	0x24000098

08000564 <systick_init>:
#define CTRL_ENABLE			(1u << 0)
#define CTRL_CLKSRC			(1u << 2)
#define CTRL_COUNTFLG		(1u << 16)

void systick_init(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
	// Reload with number of clocks per ms
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <systick_init+0x24>)
 800056a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800056e:	605a      	str	r2, [r3, #4]

	// clear systick current value register
	SysTick->VAL = 0;
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <systick_init+0x24>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]

	// enable systick and select internal clock source
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 8000576:	4b04      	ldr	r3, [pc, #16]	; (8000588 <systick_init+0x24>)
 8000578:	2205      	movs	r2, #5
 800057a:	601a      	str	r2, [r3, #0]
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	e000e010 	.word	0xe000e010

0800058c <systick_delay_ms>:
{
	SysTick->CTRL = 0;
}

void systick_delay_ms(int delay)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < delay; ++i)
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	e009      	b.n	80005ae <systick_delay_ms+0x22>
	{
		// wait until count flag is set
		while(!(SysTick->CTRL & CTRL_COUNTFLG)) {}
 800059a:	bf00      	nop
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <systick_delay_ms+0x38>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d0f9      	beq.n	800059c <systick_delay_ms+0x10>
	for(int i = 0; i < delay; ++i)
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	3301      	adds	r3, #1
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fa      	ldr	r2, [r7, #12]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	dbf1      	blt.n	800059a <systick_delay_ms+0xe>
	}
}
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000e010 	.word	0xe000e010

080005c8 <__io_putchar>:
static int32_t compute_uart_baudrate(uint32_t periph_clock, uint32_t baudrate);
void uart3_write(int ch);
int  uart3_read(void);

int __io_putchar(int ch)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	uart3_write(ch);
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 f87f 	bl	80006d4 <uart3_write>
	return ch;
 80005d6:	687b      	ldr	r3, [r7, #4]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <uart3_tx_init>:

void uart3_tx_init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	/* configure uart gpio pin */
	// enable clock access to gpiob
	RCC->AHB4ENR |= GPIOBEN;
 80005e4:	4b26      	ldr	r3, [pc, #152]	; (8000680 <uart3_tx_init+0xa0>)
 80005e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ea:	4a25      	ldr	r2, [pc, #148]	; (8000680 <uart3_tx_init+0xa0>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// set PB10 to alternate function mode
	GPIOB->MODER &= ~(1u << 20);
 80005f4:	4b23      	ldr	r3, [pc, #140]	; (8000684 <uart3_tx_init+0xa4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a22      	ldr	r2, [pc, #136]	; (8000684 <uart3_tx_init+0xa4>)
 80005fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80005fe:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1u << 21);
 8000600:	4b20      	ldr	r3, [pc, #128]	; (8000684 <uart3_tx_init+0xa4>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a1f      	ldr	r2, [pc, #124]	; (8000684 <uart3_tx_init+0xa4>)
 8000606:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800060a:	6013      	str	r3, [r2, #0]

	// set PB10 to alternate function type to UART_TX (AF7)
	GPIOB->AFR[1] |= (1u << 8);
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <uart3_tx_init+0xa4>)
 800060e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000610:	4a1c      	ldr	r2, [pc, #112]	; (8000684 <uart3_tx_init+0xa4>)
 8000612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000616:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1u << 9);
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <uart3_tx_init+0xa4>)
 800061a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800061c:	4a19      	ldr	r2, [pc, #100]	; (8000684 <uart3_tx_init+0xa4>)
 800061e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000622:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1u << 10);
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <uart3_tx_init+0xa4>)
 8000626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000628:	4a16      	ldr	r2, [pc, #88]	; (8000684 <uart3_tx_init+0xa4>)
 800062a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800062e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1u << 11);
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <uart3_tx_init+0xa4>)
 8000632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000634:	4a13      	ldr	r2, [pc, #76]	; (8000684 <uart3_tx_init+0xa4>)
 8000636:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800063a:	6253      	str	r3, [r2, #36]	; 0x24


	/* Configure the UART module */
	// enable clock access to uart3
	RCC->APB1LENR |= UART3EN;
 800063c:	4b10      	ldr	r3, [pc, #64]	; (8000680 <uart3_tx_init+0xa0>)
 800063e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000642:	4a0f      	ldr	r2, [pc, #60]	; (8000680 <uart3_tx_init+0xa0>)
 8000644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000648:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

	// when configuring usart it should be disabled
	USART3->CR1 &= ~(CR1_UE);
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <uart3_tx_init+0xa8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <uart3_tx_init+0xa8>)
 8000652:	f023 0301 	bic.w	r3, r3, #1
 8000656:	6013      	str	r3, [r2, #0]

	// configure baudrate
	uart_set_baudrate(USART3, APB1_CLK, UART_BAUDRATE);
 8000658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800065c:	490b      	ldr	r1, [pc, #44]	; (800068c <uart3_tx_init+0xac>)
 800065e:	480a      	ldr	r0, [pc, #40]	; (8000688 <uart3_tx_init+0xa8>)
 8000660:	f000 f816 	bl	8000690 <uart_set_baudrate>

	// configure transfer direction
	USART3->CR1 |= CR1_TE;
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <uart3_tx_init+0xa8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <uart3_tx_init+0xa8>)
 800066a:	f043 0308 	orr.w	r3, r3, #8
 800066e:	6013      	str	r3, [r2, #0]

	// enable uart module
	USART3->CR1 |= CR1_UE;
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <uart3_tx_init+0xa8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <uart3_tx_init+0xa8>)
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	6013      	str	r3, [r2, #0]
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	58024400 	.word	0x58024400
 8000684:	58020400 	.word	0x58020400
 8000688:	40004800 	.word	0x40004800
 800068c:	03d09000 	.word	0x03d09000

08000690 <uart_set_baudrate>:
	// enable uart module
	USART3->CR1 |= CR1_UE;
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periph_clock, uint32_t baudrate)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_baudrate(periph_clock, baudrate);
 800069c:	6879      	ldr	r1, [r7, #4]
 800069e:	68b8      	ldr	r0, [r7, #8]
 80006a0:	f000 f808 	bl	80006b4 <compute_uart_baudrate>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	60da      	str	r2, [r3, #12]
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <compute_uart_baudrate>:

static int32_t compute_uart_baudrate(uint32_t periph_clock, uint32_t baudrate)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
	return (periph_clock/baudrate);
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
	...

080006d4 <uart3_write>:

void uart3_write(int ch)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	// make sure transmit data register is empty
	while( !(USART3->ISR & SR_TXE) ) {}
 80006dc:	bf00      	nop
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <uart3_write+0x2c>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d0f9      	beq.n	80006de <uart3_write+0xa>

	// write to transmit data register
	USART3->TDR = (ch & 0xFF);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <uart3_write+0x2c>)
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40004800 	.word	0x40004800

08000704 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000706:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000708:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <LoopForever+0x6>)
  ldr r1, =_edata
 800070e:	490d      	ldr	r1, [pc, #52]	; (8000744 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000710:	4a0d      	ldr	r2, [pc, #52]	; (8000748 <LoopForever+0xe>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000714:	e002      	b.n	800071c <LoopCopyDataInit>

08000716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071a:	3304      	adds	r3, #4

0800071c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800071c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000720:	d3f9      	bcc.n	8000716 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000722:	4a0a      	ldr	r2, [pc, #40]	; (800074c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000724:	4c0a      	ldr	r4, [pc, #40]	; (8000750 <LoopForever+0x16>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000728:	e001      	b.n	800072e <LoopFillZerobss>

0800072a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800072c:	3204      	adds	r2, #4

0800072e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000730:	d3fb      	bcc.n	800072a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000732:	f000 f817 	bl	8000764 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000736:	f7ff fe23 	bl	8000380 <main>

0800073a <LoopForever>:

LoopForever:
    b LoopForever
 800073a:	e7fe      	b.n	800073a <LoopForever>
  ldr   r0, =_estack
 800073c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000740:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000744:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8000748:	080017ac 	.word	0x080017ac
  ldr r2, =_sbss
 800074c:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8000750:	24000094 	.word	0x24000094

08000754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000754:	e7fe      	b.n	8000754 <ADC1_2_IRQHandler>
	...

08000758 <__errno>:
 8000758:	4b01      	ldr	r3, [pc, #4]	; (8000760 <__errno+0x8>)
 800075a:	6818      	ldr	r0, [r3, #0]
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	24000000 	.word	0x24000000

08000764 <__libc_init_array>:
 8000764:	b570      	push	{r4, r5, r6, lr}
 8000766:	4d0d      	ldr	r5, [pc, #52]	; (800079c <__libc_init_array+0x38>)
 8000768:	4c0d      	ldr	r4, [pc, #52]	; (80007a0 <__libc_init_array+0x3c>)
 800076a:	1b64      	subs	r4, r4, r5
 800076c:	10a4      	asrs	r4, r4, #2
 800076e:	2600      	movs	r6, #0
 8000770:	42a6      	cmp	r6, r4
 8000772:	d109      	bne.n	8000788 <__libc_init_array+0x24>
 8000774:	4d0b      	ldr	r5, [pc, #44]	; (80007a4 <__libc_init_array+0x40>)
 8000776:	4c0c      	ldr	r4, [pc, #48]	; (80007a8 <__libc_init_array+0x44>)
 8000778:	f000 ffa8 	bl	80016cc <_init>
 800077c:	1b64      	subs	r4, r4, r5
 800077e:	10a4      	asrs	r4, r4, #2
 8000780:	2600      	movs	r6, #0
 8000782:	42a6      	cmp	r6, r4
 8000784:	d105      	bne.n	8000792 <__libc_init_array+0x2e>
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f855 3b04 	ldr.w	r3, [r5], #4
 800078c:	4798      	blx	r3
 800078e:	3601      	adds	r6, #1
 8000790:	e7ee      	b.n	8000770 <__libc_init_array+0xc>
 8000792:	f855 3b04 	ldr.w	r3, [r5], #4
 8000796:	4798      	blx	r3
 8000798:	3601      	adds	r6, #1
 800079a:	e7f2      	b.n	8000782 <__libc_init_array+0x1e>
 800079c:	080017a4 	.word	0x080017a4
 80007a0:	080017a4 	.word	0x080017a4
 80007a4:	080017a4 	.word	0x080017a4
 80007a8:	080017a8 	.word	0x080017a8

080007ac <memset>:
 80007ac:	4402      	add	r2, r0
 80007ae:	4603      	mov	r3, r0
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d100      	bne.n	80007b6 <memset+0xa>
 80007b4:	4770      	bx	lr
 80007b6:	f803 1b01 	strb.w	r1, [r3], #1
 80007ba:	e7f9      	b.n	80007b0 <memset+0x4>

080007bc <iprintf>:
 80007bc:	b40f      	push	{r0, r1, r2, r3}
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <iprintf+0x2c>)
 80007c0:	b513      	push	{r0, r1, r4, lr}
 80007c2:	681c      	ldr	r4, [r3, #0]
 80007c4:	b124      	cbz	r4, 80007d0 <iprintf+0x14>
 80007c6:	69a3      	ldr	r3, [r4, #24]
 80007c8:	b913      	cbnz	r3, 80007d0 <iprintf+0x14>
 80007ca:	4620      	mov	r0, r4
 80007cc:	f000 f866 	bl	800089c <__sinit>
 80007d0:	ab05      	add	r3, sp, #20
 80007d2:	9a04      	ldr	r2, [sp, #16]
 80007d4:	68a1      	ldr	r1, [r4, #8]
 80007d6:	9301      	str	r3, [sp, #4]
 80007d8:	4620      	mov	r0, r4
 80007da:	f000 f9bd 	bl	8000b58 <_vfiprintf_r>
 80007de:	b002      	add	sp, #8
 80007e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007e4:	b004      	add	sp, #16
 80007e6:	4770      	bx	lr
 80007e8:	24000000 	.word	0x24000000

080007ec <std>:
 80007ec:	2300      	movs	r3, #0
 80007ee:	b510      	push	{r4, lr}
 80007f0:	4604      	mov	r4, r0
 80007f2:	e9c0 3300 	strd	r3, r3, [r0]
 80007f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007fa:	6083      	str	r3, [r0, #8]
 80007fc:	8181      	strh	r1, [r0, #12]
 80007fe:	6643      	str	r3, [r0, #100]	; 0x64
 8000800:	81c2      	strh	r2, [r0, #14]
 8000802:	6183      	str	r3, [r0, #24]
 8000804:	4619      	mov	r1, r3
 8000806:	2208      	movs	r2, #8
 8000808:	305c      	adds	r0, #92	; 0x5c
 800080a:	f7ff ffcf 	bl	80007ac <memset>
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <std+0x38>)
 8000810:	6263      	str	r3, [r4, #36]	; 0x24
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <std+0x3c>)
 8000814:	62a3      	str	r3, [r4, #40]	; 0x28
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <std+0x40>)
 8000818:	62e3      	str	r3, [r4, #44]	; 0x2c
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <std+0x44>)
 800081c:	6224      	str	r4, [r4, #32]
 800081e:	6323      	str	r3, [r4, #48]	; 0x30
 8000820:	bd10      	pop	{r4, pc}
 8000822:	bf00      	nop
 8000824:	08000dd5 	.word	0x08000dd5
 8000828:	08000df7 	.word	0x08000df7
 800082c:	08000e2f 	.word	0x08000e2f
 8000830:	08000e53 	.word	0x08000e53

08000834 <_cleanup_r>:
 8000834:	4901      	ldr	r1, [pc, #4]	; (800083c <_cleanup_r+0x8>)
 8000836:	f000 b8af 	b.w	8000998 <_fwalk_reent>
 800083a:	bf00      	nop
 800083c:	0800112d 	.word	0x0800112d

08000840 <__sfmoreglue>:
 8000840:	b570      	push	{r4, r5, r6, lr}
 8000842:	2368      	movs	r3, #104	; 0x68
 8000844:	1e4d      	subs	r5, r1, #1
 8000846:	435d      	muls	r5, r3
 8000848:	460e      	mov	r6, r1
 800084a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800084e:	f000 f8e5 	bl	8000a1c <_malloc_r>
 8000852:	4604      	mov	r4, r0
 8000854:	b140      	cbz	r0, 8000868 <__sfmoreglue+0x28>
 8000856:	2100      	movs	r1, #0
 8000858:	e9c0 1600 	strd	r1, r6, [r0]
 800085c:	300c      	adds	r0, #12
 800085e:	60a0      	str	r0, [r4, #8]
 8000860:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000864:	f7ff ffa2 	bl	80007ac <memset>
 8000868:	4620      	mov	r0, r4
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__sfp_lock_acquire>:
 800086c:	4801      	ldr	r0, [pc, #4]	; (8000874 <__sfp_lock_acquire+0x8>)
 800086e:	f000 b8b3 	b.w	80009d8 <__retarget_lock_acquire_recursive>
 8000872:	bf00      	nop
 8000874:	24000085 	.word	0x24000085

08000878 <__sfp_lock_release>:
 8000878:	4801      	ldr	r0, [pc, #4]	; (8000880 <__sfp_lock_release+0x8>)
 800087a:	f000 b8ae 	b.w	80009da <__retarget_lock_release_recursive>
 800087e:	bf00      	nop
 8000880:	24000085 	.word	0x24000085

08000884 <__sinit_lock_acquire>:
 8000884:	4801      	ldr	r0, [pc, #4]	; (800088c <__sinit_lock_acquire+0x8>)
 8000886:	f000 b8a7 	b.w	80009d8 <__retarget_lock_acquire_recursive>
 800088a:	bf00      	nop
 800088c:	24000086 	.word	0x24000086

08000890 <__sinit_lock_release>:
 8000890:	4801      	ldr	r0, [pc, #4]	; (8000898 <__sinit_lock_release+0x8>)
 8000892:	f000 b8a2 	b.w	80009da <__retarget_lock_release_recursive>
 8000896:	bf00      	nop
 8000898:	24000086 	.word	0x24000086

0800089c <__sinit>:
 800089c:	b510      	push	{r4, lr}
 800089e:	4604      	mov	r4, r0
 80008a0:	f7ff fff0 	bl	8000884 <__sinit_lock_acquire>
 80008a4:	69a3      	ldr	r3, [r4, #24]
 80008a6:	b11b      	cbz	r3, 80008b0 <__sinit+0x14>
 80008a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008ac:	f7ff bff0 	b.w	8000890 <__sinit_lock_release>
 80008b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80008b4:	6523      	str	r3, [r4, #80]	; 0x50
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <__sinit+0x68>)
 80008b8:	4a13      	ldr	r2, [pc, #76]	; (8000908 <__sinit+0x6c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80008be:	42a3      	cmp	r3, r4
 80008c0:	bf04      	itt	eq
 80008c2:	2301      	moveq	r3, #1
 80008c4:	61a3      	streq	r3, [r4, #24]
 80008c6:	4620      	mov	r0, r4
 80008c8:	f000 f820 	bl	800090c <__sfp>
 80008cc:	6060      	str	r0, [r4, #4]
 80008ce:	4620      	mov	r0, r4
 80008d0:	f000 f81c 	bl	800090c <__sfp>
 80008d4:	60a0      	str	r0, [r4, #8]
 80008d6:	4620      	mov	r0, r4
 80008d8:	f000 f818 	bl	800090c <__sfp>
 80008dc:	2200      	movs	r2, #0
 80008de:	60e0      	str	r0, [r4, #12]
 80008e0:	2104      	movs	r1, #4
 80008e2:	6860      	ldr	r0, [r4, #4]
 80008e4:	f7ff ff82 	bl	80007ec <std>
 80008e8:	68a0      	ldr	r0, [r4, #8]
 80008ea:	2201      	movs	r2, #1
 80008ec:	2109      	movs	r1, #9
 80008ee:	f7ff ff7d 	bl	80007ec <std>
 80008f2:	68e0      	ldr	r0, [r4, #12]
 80008f4:	2202      	movs	r2, #2
 80008f6:	2112      	movs	r1, #18
 80008f8:	f7ff ff78 	bl	80007ec <std>
 80008fc:	2301      	movs	r3, #1
 80008fe:	61a3      	str	r3, [r4, #24]
 8000900:	e7d2      	b.n	80008a8 <__sinit+0xc>
 8000902:	bf00      	nop
 8000904:	0800170c 	.word	0x0800170c
 8000908:	08000835 	.word	0x08000835

0800090c <__sfp>:
 800090c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800090e:	4607      	mov	r7, r0
 8000910:	f7ff ffac 	bl	800086c <__sfp_lock_acquire>
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <__sfp+0x84>)
 8000916:	681e      	ldr	r6, [r3, #0]
 8000918:	69b3      	ldr	r3, [r6, #24]
 800091a:	b913      	cbnz	r3, 8000922 <__sfp+0x16>
 800091c:	4630      	mov	r0, r6
 800091e:	f7ff ffbd 	bl	800089c <__sinit>
 8000922:	3648      	adds	r6, #72	; 0x48
 8000924:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000928:	3b01      	subs	r3, #1
 800092a:	d503      	bpl.n	8000934 <__sfp+0x28>
 800092c:	6833      	ldr	r3, [r6, #0]
 800092e:	b30b      	cbz	r3, 8000974 <__sfp+0x68>
 8000930:	6836      	ldr	r6, [r6, #0]
 8000932:	e7f7      	b.n	8000924 <__sfp+0x18>
 8000934:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000938:	b9d5      	cbnz	r5, 8000970 <__sfp+0x64>
 800093a:	4b16      	ldr	r3, [pc, #88]	; (8000994 <__sfp+0x88>)
 800093c:	60e3      	str	r3, [r4, #12]
 800093e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000942:	6665      	str	r5, [r4, #100]	; 0x64
 8000944:	f000 f847 	bl	80009d6 <__retarget_lock_init_recursive>
 8000948:	f7ff ff96 	bl	8000878 <__sfp_lock_release>
 800094c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000950:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000954:	6025      	str	r5, [r4, #0]
 8000956:	61a5      	str	r5, [r4, #24]
 8000958:	2208      	movs	r2, #8
 800095a:	4629      	mov	r1, r5
 800095c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000960:	f7ff ff24 	bl	80007ac <memset>
 8000964:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000968:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800096c:	4620      	mov	r0, r4
 800096e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000970:	3468      	adds	r4, #104	; 0x68
 8000972:	e7d9      	b.n	8000928 <__sfp+0x1c>
 8000974:	2104      	movs	r1, #4
 8000976:	4638      	mov	r0, r7
 8000978:	f7ff ff62 	bl	8000840 <__sfmoreglue>
 800097c:	4604      	mov	r4, r0
 800097e:	6030      	str	r0, [r6, #0]
 8000980:	2800      	cmp	r0, #0
 8000982:	d1d5      	bne.n	8000930 <__sfp+0x24>
 8000984:	f7ff ff78 	bl	8000878 <__sfp_lock_release>
 8000988:	230c      	movs	r3, #12
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	e7ee      	b.n	800096c <__sfp+0x60>
 800098e:	bf00      	nop
 8000990:	0800170c 	.word	0x0800170c
 8000994:	ffff0001 	.word	0xffff0001

08000998 <_fwalk_reent>:
 8000998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800099c:	4606      	mov	r6, r0
 800099e:	4688      	mov	r8, r1
 80009a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80009a4:	2700      	movs	r7, #0
 80009a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80009aa:	f1b9 0901 	subs.w	r9, r9, #1
 80009ae:	d505      	bpl.n	80009bc <_fwalk_reent+0x24>
 80009b0:	6824      	ldr	r4, [r4, #0]
 80009b2:	2c00      	cmp	r4, #0
 80009b4:	d1f7      	bne.n	80009a6 <_fwalk_reent+0xe>
 80009b6:	4638      	mov	r0, r7
 80009b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009bc:	89ab      	ldrh	r3, [r5, #12]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d907      	bls.n	80009d2 <_fwalk_reent+0x3a>
 80009c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80009c6:	3301      	adds	r3, #1
 80009c8:	d003      	beq.n	80009d2 <_fwalk_reent+0x3a>
 80009ca:	4629      	mov	r1, r5
 80009cc:	4630      	mov	r0, r6
 80009ce:	47c0      	blx	r8
 80009d0:	4307      	orrs	r7, r0
 80009d2:	3568      	adds	r5, #104	; 0x68
 80009d4:	e7e9      	b.n	80009aa <_fwalk_reent+0x12>

080009d6 <__retarget_lock_init_recursive>:
 80009d6:	4770      	bx	lr

080009d8 <__retarget_lock_acquire_recursive>:
 80009d8:	4770      	bx	lr

080009da <__retarget_lock_release_recursive>:
 80009da:	4770      	bx	lr

080009dc <sbrk_aligned>:
 80009dc:	b570      	push	{r4, r5, r6, lr}
 80009de:	4e0e      	ldr	r6, [pc, #56]	; (8000a18 <sbrk_aligned+0x3c>)
 80009e0:	460c      	mov	r4, r1
 80009e2:	6831      	ldr	r1, [r6, #0]
 80009e4:	4605      	mov	r5, r0
 80009e6:	b911      	cbnz	r1, 80009ee <sbrk_aligned+0x12>
 80009e8:	f000 f9e4 	bl	8000db4 <_sbrk_r>
 80009ec:	6030      	str	r0, [r6, #0]
 80009ee:	4621      	mov	r1, r4
 80009f0:	4628      	mov	r0, r5
 80009f2:	f000 f9df 	bl	8000db4 <_sbrk_r>
 80009f6:	1c43      	adds	r3, r0, #1
 80009f8:	d00a      	beq.n	8000a10 <sbrk_aligned+0x34>
 80009fa:	1cc4      	adds	r4, r0, #3
 80009fc:	f024 0403 	bic.w	r4, r4, #3
 8000a00:	42a0      	cmp	r0, r4
 8000a02:	d007      	beq.n	8000a14 <sbrk_aligned+0x38>
 8000a04:	1a21      	subs	r1, r4, r0
 8000a06:	4628      	mov	r0, r5
 8000a08:	f000 f9d4 	bl	8000db4 <_sbrk_r>
 8000a0c:	3001      	adds	r0, #1
 8000a0e:	d101      	bne.n	8000a14 <sbrk_aligned+0x38>
 8000a10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000a14:	4620      	mov	r0, r4
 8000a16:	bd70      	pop	{r4, r5, r6, pc}
 8000a18:	2400008c 	.word	0x2400008c

08000a1c <_malloc_r>:
 8000a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a20:	1ccd      	adds	r5, r1, #3
 8000a22:	f025 0503 	bic.w	r5, r5, #3
 8000a26:	3508      	adds	r5, #8
 8000a28:	2d0c      	cmp	r5, #12
 8000a2a:	bf38      	it	cc
 8000a2c:	250c      	movcc	r5, #12
 8000a2e:	2d00      	cmp	r5, #0
 8000a30:	4607      	mov	r7, r0
 8000a32:	db01      	blt.n	8000a38 <_malloc_r+0x1c>
 8000a34:	42a9      	cmp	r1, r5
 8000a36:	d905      	bls.n	8000a44 <_malloc_r+0x28>
 8000a38:	230c      	movs	r3, #12
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	2600      	movs	r6, #0
 8000a3e:	4630      	mov	r0, r6
 8000a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a44:	4e2e      	ldr	r6, [pc, #184]	; (8000b00 <_malloc_r+0xe4>)
 8000a46:	f000 fc25 	bl	8001294 <__malloc_lock>
 8000a4a:	6833      	ldr	r3, [r6, #0]
 8000a4c:	461c      	mov	r4, r3
 8000a4e:	bb34      	cbnz	r4, 8000a9e <_malloc_r+0x82>
 8000a50:	4629      	mov	r1, r5
 8000a52:	4638      	mov	r0, r7
 8000a54:	f7ff ffc2 	bl	80009dc <sbrk_aligned>
 8000a58:	1c43      	adds	r3, r0, #1
 8000a5a:	4604      	mov	r4, r0
 8000a5c:	d14d      	bne.n	8000afa <_malloc_r+0xde>
 8000a5e:	6834      	ldr	r4, [r6, #0]
 8000a60:	4626      	mov	r6, r4
 8000a62:	2e00      	cmp	r6, #0
 8000a64:	d140      	bne.n	8000ae8 <_malloc_r+0xcc>
 8000a66:	6823      	ldr	r3, [r4, #0]
 8000a68:	4631      	mov	r1, r6
 8000a6a:	4638      	mov	r0, r7
 8000a6c:	eb04 0803 	add.w	r8, r4, r3
 8000a70:	f000 f9a0 	bl	8000db4 <_sbrk_r>
 8000a74:	4580      	cmp	r8, r0
 8000a76:	d13a      	bne.n	8000aee <_malloc_r+0xd2>
 8000a78:	6823      	ldr	r3, [r4, #0]
 8000a7a:	3503      	adds	r5, #3
 8000a7c:	1aed      	subs	r5, r5, r3
 8000a7e:	f025 0503 	bic.w	r5, r5, #3
 8000a82:	3508      	adds	r5, #8
 8000a84:	2d0c      	cmp	r5, #12
 8000a86:	bf38      	it	cc
 8000a88:	250c      	movcc	r5, #12
 8000a8a:	4629      	mov	r1, r5
 8000a8c:	4638      	mov	r0, r7
 8000a8e:	f7ff ffa5 	bl	80009dc <sbrk_aligned>
 8000a92:	3001      	adds	r0, #1
 8000a94:	d02b      	beq.n	8000aee <_malloc_r+0xd2>
 8000a96:	6823      	ldr	r3, [r4, #0]
 8000a98:	442b      	add	r3, r5
 8000a9a:	6023      	str	r3, [r4, #0]
 8000a9c:	e00e      	b.n	8000abc <_malloc_r+0xa0>
 8000a9e:	6822      	ldr	r2, [r4, #0]
 8000aa0:	1b52      	subs	r2, r2, r5
 8000aa2:	d41e      	bmi.n	8000ae2 <_malloc_r+0xc6>
 8000aa4:	2a0b      	cmp	r2, #11
 8000aa6:	d916      	bls.n	8000ad6 <_malloc_r+0xba>
 8000aa8:	1961      	adds	r1, r4, r5
 8000aaa:	42a3      	cmp	r3, r4
 8000aac:	6025      	str	r5, [r4, #0]
 8000aae:	bf18      	it	ne
 8000ab0:	6059      	strne	r1, [r3, #4]
 8000ab2:	6863      	ldr	r3, [r4, #4]
 8000ab4:	bf08      	it	eq
 8000ab6:	6031      	streq	r1, [r6, #0]
 8000ab8:	5162      	str	r2, [r4, r5]
 8000aba:	604b      	str	r3, [r1, #4]
 8000abc:	4638      	mov	r0, r7
 8000abe:	f104 060b 	add.w	r6, r4, #11
 8000ac2:	f000 fbed 	bl	80012a0 <__malloc_unlock>
 8000ac6:	f026 0607 	bic.w	r6, r6, #7
 8000aca:	1d23      	adds	r3, r4, #4
 8000acc:	1af2      	subs	r2, r6, r3
 8000ace:	d0b6      	beq.n	8000a3e <_malloc_r+0x22>
 8000ad0:	1b9b      	subs	r3, r3, r6
 8000ad2:	50a3      	str	r3, [r4, r2]
 8000ad4:	e7b3      	b.n	8000a3e <_malloc_r+0x22>
 8000ad6:	6862      	ldr	r2, [r4, #4]
 8000ad8:	42a3      	cmp	r3, r4
 8000ada:	bf0c      	ite	eq
 8000adc:	6032      	streq	r2, [r6, #0]
 8000ade:	605a      	strne	r2, [r3, #4]
 8000ae0:	e7ec      	b.n	8000abc <_malloc_r+0xa0>
 8000ae2:	4623      	mov	r3, r4
 8000ae4:	6864      	ldr	r4, [r4, #4]
 8000ae6:	e7b2      	b.n	8000a4e <_malloc_r+0x32>
 8000ae8:	4634      	mov	r4, r6
 8000aea:	6876      	ldr	r6, [r6, #4]
 8000aec:	e7b9      	b.n	8000a62 <_malloc_r+0x46>
 8000aee:	230c      	movs	r3, #12
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4638      	mov	r0, r7
 8000af4:	f000 fbd4 	bl	80012a0 <__malloc_unlock>
 8000af8:	e7a1      	b.n	8000a3e <_malloc_r+0x22>
 8000afa:	6025      	str	r5, [r4, #0]
 8000afc:	e7de      	b.n	8000abc <_malloc_r+0xa0>
 8000afe:	bf00      	nop
 8000b00:	24000088 	.word	0x24000088

08000b04 <__sfputc_r>:
 8000b04:	6893      	ldr	r3, [r2, #8]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	b410      	push	{r4}
 8000b0c:	6093      	str	r3, [r2, #8]
 8000b0e:	da08      	bge.n	8000b22 <__sfputc_r+0x1e>
 8000b10:	6994      	ldr	r4, [r2, #24]
 8000b12:	42a3      	cmp	r3, r4
 8000b14:	db01      	blt.n	8000b1a <__sfputc_r+0x16>
 8000b16:	290a      	cmp	r1, #10
 8000b18:	d103      	bne.n	8000b22 <__sfputc_r+0x1e>
 8000b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b1e:	f000 b99d 	b.w	8000e5c <__swbuf_r>
 8000b22:	6813      	ldr	r3, [r2, #0]
 8000b24:	1c58      	adds	r0, r3, #1
 8000b26:	6010      	str	r0, [r2, #0]
 8000b28:	7019      	strb	r1, [r3, #0]
 8000b2a:	4608      	mov	r0, r1
 8000b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <__sfputs_r>:
 8000b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b34:	4606      	mov	r6, r0
 8000b36:	460f      	mov	r7, r1
 8000b38:	4614      	mov	r4, r2
 8000b3a:	18d5      	adds	r5, r2, r3
 8000b3c:	42ac      	cmp	r4, r5
 8000b3e:	d101      	bne.n	8000b44 <__sfputs_r+0x12>
 8000b40:	2000      	movs	r0, #0
 8000b42:	e007      	b.n	8000b54 <__sfputs_r+0x22>
 8000b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b48:	463a      	mov	r2, r7
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	f7ff ffda 	bl	8000b04 <__sfputc_r>
 8000b50:	1c43      	adds	r3, r0, #1
 8000b52:	d1f3      	bne.n	8000b3c <__sfputs_r+0xa>
 8000b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b58 <_vfiprintf_r>:
 8000b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b5c:	460d      	mov	r5, r1
 8000b5e:	b09d      	sub	sp, #116	; 0x74
 8000b60:	4614      	mov	r4, r2
 8000b62:	4698      	mov	r8, r3
 8000b64:	4606      	mov	r6, r0
 8000b66:	b118      	cbz	r0, 8000b70 <_vfiprintf_r+0x18>
 8000b68:	6983      	ldr	r3, [r0, #24]
 8000b6a:	b90b      	cbnz	r3, 8000b70 <_vfiprintf_r+0x18>
 8000b6c:	f7ff fe96 	bl	800089c <__sinit>
 8000b70:	4b88      	ldr	r3, [pc, #544]	; (8000d94 <_vfiprintf_r+0x23c>)
 8000b72:	429d      	cmp	r5, r3
 8000b74:	d11b      	bne.n	8000bae <_vfiprintf_r+0x56>
 8000b76:	6875      	ldr	r5, [r6, #4]
 8000b78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b7a:	07d9      	lsls	r1, r3, #31
 8000b7c:	d405      	bmi.n	8000b8a <_vfiprintf_r+0x32>
 8000b7e:	89ab      	ldrh	r3, [r5, #12]
 8000b80:	059a      	lsls	r2, r3, #22
 8000b82:	d402      	bmi.n	8000b8a <_vfiprintf_r+0x32>
 8000b84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b86:	f7ff ff27 	bl	80009d8 <__retarget_lock_acquire_recursive>
 8000b8a:	89ab      	ldrh	r3, [r5, #12]
 8000b8c:	071b      	lsls	r3, r3, #28
 8000b8e:	d501      	bpl.n	8000b94 <_vfiprintf_r+0x3c>
 8000b90:	692b      	ldr	r3, [r5, #16]
 8000b92:	b9eb      	cbnz	r3, 8000bd0 <_vfiprintf_r+0x78>
 8000b94:	4629      	mov	r1, r5
 8000b96:	4630      	mov	r0, r6
 8000b98:	f000 f9c4 	bl	8000f24 <__swsetup_r>
 8000b9c:	b1c0      	cbz	r0, 8000bd0 <_vfiprintf_r+0x78>
 8000b9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ba0:	07dc      	lsls	r4, r3, #31
 8000ba2:	d50e      	bpl.n	8000bc2 <_vfiprintf_r+0x6a>
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba8:	b01d      	add	sp, #116	; 0x74
 8000baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bae:	4b7a      	ldr	r3, [pc, #488]	; (8000d98 <_vfiprintf_r+0x240>)
 8000bb0:	429d      	cmp	r5, r3
 8000bb2:	d101      	bne.n	8000bb8 <_vfiprintf_r+0x60>
 8000bb4:	68b5      	ldr	r5, [r6, #8]
 8000bb6:	e7df      	b.n	8000b78 <_vfiprintf_r+0x20>
 8000bb8:	4b78      	ldr	r3, [pc, #480]	; (8000d9c <_vfiprintf_r+0x244>)
 8000bba:	429d      	cmp	r5, r3
 8000bbc:	bf08      	it	eq
 8000bbe:	68f5      	ldreq	r5, [r6, #12]
 8000bc0:	e7da      	b.n	8000b78 <_vfiprintf_r+0x20>
 8000bc2:	89ab      	ldrh	r3, [r5, #12]
 8000bc4:	0598      	lsls	r0, r3, #22
 8000bc6:	d4ed      	bmi.n	8000ba4 <_vfiprintf_r+0x4c>
 8000bc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bca:	f7ff ff06 	bl	80009da <__retarget_lock_release_recursive>
 8000bce:	e7e9      	b.n	8000ba4 <_vfiprintf_r+0x4c>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8000bd4:	2320      	movs	r3, #32
 8000bd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000bda:	f8cd 800c 	str.w	r8, [sp, #12]
 8000bde:	2330      	movs	r3, #48	; 0x30
 8000be0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000da0 <_vfiprintf_r+0x248>
 8000be4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000be8:	f04f 0901 	mov.w	r9, #1
 8000bec:	4623      	mov	r3, r4
 8000bee:	469a      	mov	sl, r3
 8000bf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000bf4:	b10a      	cbz	r2, 8000bfa <_vfiprintf_r+0xa2>
 8000bf6:	2a25      	cmp	r2, #37	; 0x25
 8000bf8:	d1f9      	bne.n	8000bee <_vfiprintf_r+0x96>
 8000bfa:	ebba 0b04 	subs.w	fp, sl, r4
 8000bfe:	d00b      	beq.n	8000c18 <_vfiprintf_r+0xc0>
 8000c00:	465b      	mov	r3, fp
 8000c02:	4622      	mov	r2, r4
 8000c04:	4629      	mov	r1, r5
 8000c06:	4630      	mov	r0, r6
 8000c08:	f7ff ff93 	bl	8000b32 <__sfputs_r>
 8000c0c:	3001      	adds	r0, #1
 8000c0e:	f000 80a9 	beq.w	8000d64 <_vfiprintf_r+0x20c>
 8000c12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c14:	445a      	add	r2, fp
 8000c16:	9209      	str	r2, [sp, #36]	; 0x24
 8000c18:	f89a 3000 	ldrb.w	r3, [sl]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f000 80a1 	beq.w	8000d64 <_vfiprintf_r+0x20c>
 8000c22:	2300      	movs	r3, #0
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c2c:	f10a 0a01 	add.w	sl, sl, #1
 8000c30:	9304      	str	r3, [sp, #16]
 8000c32:	9307      	str	r3, [sp, #28]
 8000c34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c38:	931a      	str	r3, [sp, #104]	; 0x68
 8000c3a:	4654      	mov	r4, sl
 8000c3c:	2205      	movs	r2, #5
 8000c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c42:	4857      	ldr	r0, [pc, #348]	; (8000da0 <_vfiprintf_r+0x248>)
 8000c44:	f7ff fb2c 	bl	80002a0 <memchr>
 8000c48:	9a04      	ldr	r2, [sp, #16]
 8000c4a:	b9d8      	cbnz	r0, 8000c84 <_vfiprintf_r+0x12c>
 8000c4c:	06d1      	lsls	r1, r2, #27
 8000c4e:	bf44      	itt	mi
 8000c50:	2320      	movmi	r3, #32
 8000c52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c56:	0713      	lsls	r3, r2, #28
 8000c58:	bf44      	itt	mi
 8000c5a:	232b      	movmi	r3, #43	; 0x2b
 8000c5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c60:	f89a 3000 	ldrb.w	r3, [sl]
 8000c64:	2b2a      	cmp	r3, #42	; 0x2a
 8000c66:	d015      	beq.n	8000c94 <_vfiprintf_r+0x13c>
 8000c68:	9a07      	ldr	r2, [sp, #28]
 8000c6a:	4654      	mov	r4, sl
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f04f 0c0a 	mov.w	ip, #10
 8000c72:	4621      	mov	r1, r4
 8000c74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c78:	3b30      	subs	r3, #48	; 0x30
 8000c7a:	2b09      	cmp	r3, #9
 8000c7c:	d94d      	bls.n	8000d1a <_vfiprintf_r+0x1c2>
 8000c7e:	b1b0      	cbz	r0, 8000cae <_vfiprintf_r+0x156>
 8000c80:	9207      	str	r2, [sp, #28]
 8000c82:	e014      	b.n	8000cae <_vfiprintf_r+0x156>
 8000c84:	eba0 0308 	sub.w	r3, r0, r8
 8000c88:	fa09 f303 	lsl.w	r3, r9, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	9304      	str	r3, [sp, #16]
 8000c90:	46a2      	mov	sl, r4
 8000c92:	e7d2      	b.n	8000c3a <_vfiprintf_r+0xe2>
 8000c94:	9b03      	ldr	r3, [sp, #12]
 8000c96:	1d19      	adds	r1, r3, #4
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	9103      	str	r1, [sp, #12]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	bfbb      	ittet	lt
 8000ca0:	425b      	neglt	r3, r3
 8000ca2:	f042 0202 	orrlt.w	r2, r2, #2
 8000ca6:	9307      	strge	r3, [sp, #28]
 8000ca8:	9307      	strlt	r3, [sp, #28]
 8000caa:	bfb8      	it	lt
 8000cac:	9204      	strlt	r2, [sp, #16]
 8000cae:	7823      	ldrb	r3, [r4, #0]
 8000cb0:	2b2e      	cmp	r3, #46	; 0x2e
 8000cb2:	d10c      	bne.n	8000cce <_vfiprintf_r+0x176>
 8000cb4:	7863      	ldrb	r3, [r4, #1]
 8000cb6:	2b2a      	cmp	r3, #42	; 0x2a
 8000cb8:	d134      	bne.n	8000d24 <_vfiprintf_r+0x1cc>
 8000cba:	9b03      	ldr	r3, [sp, #12]
 8000cbc:	1d1a      	adds	r2, r3, #4
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	9203      	str	r2, [sp, #12]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	bfb8      	it	lt
 8000cc6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000cca:	3402      	adds	r4, #2
 8000ccc:	9305      	str	r3, [sp, #20]
 8000cce:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8000db0 <_vfiprintf_r+0x258>
 8000cd2:	7821      	ldrb	r1, [r4, #0]
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	4650      	mov	r0, sl
 8000cd8:	f7ff fae2 	bl	80002a0 <memchr>
 8000cdc:	b138      	cbz	r0, 8000cee <_vfiprintf_r+0x196>
 8000cde:	9b04      	ldr	r3, [sp, #16]
 8000ce0:	eba0 000a 	sub.w	r0, r0, sl
 8000ce4:	2240      	movs	r2, #64	; 0x40
 8000ce6:	4082      	lsls	r2, r0
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	3401      	adds	r4, #1
 8000cec:	9304      	str	r3, [sp, #16]
 8000cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cf2:	482c      	ldr	r0, [pc, #176]	; (8000da4 <_vfiprintf_r+0x24c>)
 8000cf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000cf8:	2206      	movs	r2, #6
 8000cfa:	f7ff fad1 	bl	80002a0 <memchr>
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	d03f      	beq.n	8000d82 <_vfiprintf_r+0x22a>
 8000d02:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <_vfiprintf_r+0x250>)
 8000d04:	bb1b      	cbnz	r3, 8000d4e <_vfiprintf_r+0x1f6>
 8000d06:	9b03      	ldr	r3, [sp, #12]
 8000d08:	3307      	adds	r3, #7
 8000d0a:	f023 0307 	bic.w	r3, r3, #7
 8000d0e:	3308      	adds	r3, #8
 8000d10:	9303      	str	r3, [sp, #12]
 8000d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d14:	443b      	add	r3, r7
 8000d16:	9309      	str	r3, [sp, #36]	; 0x24
 8000d18:	e768      	b.n	8000bec <_vfiprintf_r+0x94>
 8000d1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d1e:	460c      	mov	r4, r1
 8000d20:	2001      	movs	r0, #1
 8000d22:	e7a6      	b.n	8000c72 <_vfiprintf_r+0x11a>
 8000d24:	2300      	movs	r3, #0
 8000d26:	3401      	adds	r4, #1
 8000d28:	9305      	str	r3, [sp, #20]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f04f 0c0a 	mov.w	ip, #10
 8000d30:	4620      	mov	r0, r4
 8000d32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d36:	3a30      	subs	r2, #48	; 0x30
 8000d38:	2a09      	cmp	r2, #9
 8000d3a:	d903      	bls.n	8000d44 <_vfiprintf_r+0x1ec>
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d0c6      	beq.n	8000cce <_vfiprintf_r+0x176>
 8000d40:	9105      	str	r1, [sp, #20]
 8000d42:	e7c4      	b.n	8000cce <_vfiprintf_r+0x176>
 8000d44:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d48:	4604      	mov	r4, r0
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e7f0      	b.n	8000d30 <_vfiprintf_r+0x1d8>
 8000d4e:	ab03      	add	r3, sp, #12
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	462a      	mov	r2, r5
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <_vfiprintf_r+0x254>)
 8000d56:	a904      	add	r1, sp, #16
 8000d58:	4630      	mov	r0, r6
 8000d5a:	f3af 8000 	nop.w
 8000d5e:	4607      	mov	r7, r0
 8000d60:	1c78      	adds	r0, r7, #1
 8000d62:	d1d6      	bne.n	8000d12 <_vfiprintf_r+0x1ba>
 8000d64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d66:	07d9      	lsls	r1, r3, #31
 8000d68:	d405      	bmi.n	8000d76 <_vfiprintf_r+0x21e>
 8000d6a:	89ab      	ldrh	r3, [r5, #12]
 8000d6c:	059a      	lsls	r2, r3, #22
 8000d6e:	d402      	bmi.n	8000d76 <_vfiprintf_r+0x21e>
 8000d70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d72:	f7ff fe32 	bl	80009da <__retarget_lock_release_recursive>
 8000d76:	89ab      	ldrh	r3, [r5, #12]
 8000d78:	065b      	lsls	r3, r3, #25
 8000d7a:	f53f af13 	bmi.w	8000ba4 <_vfiprintf_r+0x4c>
 8000d7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d80:	e712      	b.n	8000ba8 <_vfiprintf_r+0x50>
 8000d82:	ab03      	add	r3, sp, #12
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	462a      	mov	r2, r5
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <_vfiprintf_r+0x254>)
 8000d8a:	a904      	add	r1, sp, #16
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	f000 fb47 	bl	8001420 <_printf_i>
 8000d92:	e7e4      	b.n	8000d5e <_vfiprintf_r+0x206>
 8000d94:	08001730 	.word	0x08001730
 8000d98:	08001750 	.word	0x08001750
 8000d9c:	08001710 	.word	0x08001710
 8000da0:	08001770 	.word	0x08001770
 8000da4:	0800177a 	.word	0x0800177a
 8000da8:	00000000 	.word	0x00000000
 8000dac:	08000b33 	.word	0x08000b33
 8000db0:	08001776 	.word	0x08001776

08000db4 <_sbrk_r>:
 8000db4:	b538      	push	{r3, r4, r5, lr}
 8000db6:	4d06      	ldr	r5, [pc, #24]	; (8000dd0 <_sbrk_r+0x1c>)
 8000db8:	2300      	movs	r3, #0
 8000dba:	4604      	mov	r4, r0
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	602b      	str	r3, [r5, #0]
 8000dc0:	f7ff fb9a 	bl	80004f8 <_sbrk>
 8000dc4:	1c43      	adds	r3, r0, #1
 8000dc6:	d102      	bne.n	8000dce <_sbrk_r+0x1a>
 8000dc8:	682b      	ldr	r3, [r5, #0]
 8000dca:	b103      	cbz	r3, 8000dce <_sbrk_r+0x1a>
 8000dcc:	6023      	str	r3, [r4, #0]
 8000dce:	bd38      	pop	{r3, r4, r5, pc}
 8000dd0:	24000090 	.word	0x24000090

08000dd4 <__sread>:
 8000dd4:	b510      	push	{r4, lr}
 8000dd6:	460c      	mov	r4, r1
 8000dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ddc:	f000 fc42 	bl	8001664 <_read_r>
 8000de0:	2800      	cmp	r0, #0
 8000de2:	bfab      	itete	ge
 8000de4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000de6:	89a3      	ldrhlt	r3, [r4, #12]
 8000de8:	181b      	addge	r3, r3, r0
 8000dea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000dee:	bfac      	ite	ge
 8000df0:	6563      	strge	r3, [r4, #84]	; 0x54
 8000df2:	81a3      	strhlt	r3, [r4, #12]
 8000df4:	bd10      	pop	{r4, pc}

08000df6 <__swrite>:
 8000df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dfa:	461f      	mov	r7, r3
 8000dfc:	898b      	ldrh	r3, [r1, #12]
 8000dfe:	05db      	lsls	r3, r3, #23
 8000e00:	4605      	mov	r5, r0
 8000e02:	460c      	mov	r4, r1
 8000e04:	4616      	mov	r6, r2
 8000e06:	d505      	bpl.n	8000e14 <__swrite+0x1e>
 8000e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f000 f9c8 	bl	80011a4 <_lseek_r>
 8000e14:	89a3      	ldrh	r3, [r4, #12]
 8000e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e1e:	81a3      	strh	r3, [r4, #12]
 8000e20:	4632      	mov	r2, r6
 8000e22:	463b      	mov	r3, r7
 8000e24:	4628      	mov	r0, r5
 8000e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e2a:	f000 b869 	b.w	8000f00 <_write_r>

08000e2e <__sseek>:
 8000e2e:	b510      	push	{r4, lr}
 8000e30:	460c      	mov	r4, r1
 8000e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e36:	f000 f9b5 	bl	80011a4 <_lseek_r>
 8000e3a:	1c43      	adds	r3, r0, #1
 8000e3c:	89a3      	ldrh	r3, [r4, #12]
 8000e3e:	bf15      	itete	ne
 8000e40:	6560      	strne	r0, [r4, #84]	; 0x54
 8000e42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000e46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000e4a:	81a3      	strheq	r3, [r4, #12]
 8000e4c:	bf18      	it	ne
 8000e4e:	81a3      	strhne	r3, [r4, #12]
 8000e50:	bd10      	pop	{r4, pc}

08000e52 <__sclose>:
 8000e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e56:	f000 b8d3 	b.w	8001000 <_close_r>
	...

08000e5c <__swbuf_r>:
 8000e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e5e:	460e      	mov	r6, r1
 8000e60:	4614      	mov	r4, r2
 8000e62:	4605      	mov	r5, r0
 8000e64:	b118      	cbz	r0, 8000e6e <__swbuf_r+0x12>
 8000e66:	6983      	ldr	r3, [r0, #24]
 8000e68:	b90b      	cbnz	r3, 8000e6e <__swbuf_r+0x12>
 8000e6a:	f7ff fd17 	bl	800089c <__sinit>
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <__swbuf_r+0x98>)
 8000e70:	429c      	cmp	r4, r3
 8000e72:	d12b      	bne.n	8000ecc <__swbuf_r+0x70>
 8000e74:	686c      	ldr	r4, [r5, #4]
 8000e76:	69a3      	ldr	r3, [r4, #24]
 8000e78:	60a3      	str	r3, [r4, #8]
 8000e7a:	89a3      	ldrh	r3, [r4, #12]
 8000e7c:	071a      	lsls	r2, r3, #28
 8000e7e:	d52f      	bpl.n	8000ee0 <__swbuf_r+0x84>
 8000e80:	6923      	ldr	r3, [r4, #16]
 8000e82:	b36b      	cbz	r3, 8000ee0 <__swbuf_r+0x84>
 8000e84:	6923      	ldr	r3, [r4, #16]
 8000e86:	6820      	ldr	r0, [r4, #0]
 8000e88:	1ac0      	subs	r0, r0, r3
 8000e8a:	6963      	ldr	r3, [r4, #20]
 8000e8c:	b2f6      	uxtb	r6, r6
 8000e8e:	4283      	cmp	r3, r0
 8000e90:	4637      	mov	r7, r6
 8000e92:	dc04      	bgt.n	8000e9e <__swbuf_r+0x42>
 8000e94:	4621      	mov	r1, r4
 8000e96:	4628      	mov	r0, r5
 8000e98:	f000 f948 	bl	800112c <_fflush_r>
 8000e9c:	bb30      	cbnz	r0, 8000eec <__swbuf_r+0x90>
 8000e9e:	68a3      	ldr	r3, [r4, #8]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	60a3      	str	r3, [r4, #8]
 8000ea4:	6823      	ldr	r3, [r4, #0]
 8000ea6:	1c5a      	adds	r2, r3, #1
 8000ea8:	6022      	str	r2, [r4, #0]
 8000eaa:	701e      	strb	r6, [r3, #0]
 8000eac:	6963      	ldr	r3, [r4, #20]
 8000eae:	3001      	adds	r0, #1
 8000eb0:	4283      	cmp	r3, r0
 8000eb2:	d004      	beq.n	8000ebe <__swbuf_r+0x62>
 8000eb4:	89a3      	ldrh	r3, [r4, #12]
 8000eb6:	07db      	lsls	r3, r3, #31
 8000eb8:	d506      	bpl.n	8000ec8 <__swbuf_r+0x6c>
 8000eba:	2e0a      	cmp	r6, #10
 8000ebc:	d104      	bne.n	8000ec8 <__swbuf_r+0x6c>
 8000ebe:	4621      	mov	r1, r4
 8000ec0:	4628      	mov	r0, r5
 8000ec2:	f000 f933 	bl	800112c <_fflush_r>
 8000ec6:	b988      	cbnz	r0, 8000eec <__swbuf_r+0x90>
 8000ec8:	4638      	mov	r0, r7
 8000eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <__swbuf_r+0x9c>)
 8000ece:	429c      	cmp	r4, r3
 8000ed0:	d101      	bne.n	8000ed6 <__swbuf_r+0x7a>
 8000ed2:	68ac      	ldr	r4, [r5, #8]
 8000ed4:	e7cf      	b.n	8000e76 <__swbuf_r+0x1a>
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <__swbuf_r+0xa0>)
 8000ed8:	429c      	cmp	r4, r3
 8000eda:	bf08      	it	eq
 8000edc:	68ec      	ldreq	r4, [r5, #12]
 8000ede:	e7ca      	b.n	8000e76 <__swbuf_r+0x1a>
 8000ee0:	4621      	mov	r1, r4
 8000ee2:	4628      	mov	r0, r5
 8000ee4:	f000 f81e 	bl	8000f24 <__swsetup_r>
 8000ee8:	2800      	cmp	r0, #0
 8000eea:	d0cb      	beq.n	8000e84 <__swbuf_r+0x28>
 8000eec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000ef0:	e7ea      	b.n	8000ec8 <__swbuf_r+0x6c>
 8000ef2:	bf00      	nop
 8000ef4:	08001730 	.word	0x08001730
 8000ef8:	08001750 	.word	0x08001750
 8000efc:	08001710 	.word	0x08001710

08000f00 <_write_r>:
 8000f00:	b538      	push	{r3, r4, r5, lr}
 8000f02:	4d07      	ldr	r5, [pc, #28]	; (8000f20 <_write_r+0x20>)
 8000f04:	4604      	mov	r4, r0
 8000f06:	4608      	mov	r0, r1
 8000f08:	4611      	mov	r1, r2
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	602a      	str	r2, [r5, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	f7ff faa1 	bl	8000456 <_write>
 8000f14:	1c43      	adds	r3, r0, #1
 8000f16:	d102      	bne.n	8000f1e <_write_r+0x1e>
 8000f18:	682b      	ldr	r3, [r5, #0]
 8000f1a:	b103      	cbz	r3, 8000f1e <_write_r+0x1e>
 8000f1c:	6023      	str	r3, [r4, #0]
 8000f1e:	bd38      	pop	{r3, r4, r5, pc}
 8000f20:	24000090 	.word	0x24000090

08000f24 <__swsetup_r>:
 8000f24:	4b32      	ldr	r3, [pc, #200]	; (8000ff0 <__swsetup_r+0xcc>)
 8000f26:	b570      	push	{r4, r5, r6, lr}
 8000f28:	681d      	ldr	r5, [r3, #0]
 8000f2a:	4606      	mov	r6, r0
 8000f2c:	460c      	mov	r4, r1
 8000f2e:	b125      	cbz	r5, 8000f3a <__swsetup_r+0x16>
 8000f30:	69ab      	ldr	r3, [r5, #24]
 8000f32:	b913      	cbnz	r3, 8000f3a <__swsetup_r+0x16>
 8000f34:	4628      	mov	r0, r5
 8000f36:	f7ff fcb1 	bl	800089c <__sinit>
 8000f3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <__swsetup_r+0xd0>)
 8000f3c:	429c      	cmp	r4, r3
 8000f3e:	d10f      	bne.n	8000f60 <__swsetup_r+0x3c>
 8000f40:	686c      	ldr	r4, [r5, #4]
 8000f42:	89a3      	ldrh	r3, [r4, #12]
 8000f44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000f48:	0719      	lsls	r1, r3, #28
 8000f4a:	d42c      	bmi.n	8000fa6 <__swsetup_r+0x82>
 8000f4c:	06dd      	lsls	r5, r3, #27
 8000f4e:	d411      	bmi.n	8000f74 <__swsetup_r+0x50>
 8000f50:	2309      	movs	r3, #9
 8000f52:	6033      	str	r3, [r6, #0]
 8000f54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000f58:	81a3      	strh	r3, [r4, #12]
 8000f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f5e:	e03e      	b.n	8000fde <__swsetup_r+0xba>
 8000f60:	4b25      	ldr	r3, [pc, #148]	; (8000ff8 <__swsetup_r+0xd4>)
 8000f62:	429c      	cmp	r4, r3
 8000f64:	d101      	bne.n	8000f6a <__swsetup_r+0x46>
 8000f66:	68ac      	ldr	r4, [r5, #8]
 8000f68:	e7eb      	b.n	8000f42 <__swsetup_r+0x1e>
 8000f6a:	4b24      	ldr	r3, [pc, #144]	; (8000ffc <__swsetup_r+0xd8>)
 8000f6c:	429c      	cmp	r4, r3
 8000f6e:	bf08      	it	eq
 8000f70:	68ec      	ldreq	r4, [r5, #12]
 8000f72:	e7e6      	b.n	8000f42 <__swsetup_r+0x1e>
 8000f74:	0758      	lsls	r0, r3, #29
 8000f76:	d512      	bpl.n	8000f9e <__swsetup_r+0x7a>
 8000f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f7a:	b141      	cbz	r1, 8000f8e <__swsetup_r+0x6a>
 8000f7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f80:	4299      	cmp	r1, r3
 8000f82:	d002      	beq.n	8000f8a <__swsetup_r+0x66>
 8000f84:	4630      	mov	r0, r6
 8000f86:	f000 f991 	bl	80012ac <_free_r>
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	6363      	str	r3, [r4, #52]	; 0x34
 8000f8e:	89a3      	ldrh	r3, [r4, #12]
 8000f90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000f94:	81a3      	strh	r3, [r4, #12]
 8000f96:	2300      	movs	r3, #0
 8000f98:	6063      	str	r3, [r4, #4]
 8000f9a:	6923      	ldr	r3, [r4, #16]
 8000f9c:	6023      	str	r3, [r4, #0]
 8000f9e:	89a3      	ldrh	r3, [r4, #12]
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	81a3      	strh	r3, [r4, #12]
 8000fa6:	6923      	ldr	r3, [r4, #16]
 8000fa8:	b94b      	cbnz	r3, 8000fbe <__swsetup_r+0x9a>
 8000faa:	89a3      	ldrh	r3, [r4, #12]
 8000fac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fb4:	d003      	beq.n	8000fbe <__swsetup_r+0x9a>
 8000fb6:	4621      	mov	r1, r4
 8000fb8:	4630      	mov	r0, r6
 8000fba:	f000 f92b 	bl	8001214 <__smakebuf_r>
 8000fbe:	89a0      	ldrh	r0, [r4, #12]
 8000fc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000fc4:	f010 0301 	ands.w	r3, r0, #1
 8000fc8:	d00a      	beq.n	8000fe0 <__swsetup_r+0xbc>
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60a3      	str	r3, [r4, #8]
 8000fce:	6963      	ldr	r3, [r4, #20]
 8000fd0:	425b      	negs	r3, r3
 8000fd2:	61a3      	str	r3, [r4, #24]
 8000fd4:	6923      	ldr	r3, [r4, #16]
 8000fd6:	b943      	cbnz	r3, 8000fea <__swsetup_r+0xc6>
 8000fd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000fdc:	d1ba      	bne.n	8000f54 <__swsetup_r+0x30>
 8000fde:	bd70      	pop	{r4, r5, r6, pc}
 8000fe0:	0781      	lsls	r1, r0, #30
 8000fe2:	bf58      	it	pl
 8000fe4:	6963      	ldrpl	r3, [r4, #20]
 8000fe6:	60a3      	str	r3, [r4, #8]
 8000fe8:	e7f4      	b.n	8000fd4 <__swsetup_r+0xb0>
 8000fea:	2000      	movs	r0, #0
 8000fec:	e7f7      	b.n	8000fde <__swsetup_r+0xba>
 8000fee:	bf00      	nop
 8000ff0:	24000000 	.word	0x24000000
 8000ff4:	08001730 	.word	0x08001730
 8000ff8:	08001750 	.word	0x08001750
 8000ffc:	08001710 	.word	0x08001710

08001000 <_close_r>:
 8001000:	b538      	push	{r3, r4, r5, lr}
 8001002:	4d06      	ldr	r5, [pc, #24]	; (800101c <_close_r+0x1c>)
 8001004:	2300      	movs	r3, #0
 8001006:	4604      	mov	r4, r0
 8001008:	4608      	mov	r0, r1
 800100a:	602b      	str	r3, [r5, #0]
 800100c:	f7ff fa3f 	bl	800048e <_close>
 8001010:	1c43      	adds	r3, r0, #1
 8001012:	d102      	bne.n	800101a <_close_r+0x1a>
 8001014:	682b      	ldr	r3, [r5, #0]
 8001016:	b103      	cbz	r3, 800101a <_close_r+0x1a>
 8001018:	6023      	str	r3, [r4, #0]
 800101a:	bd38      	pop	{r3, r4, r5, pc}
 800101c:	24000090 	.word	0x24000090

08001020 <__sflush_r>:
 8001020:	898a      	ldrh	r2, [r1, #12]
 8001022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001026:	4605      	mov	r5, r0
 8001028:	0710      	lsls	r0, r2, #28
 800102a:	460c      	mov	r4, r1
 800102c:	d458      	bmi.n	80010e0 <__sflush_r+0xc0>
 800102e:	684b      	ldr	r3, [r1, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	dc05      	bgt.n	8001040 <__sflush_r+0x20>
 8001034:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001036:	2b00      	cmp	r3, #0
 8001038:	dc02      	bgt.n	8001040 <__sflush_r+0x20>
 800103a:	2000      	movs	r0, #0
 800103c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001040:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001042:	2e00      	cmp	r6, #0
 8001044:	d0f9      	beq.n	800103a <__sflush_r+0x1a>
 8001046:	2300      	movs	r3, #0
 8001048:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800104c:	682f      	ldr	r7, [r5, #0]
 800104e:	6a21      	ldr	r1, [r4, #32]
 8001050:	602b      	str	r3, [r5, #0]
 8001052:	d032      	beq.n	80010ba <__sflush_r+0x9a>
 8001054:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001056:	89a3      	ldrh	r3, [r4, #12]
 8001058:	075a      	lsls	r2, r3, #29
 800105a:	d505      	bpl.n	8001068 <__sflush_r+0x48>
 800105c:	6863      	ldr	r3, [r4, #4]
 800105e:	1ac0      	subs	r0, r0, r3
 8001060:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001062:	b10b      	cbz	r3, 8001068 <__sflush_r+0x48>
 8001064:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001066:	1ac0      	subs	r0, r0, r3
 8001068:	2300      	movs	r3, #0
 800106a:	4602      	mov	r2, r0
 800106c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800106e:	6a21      	ldr	r1, [r4, #32]
 8001070:	4628      	mov	r0, r5
 8001072:	47b0      	blx	r6
 8001074:	1c43      	adds	r3, r0, #1
 8001076:	89a3      	ldrh	r3, [r4, #12]
 8001078:	d106      	bne.n	8001088 <__sflush_r+0x68>
 800107a:	6829      	ldr	r1, [r5, #0]
 800107c:	291d      	cmp	r1, #29
 800107e:	d82b      	bhi.n	80010d8 <__sflush_r+0xb8>
 8001080:	4a29      	ldr	r2, [pc, #164]	; (8001128 <__sflush_r+0x108>)
 8001082:	410a      	asrs	r2, r1
 8001084:	07d6      	lsls	r6, r2, #31
 8001086:	d427      	bmi.n	80010d8 <__sflush_r+0xb8>
 8001088:	2200      	movs	r2, #0
 800108a:	6062      	str	r2, [r4, #4]
 800108c:	04d9      	lsls	r1, r3, #19
 800108e:	6922      	ldr	r2, [r4, #16]
 8001090:	6022      	str	r2, [r4, #0]
 8001092:	d504      	bpl.n	800109e <__sflush_r+0x7e>
 8001094:	1c42      	adds	r2, r0, #1
 8001096:	d101      	bne.n	800109c <__sflush_r+0x7c>
 8001098:	682b      	ldr	r3, [r5, #0]
 800109a:	b903      	cbnz	r3, 800109e <__sflush_r+0x7e>
 800109c:	6560      	str	r0, [r4, #84]	; 0x54
 800109e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80010a0:	602f      	str	r7, [r5, #0]
 80010a2:	2900      	cmp	r1, #0
 80010a4:	d0c9      	beq.n	800103a <__sflush_r+0x1a>
 80010a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80010aa:	4299      	cmp	r1, r3
 80010ac:	d002      	beq.n	80010b4 <__sflush_r+0x94>
 80010ae:	4628      	mov	r0, r5
 80010b0:	f000 f8fc 	bl	80012ac <_free_r>
 80010b4:	2000      	movs	r0, #0
 80010b6:	6360      	str	r0, [r4, #52]	; 0x34
 80010b8:	e7c0      	b.n	800103c <__sflush_r+0x1c>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4628      	mov	r0, r5
 80010be:	47b0      	blx	r6
 80010c0:	1c41      	adds	r1, r0, #1
 80010c2:	d1c8      	bne.n	8001056 <__sflush_r+0x36>
 80010c4:	682b      	ldr	r3, [r5, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0c5      	beq.n	8001056 <__sflush_r+0x36>
 80010ca:	2b1d      	cmp	r3, #29
 80010cc:	d001      	beq.n	80010d2 <__sflush_r+0xb2>
 80010ce:	2b16      	cmp	r3, #22
 80010d0:	d101      	bne.n	80010d6 <__sflush_r+0xb6>
 80010d2:	602f      	str	r7, [r5, #0]
 80010d4:	e7b1      	b.n	800103a <__sflush_r+0x1a>
 80010d6:	89a3      	ldrh	r3, [r4, #12]
 80010d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010dc:	81a3      	strh	r3, [r4, #12]
 80010de:	e7ad      	b.n	800103c <__sflush_r+0x1c>
 80010e0:	690f      	ldr	r7, [r1, #16]
 80010e2:	2f00      	cmp	r7, #0
 80010e4:	d0a9      	beq.n	800103a <__sflush_r+0x1a>
 80010e6:	0793      	lsls	r3, r2, #30
 80010e8:	680e      	ldr	r6, [r1, #0]
 80010ea:	bf08      	it	eq
 80010ec:	694b      	ldreq	r3, [r1, #20]
 80010ee:	600f      	str	r7, [r1, #0]
 80010f0:	bf18      	it	ne
 80010f2:	2300      	movne	r3, #0
 80010f4:	eba6 0807 	sub.w	r8, r6, r7
 80010f8:	608b      	str	r3, [r1, #8]
 80010fa:	f1b8 0f00 	cmp.w	r8, #0
 80010fe:	dd9c      	ble.n	800103a <__sflush_r+0x1a>
 8001100:	6a21      	ldr	r1, [r4, #32]
 8001102:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001104:	4643      	mov	r3, r8
 8001106:	463a      	mov	r2, r7
 8001108:	4628      	mov	r0, r5
 800110a:	47b0      	blx	r6
 800110c:	2800      	cmp	r0, #0
 800110e:	dc06      	bgt.n	800111e <__sflush_r+0xfe>
 8001110:	89a3      	ldrh	r3, [r4, #12]
 8001112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001116:	81a3      	strh	r3, [r4, #12]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800111c:	e78e      	b.n	800103c <__sflush_r+0x1c>
 800111e:	4407      	add	r7, r0
 8001120:	eba8 0800 	sub.w	r8, r8, r0
 8001124:	e7e9      	b.n	80010fa <__sflush_r+0xda>
 8001126:	bf00      	nop
 8001128:	dfbffffe 	.word	0xdfbffffe

0800112c <_fflush_r>:
 800112c:	b538      	push	{r3, r4, r5, lr}
 800112e:	690b      	ldr	r3, [r1, #16]
 8001130:	4605      	mov	r5, r0
 8001132:	460c      	mov	r4, r1
 8001134:	b913      	cbnz	r3, 800113c <_fflush_r+0x10>
 8001136:	2500      	movs	r5, #0
 8001138:	4628      	mov	r0, r5
 800113a:	bd38      	pop	{r3, r4, r5, pc}
 800113c:	b118      	cbz	r0, 8001146 <_fflush_r+0x1a>
 800113e:	6983      	ldr	r3, [r0, #24]
 8001140:	b90b      	cbnz	r3, 8001146 <_fflush_r+0x1a>
 8001142:	f7ff fbab 	bl	800089c <__sinit>
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <_fflush_r+0x6c>)
 8001148:	429c      	cmp	r4, r3
 800114a:	d11b      	bne.n	8001184 <_fflush_r+0x58>
 800114c:	686c      	ldr	r4, [r5, #4]
 800114e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0ef      	beq.n	8001136 <_fflush_r+0xa>
 8001156:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001158:	07d0      	lsls	r0, r2, #31
 800115a:	d404      	bmi.n	8001166 <_fflush_r+0x3a>
 800115c:	0599      	lsls	r1, r3, #22
 800115e:	d402      	bmi.n	8001166 <_fflush_r+0x3a>
 8001160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001162:	f7ff fc39 	bl	80009d8 <__retarget_lock_acquire_recursive>
 8001166:	4628      	mov	r0, r5
 8001168:	4621      	mov	r1, r4
 800116a:	f7ff ff59 	bl	8001020 <__sflush_r>
 800116e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001170:	07da      	lsls	r2, r3, #31
 8001172:	4605      	mov	r5, r0
 8001174:	d4e0      	bmi.n	8001138 <_fflush_r+0xc>
 8001176:	89a3      	ldrh	r3, [r4, #12]
 8001178:	059b      	lsls	r3, r3, #22
 800117a:	d4dd      	bmi.n	8001138 <_fflush_r+0xc>
 800117c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800117e:	f7ff fc2c 	bl	80009da <__retarget_lock_release_recursive>
 8001182:	e7d9      	b.n	8001138 <_fflush_r+0xc>
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <_fflush_r+0x70>)
 8001186:	429c      	cmp	r4, r3
 8001188:	d101      	bne.n	800118e <_fflush_r+0x62>
 800118a:	68ac      	ldr	r4, [r5, #8]
 800118c:	e7df      	b.n	800114e <_fflush_r+0x22>
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <_fflush_r+0x74>)
 8001190:	429c      	cmp	r4, r3
 8001192:	bf08      	it	eq
 8001194:	68ec      	ldreq	r4, [r5, #12]
 8001196:	e7da      	b.n	800114e <_fflush_r+0x22>
 8001198:	08001730 	.word	0x08001730
 800119c:	08001750 	.word	0x08001750
 80011a0:	08001710 	.word	0x08001710

080011a4 <_lseek_r>:
 80011a4:	b538      	push	{r3, r4, r5, lr}
 80011a6:	4d07      	ldr	r5, [pc, #28]	; (80011c4 <_lseek_r+0x20>)
 80011a8:	4604      	mov	r4, r0
 80011aa:	4608      	mov	r0, r1
 80011ac:	4611      	mov	r1, r2
 80011ae:	2200      	movs	r2, #0
 80011b0:	602a      	str	r2, [r5, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	f7ff f992 	bl	80004dc <_lseek>
 80011b8:	1c43      	adds	r3, r0, #1
 80011ba:	d102      	bne.n	80011c2 <_lseek_r+0x1e>
 80011bc:	682b      	ldr	r3, [r5, #0]
 80011be:	b103      	cbz	r3, 80011c2 <_lseek_r+0x1e>
 80011c0:	6023      	str	r3, [r4, #0]
 80011c2:	bd38      	pop	{r3, r4, r5, pc}
 80011c4:	24000090 	.word	0x24000090

080011c8 <__swhatbuf_r>:
 80011c8:	b570      	push	{r4, r5, r6, lr}
 80011ca:	460c      	mov	r4, r1
 80011cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011d0:	2900      	cmp	r1, #0
 80011d2:	b096      	sub	sp, #88	; 0x58
 80011d4:	4615      	mov	r5, r2
 80011d6:	461e      	mov	r6, r3
 80011d8:	da0d      	bge.n	80011f6 <__swhatbuf_r+0x2e>
 80011da:	89a3      	ldrh	r3, [r4, #12]
 80011dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80011e0:	f04f 0100 	mov.w	r1, #0
 80011e4:	bf0c      	ite	eq
 80011e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80011ea:	2340      	movne	r3, #64	; 0x40
 80011ec:	2000      	movs	r0, #0
 80011ee:	6031      	str	r1, [r6, #0]
 80011f0:	602b      	str	r3, [r5, #0]
 80011f2:	b016      	add	sp, #88	; 0x58
 80011f4:	bd70      	pop	{r4, r5, r6, pc}
 80011f6:	466a      	mov	r2, sp
 80011f8:	f000 fa46 	bl	8001688 <_fstat_r>
 80011fc:	2800      	cmp	r0, #0
 80011fe:	dbec      	blt.n	80011da <__swhatbuf_r+0x12>
 8001200:	9901      	ldr	r1, [sp, #4]
 8001202:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001206:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800120a:	4259      	negs	r1, r3
 800120c:	4159      	adcs	r1, r3
 800120e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001212:	e7eb      	b.n	80011ec <__swhatbuf_r+0x24>

08001214 <__smakebuf_r>:
 8001214:	898b      	ldrh	r3, [r1, #12]
 8001216:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001218:	079d      	lsls	r5, r3, #30
 800121a:	4606      	mov	r6, r0
 800121c:	460c      	mov	r4, r1
 800121e:	d507      	bpl.n	8001230 <__smakebuf_r+0x1c>
 8001220:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001224:	6023      	str	r3, [r4, #0]
 8001226:	6123      	str	r3, [r4, #16]
 8001228:	2301      	movs	r3, #1
 800122a:	6163      	str	r3, [r4, #20]
 800122c:	b002      	add	sp, #8
 800122e:	bd70      	pop	{r4, r5, r6, pc}
 8001230:	ab01      	add	r3, sp, #4
 8001232:	466a      	mov	r2, sp
 8001234:	f7ff ffc8 	bl	80011c8 <__swhatbuf_r>
 8001238:	9900      	ldr	r1, [sp, #0]
 800123a:	4605      	mov	r5, r0
 800123c:	4630      	mov	r0, r6
 800123e:	f7ff fbed 	bl	8000a1c <_malloc_r>
 8001242:	b948      	cbnz	r0, 8001258 <__smakebuf_r+0x44>
 8001244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001248:	059a      	lsls	r2, r3, #22
 800124a:	d4ef      	bmi.n	800122c <__smakebuf_r+0x18>
 800124c:	f023 0303 	bic.w	r3, r3, #3
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	81a3      	strh	r3, [r4, #12]
 8001256:	e7e3      	b.n	8001220 <__smakebuf_r+0xc>
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <__smakebuf_r+0x7c>)
 800125a:	62b3      	str	r3, [r6, #40]	; 0x28
 800125c:	89a3      	ldrh	r3, [r4, #12]
 800125e:	6020      	str	r0, [r4, #0]
 8001260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001264:	81a3      	strh	r3, [r4, #12]
 8001266:	9b00      	ldr	r3, [sp, #0]
 8001268:	6163      	str	r3, [r4, #20]
 800126a:	9b01      	ldr	r3, [sp, #4]
 800126c:	6120      	str	r0, [r4, #16]
 800126e:	b15b      	cbz	r3, 8001288 <__smakebuf_r+0x74>
 8001270:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001274:	4630      	mov	r0, r6
 8001276:	f000 fa19 	bl	80016ac <_isatty_r>
 800127a:	b128      	cbz	r0, 8001288 <__smakebuf_r+0x74>
 800127c:	89a3      	ldrh	r3, [r4, #12]
 800127e:	f023 0303 	bic.w	r3, r3, #3
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	81a3      	strh	r3, [r4, #12]
 8001288:	89a3      	ldrh	r3, [r4, #12]
 800128a:	431d      	orrs	r5, r3
 800128c:	81a5      	strh	r5, [r4, #12]
 800128e:	e7cd      	b.n	800122c <__smakebuf_r+0x18>
 8001290:	08000835 	.word	0x08000835

08001294 <__malloc_lock>:
 8001294:	4801      	ldr	r0, [pc, #4]	; (800129c <__malloc_lock+0x8>)
 8001296:	f7ff bb9f 	b.w	80009d8 <__retarget_lock_acquire_recursive>
 800129a:	bf00      	nop
 800129c:	24000084 	.word	0x24000084

080012a0 <__malloc_unlock>:
 80012a0:	4801      	ldr	r0, [pc, #4]	; (80012a8 <__malloc_unlock+0x8>)
 80012a2:	f7ff bb9a 	b.w	80009da <__retarget_lock_release_recursive>
 80012a6:	bf00      	nop
 80012a8:	24000084 	.word	0x24000084

080012ac <_free_r>:
 80012ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80012ae:	2900      	cmp	r1, #0
 80012b0:	d044      	beq.n	800133c <_free_r+0x90>
 80012b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012b6:	9001      	str	r0, [sp, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f1a1 0404 	sub.w	r4, r1, #4
 80012be:	bfb8      	it	lt
 80012c0:	18e4      	addlt	r4, r4, r3
 80012c2:	f7ff ffe7 	bl	8001294 <__malloc_lock>
 80012c6:	4a1e      	ldr	r2, [pc, #120]	; (8001340 <_free_r+0x94>)
 80012c8:	9801      	ldr	r0, [sp, #4]
 80012ca:	6813      	ldr	r3, [r2, #0]
 80012cc:	b933      	cbnz	r3, 80012dc <_free_r+0x30>
 80012ce:	6063      	str	r3, [r4, #4]
 80012d0:	6014      	str	r4, [r2, #0]
 80012d2:	b003      	add	sp, #12
 80012d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80012d8:	f7ff bfe2 	b.w	80012a0 <__malloc_unlock>
 80012dc:	42a3      	cmp	r3, r4
 80012de:	d908      	bls.n	80012f2 <_free_r+0x46>
 80012e0:	6825      	ldr	r5, [r4, #0]
 80012e2:	1961      	adds	r1, r4, r5
 80012e4:	428b      	cmp	r3, r1
 80012e6:	bf01      	itttt	eq
 80012e8:	6819      	ldreq	r1, [r3, #0]
 80012ea:	685b      	ldreq	r3, [r3, #4]
 80012ec:	1949      	addeq	r1, r1, r5
 80012ee:	6021      	streq	r1, [r4, #0]
 80012f0:	e7ed      	b.n	80012ce <_free_r+0x22>
 80012f2:	461a      	mov	r2, r3
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	b10b      	cbz	r3, 80012fc <_free_r+0x50>
 80012f8:	42a3      	cmp	r3, r4
 80012fa:	d9fa      	bls.n	80012f2 <_free_r+0x46>
 80012fc:	6811      	ldr	r1, [r2, #0]
 80012fe:	1855      	adds	r5, r2, r1
 8001300:	42a5      	cmp	r5, r4
 8001302:	d10b      	bne.n	800131c <_free_r+0x70>
 8001304:	6824      	ldr	r4, [r4, #0]
 8001306:	4421      	add	r1, r4
 8001308:	1854      	adds	r4, r2, r1
 800130a:	42a3      	cmp	r3, r4
 800130c:	6011      	str	r1, [r2, #0]
 800130e:	d1e0      	bne.n	80012d2 <_free_r+0x26>
 8001310:	681c      	ldr	r4, [r3, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	6053      	str	r3, [r2, #4]
 8001316:	440c      	add	r4, r1
 8001318:	6014      	str	r4, [r2, #0]
 800131a:	e7da      	b.n	80012d2 <_free_r+0x26>
 800131c:	d902      	bls.n	8001324 <_free_r+0x78>
 800131e:	230c      	movs	r3, #12
 8001320:	6003      	str	r3, [r0, #0]
 8001322:	e7d6      	b.n	80012d2 <_free_r+0x26>
 8001324:	6825      	ldr	r5, [r4, #0]
 8001326:	1961      	adds	r1, r4, r5
 8001328:	428b      	cmp	r3, r1
 800132a:	bf04      	itt	eq
 800132c:	6819      	ldreq	r1, [r3, #0]
 800132e:	685b      	ldreq	r3, [r3, #4]
 8001330:	6063      	str	r3, [r4, #4]
 8001332:	bf04      	itt	eq
 8001334:	1949      	addeq	r1, r1, r5
 8001336:	6021      	streq	r1, [r4, #0]
 8001338:	6054      	str	r4, [r2, #4]
 800133a:	e7ca      	b.n	80012d2 <_free_r+0x26>
 800133c:	b003      	add	sp, #12
 800133e:	bd30      	pop	{r4, r5, pc}
 8001340:	24000088 	.word	0x24000088

08001344 <_printf_common>:
 8001344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001348:	4616      	mov	r6, r2
 800134a:	4699      	mov	r9, r3
 800134c:	688a      	ldr	r2, [r1, #8]
 800134e:	690b      	ldr	r3, [r1, #16]
 8001350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001354:	4293      	cmp	r3, r2
 8001356:	bfb8      	it	lt
 8001358:	4613      	movlt	r3, r2
 800135a:	6033      	str	r3, [r6, #0]
 800135c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001360:	4607      	mov	r7, r0
 8001362:	460c      	mov	r4, r1
 8001364:	b10a      	cbz	r2, 800136a <_printf_common+0x26>
 8001366:	3301      	adds	r3, #1
 8001368:	6033      	str	r3, [r6, #0]
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	0699      	lsls	r1, r3, #26
 800136e:	bf42      	ittt	mi
 8001370:	6833      	ldrmi	r3, [r6, #0]
 8001372:	3302      	addmi	r3, #2
 8001374:	6033      	strmi	r3, [r6, #0]
 8001376:	6825      	ldr	r5, [r4, #0]
 8001378:	f015 0506 	ands.w	r5, r5, #6
 800137c:	d106      	bne.n	800138c <_printf_common+0x48>
 800137e:	f104 0a19 	add.w	sl, r4, #25
 8001382:	68e3      	ldr	r3, [r4, #12]
 8001384:	6832      	ldr	r2, [r6, #0]
 8001386:	1a9b      	subs	r3, r3, r2
 8001388:	42ab      	cmp	r3, r5
 800138a:	dc26      	bgt.n	80013da <_printf_common+0x96>
 800138c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001390:	1e13      	subs	r3, r2, #0
 8001392:	6822      	ldr	r2, [r4, #0]
 8001394:	bf18      	it	ne
 8001396:	2301      	movne	r3, #1
 8001398:	0692      	lsls	r2, r2, #26
 800139a:	d42b      	bmi.n	80013f4 <_printf_common+0xb0>
 800139c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80013a0:	4649      	mov	r1, r9
 80013a2:	4638      	mov	r0, r7
 80013a4:	47c0      	blx	r8
 80013a6:	3001      	adds	r0, #1
 80013a8:	d01e      	beq.n	80013e8 <_printf_common+0xa4>
 80013aa:	6823      	ldr	r3, [r4, #0]
 80013ac:	6922      	ldr	r2, [r4, #16]
 80013ae:	f003 0306 	and.w	r3, r3, #6
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	bf02      	ittt	eq
 80013b6:	68e5      	ldreq	r5, [r4, #12]
 80013b8:	6833      	ldreq	r3, [r6, #0]
 80013ba:	1aed      	subeq	r5, r5, r3
 80013bc:	68a3      	ldr	r3, [r4, #8]
 80013be:	bf0c      	ite	eq
 80013c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80013c4:	2500      	movne	r5, #0
 80013c6:	4293      	cmp	r3, r2
 80013c8:	bfc4      	itt	gt
 80013ca:	1a9b      	subgt	r3, r3, r2
 80013cc:	18ed      	addgt	r5, r5, r3
 80013ce:	2600      	movs	r6, #0
 80013d0:	341a      	adds	r4, #26
 80013d2:	42b5      	cmp	r5, r6
 80013d4:	d11a      	bne.n	800140c <_printf_common+0xc8>
 80013d6:	2000      	movs	r0, #0
 80013d8:	e008      	b.n	80013ec <_printf_common+0xa8>
 80013da:	2301      	movs	r3, #1
 80013dc:	4652      	mov	r2, sl
 80013de:	4649      	mov	r1, r9
 80013e0:	4638      	mov	r0, r7
 80013e2:	47c0      	blx	r8
 80013e4:	3001      	adds	r0, #1
 80013e6:	d103      	bne.n	80013f0 <_printf_common+0xac>
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013f0:	3501      	adds	r5, #1
 80013f2:	e7c6      	b.n	8001382 <_printf_common+0x3e>
 80013f4:	18e1      	adds	r1, r4, r3
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	2030      	movs	r0, #48	; 0x30
 80013fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80013fe:	4422      	add	r2, r4
 8001400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001408:	3302      	adds	r3, #2
 800140a:	e7c7      	b.n	800139c <_printf_common+0x58>
 800140c:	2301      	movs	r3, #1
 800140e:	4622      	mov	r2, r4
 8001410:	4649      	mov	r1, r9
 8001412:	4638      	mov	r0, r7
 8001414:	47c0      	blx	r8
 8001416:	3001      	adds	r0, #1
 8001418:	d0e6      	beq.n	80013e8 <_printf_common+0xa4>
 800141a:	3601      	adds	r6, #1
 800141c:	e7d9      	b.n	80013d2 <_printf_common+0x8e>
	...

08001420 <_printf_i>:
 8001420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001424:	7e0f      	ldrb	r7, [r1, #24]
 8001426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001428:	2f78      	cmp	r7, #120	; 0x78
 800142a:	4691      	mov	r9, r2
 800142c:	4680      	mov	r8, r0
 800142e:	460c      	mov	r4, r1
 8001430:	469a      	mov	sl, r3
 8001432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001436:	d807      	bhi.n	8001448 <_printf_i+0x28>
 8001438:	2f62      	cmp	r7, #98	; 0x62
 800143a:	d80a      	bhi.n	8001452 <_printf_i+0x32>
 800143c:	2f00      	cmp	r7, #0
 800143e:	f000 80d4 	beq.w	80015ea <_printf_i+0x1ca>
 8001442:	2f58      	cmp	r7, #88	; 0x58
 8001444:	f000 80c0 	beq.w	80015c8 <_printf_i+0x1a8>
 8001448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800144c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001450:	e03a      	b.n	80014c8 <_printf_i+0xa8>
 8001452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001456:	2b15      	cmp	r3, #21
 8001458:	d8f6      	bhi.n	8001448 <_printf_i+0x28>
 800145a:	a101      	add	r1, pc, #4	; (adr r1, 8001460 <_printf_i+0x40>)
 800145c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001460:	080014b9 	.word	0x080014b9
 8001464:	080014cd 	.word	0x080014cd
 8001468:	08001449 	.word	0x08001449
 800146c:	08001449 	.word	0x08001449
 8001470:	08001449 	.word	0x08001449
 8001474:	08001449 	.word	0x08001449
 8001478:	080014cd 	.word	0x080014cd
 800147c:	08001449 	.word	0x08001449
 8001480:	08001449 	.word	0x08001449
 8001484:	08001449 	.word	0x08001449
 8001488:	08001449 	.word	0x08001449
 800148c:	080015d1 	.word	0x080015d1
 8001490:	080014f9 	.word	0x080014f9
 8001494:	0800158b 	.word	0x0800158b
 8001498:	08001449 	.word	0x08001449
 800149c:	08001449 	.word	0x08001449
 80014a0:	080015f3 	.word	0x080015f3
 80014a4:	08001449 	.word	0x08001449
 80014a8:	080014f9 	.word	0x080014f9
 80014ac:	08001449 	.word	0x08001449
 80014b0:	08001449 	.word	0x08001449
 80014b4:	08001593 	.word	0x08001593
 80014b8:	682b      	ldr	r3, [r5, #0]
 80014ba:	1d1a      	adds	r2, r3, #4
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	602a      	str	r2, [r5, #0]
 80014c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80014c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80014c8:	2301      	movs	r3, #1
 80014ca:	e09f      	b.n	800160c <_printf_i+0x1ec>
 80014cc:	6820      	ldr	r0, [r4, #0]
 80014ce:	682b      	ldr	r3, [r5, #0]
 80014d0:	0607      	lsls	r7, r0, #24
 80014d2:	f103 0104 	add.w	r1, r3, #4
 80014d6:	6029      	str	r1, [r5, #0]
 80014d8:	d501      	bpl.n	80014de <_printf_i+0xbe>
 80014da:	681e      	ldr	r6, [r3, #0]
 80014dc:	e003      	b.n	80014e6 <_printf_i+0xc6>
 80014de:	0646      	lsls	r6, r0, #25
 80014e0:	d5fb      	bpl.n	80014da <_printf_i+0xba>
 80014e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	da03      	bge.n	80014f2 <_printf_i+0xd2>
 80014ea:	232d      	movs	r3, #45	; 0x2d
 80014ec:	4276      	negs	r6, r6
 80014ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80014f2:	485a      	ldr	r0, [pc, #360]	; (800165c <_printf_i+0x23c>)
 80014f4:	230a      	movs	r3, #10
 80014f6:	e012      	b.n	800151e <_printf_i+0xfe>
 80014f8:	682b      	ldr	r3, [r5, #0]
 80014fa:	6820      	ldr	r0, [r4, #0]
 80014fc:	1d19      	adds	r1, r3, #4
 80014fe:	6029      	str	r1, [r5, #0]
 8001500:	0605      	lsls	r5, r0, #24
 8001502:	d501      	bpl.n	8001508 <_printf_i+0xe8>
 8001504:	681e      	ldr	r6, [r3, #0]
 8001506:	e002      	b.n	800150e <_printf_i+0xee>
 8001508:	0641      	lsls	r1, r0, #25
 800150a:	d5fb      	bpl.n	8001504 <_printf_i+0xe4>
 800150c:	881e      	ldrh	r6, [r3, #0]
 800150e:	4853      	ldr	r0, [pc, #332]	; (800165c <_printf_i+0x23c>)
 8001510:	2f6f      	cmp	r7, #111	; 0x6f
 8001512:	bf0c      	ite	eq
 8001514:	2308      	moveq	r3, #8
 8001516:	230a      	movne	r3, #10
 8001518:	2100      	movs	r1, #0
 800151a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800151e:	6865      	ldr	r5, [r4, #4]
 8001520:	60a5      	str	r5, [r4, #8]
 8001522:	2d00      	cmp	r5, #0
 8001524:	bfa2      	ittt	ge
 8001526:	6821      	ldrge	r1, [r4, #0]
 8001528:	f021 0104 	bicge.w	r1, r1, #4
 800152c:	6021      	strge	r1, [r4, #0]
 800152e:	b90e      	cbnz	r6, 8001534 <_printf_i+0x114>
 8001530:	2d00      	cmp	r5, #0
 8001532:	d04b      	beq.n	80015cc <_printf_i+0x1ac>
 8001534:	4615      	mov	r5, r2
 8001536:	fbb6 f1f3 	udiv	r1, r6, r3
 800153a:	fb03 6711 	mls	r7, r3, r1, r6
 800153e:	5dc7      	ldrb	r7, [r0, r7]
 8001540:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001544:	4637      	mov	r7, r6
 8001546:	42bb      	cmp	r3, r7
 8001548:	460e      	mov	r6, r1
 800154a:	d9f4      	bls.n	8001536 <_printf_i+0x116>
 800154c:	2b08      	cmp	r3, #8
 800154e:	d10b      	bne.n	8001568 <_printf_i+0x148>
 8001550:	6823      	ldr	r3, [r4, #0]
 8001552:	07de      	lsls	r6, r3, #31
 8001554:	d508      	bpl.n	8001568 <_printf_i+0x148>
 8001556:	6923      	ldr	r3, [r4, #16]
 8001558:	6861      	ldr	r1, [r4, #4]
 800155a:	4299      	cmp	r1, r3
 800155c:	bfde      	ittt	le
 800155e:	2330      	movle	r3, #48	; 0x30
 8001560:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001564:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001568:	1b52      	subs	r2, r2, r5
 800156a:	6122      	str	r2, [r4, #16]
 800156c:	f8cd a000 	str.w	sl, [sp]
 8001570:	464b      	mov	r3, r9
 8001572:	aa03      	add	r2, sp, #12
 8001574:	4621      	mov	r1, r4
 8001576:	4640      	mov	r0, r8
 8001578:	f7ff fee4 	bl	8001344 <_printf_common>
 800157c:	3001      	adds	r0, #1
 800157e:	d14a      	bne.n	8001616 <_printf_i+0x1f6>
 8001580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001584:	b004      	add	sp, #16
 8001586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800158a:	6823      	ldr	r3, [r4, #0]
 800158c:	f043 0320 	orr.w	r3, r3, #32
 8001590:	6023      	str	r3, [r4, #0]
 8001592:	4833      	ldr	r0, [pc, #204]	; (8001660 <_printf_i+0x240>)
 8001594:	2778      	movs	r7, #120	; 0x78
 8001596:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	6829      	ldr	r1, [r5, #0]
 800159e:	061f      	lsls	r7, r3, #24
 80015a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80015a4:	d402      	bmi.n	80015ac <_printf_i+0x18c>
 80015a6:	065f      	lsls	r7, r3, #25
 80015a8:	bf48      	it	mi
 80015aa:	b2b6      	uxthmi	r6, r6
 80015ac:	07df      	lsls	r7, r3, #31
 80015ae:	bf48      	it	mi
 80015b0:	f043 0320 	orrmi.w	r3, r3, #32
 80015b4:	6029      	str	r1, [r5, #0]
 80015b6:	bf48      	it	mi
 80015b8:	6023      	strmi	r3, [r4, #0]
 80015ba:	b91e      	cbnz	r6, 80015c4 <_printf_i+0x1a4>
 80015bc:	6823      	ldr	r3, [r4, #0]
 80015be:	f023 0320 	bic.w	r3, r3, #32
 80015c2:	6023      	str	r3, [r4, #0]
 80015c4:	2310      	movs	r3, #16
 80015c6:	e7a7      	b.n	8001518 <_printf_i+0xf8>
 80015c8:	4824      	ldr	r0, [pc, #144]	; (800165c <_printf_i+0x23c>)
 80015ca:	e7e4      	b.n	8001596 <_printf_i+0x176>
 80015cc:	4615      	mov	r5, r2
 80015ce:	e7bd      	b.n	800154c <_printf_i+0x12c>
 80015d0:	682b      	ldr	r3, [r5, #0]
 80015d2:	6826      	ldr	r6, [r4, #0]
 80015d4:	6961      	ldr	r1, [r4, #20]
 80015d6:	1d18      	adds	r0, r3, #4
 80015d8:	6028      	str	r0, [r5, #0]
 80015da:	0635      	lsls	r5, r6, #24
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	d501      	bpl.n	80015e4 <_printf_i+0x1c4>
 80015e0:	6019      	str	r1, [r3, #0]
 80015e2:	e002      	b.n	80015ea <_printf_i+0x1ca>
 80015e4:	0670      	lsls	r0, r6, #25
 80015e6:	d5fb      	bpl.n	80015e0 <_printf_i+0x1c0>
 80015e8:	8019      	strh	r1, [r3, #0]
 80015ea:	2300      	movs	r3, #0
 80015ec:	6123      	str	r3, [r4, #16]
 80015ee:	4615      	mov	r5, r2
 80015f0:	e7bc      	b.n	800156c <_printf_i+0x14c>
 80015f2:	682b      	ldr	r3, [r5, #0]
 80015f4:	1d1a      	adds	r2, r3, #4
 80015f6:	602a      	str	r2, [r5, #0]
 80015f8:	681d      	ldr	r5, [r3, #0]
 80015fa:	6862      	ldr	r2, [r4, #4]
 80015fc:	2100      	movs	r1, #0
 80015fe:	4628      	mov	r0, r5
 8001600:	f7fe fe4e 	bl	80002a0 <memchr>
 8001604:	b108      	cbz	r0, 800160a <_printf_i+0x1ea>
 8001606:	1b40      	subs	r0, r0, r5
 8001608:	6060      	str	r0, [r4, #4]
 800160a:	6863      	ldr	r3, [r4, #4]
 800160c:	6123      	str	r3, [r4, #16]
 800160e:	2300      	movs	r3, #0
 8001610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001614:	e7aa      	b.n	800156c <_printf_i+0x14c>
 8001616:	6923      	ldr	r3, [r4, #16]
 8001618:	462a      	mov	r2, r5
 800161a:	4649      	mov	r1, r9
 800161c:	4640      	mov	r0, r8
 800161e:	47d0      	blx	sl
 8001620:	3001      	adds	r0, #1
 8001622:	d0ad      	beq.n	8001580 <_printf_i+0x160>
 8001624:	6823      	ldr	r3, [r4, #0]
 8001626:	079b      	lsls	r3, r3, #30
 8001628:	d413      	bmi.n	8001652 <_printf_i+0x232>
 800162a:	68e0      	ldr	r0, [r4, #12]
 800162c:	9b03      	ldr	r3, [sp, #12]
 800162e:	4298      	cmp	r0, r3
 8001630:	bfb8      	it	lt
 8001632:	4618      	movlt	r0, r3
 8001634:	e7a6      	b.n	8001584 <_printf_i+0x164>
 8001636:	2301      	movs	r3, #1
 8001638:	4632      	mov	r2, r6
 800163a:	4649      	mov	r1, r9
 800163c:	4640      	mov	r0, r8
 800163e:	47d0      	blx	sl
 8001640:	3001      	adds	r0, #1
 8001642:	d09d      	beq.n	8001580 <_printf_i+0x160>
 8001644:	3501      	adds	r5, #1
 8001646:	68e3      	ldr	r3, [r4, #12]
 8001648:	9903      	ldr	r1, [sp, #12]
 800164a:	1a5b      	subs	r3, r3, r1
 800164c:	42ab      	cmp	r3, r5
 800164e:	dcf2      	bgt.n	8001636 <_printf_i+0x216>
 8001650:	e7eb      	b.n	800162a <_printf_i+0x20a>
 8001652:	2500      	movs	r5, #0
 8001654:	f104 0619 	add.w	r6, r4, #25
 8001658:	e7f5      	b.n	8001646 <_printf_i+0x226>
 800165a:	bf00      	nop
 800165c:	08001781 	.word	0x08001781
 8001660:	08001792 	.word	0x08001792

08001664 <_read_r>:
 8001664:	b538      	push	{r3, r4, r5, lr}
 8001666:	4d07      	ldr	r5, [pc, #28]	; (8001684 <_read_r+0x20>)
 8001668:	4604      	mov	r4, r0
 800166a:	4608      	mov	r0, r1
 800166c:	4611      	mov	r1, r2
 800166e:	2200      	movs	r2, #0
 8001670:	602a      	str	r2, [r5, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	f7fe fed2 	bl	800041c <_read>
 8001678:	1c43      	adds	r3, r0, #1
 800167a:	d102      	bne.n	8001682 <_read_r+0x1e>
 800167c:	682b      	ldr	r3, [r5, #0]
 800167e:	b103      	cbz	r3, 8001682 <_read_r+0x1e>
 8001680:	6023      	str	r3, [r4, #0]
 8001682:	bd38      	pop	{r3, r4, r5, pc}
 8001684:	24000090 	.word	0x24000090

08001688 <_fstat_r>:
 8001688:	b538      	push	{r3, r4, r5, lr}
 800168a:	4d07      	ldr	r5, [pc, #28]	; (80016a8 <_fstat_r+0x20>)
 800168c:	2300      	movs	r3, #0
 800168e:	4604      	mov	r4, r0
 8001690:	4608      	mov	r0, r1
 8001692:	4611      	mov	r1, r2
 8001694:	602b      	str	r3, [r5, #0]
 8001696:	f7fe ff06 	bl	80004a6 <_fstat>
 800169a:	1c43      	adds	r3, r0, #1
 800169c:	d102      	bne.n	80016a4 <_fstat_r+0x1c>
 800169e:	682b      	ldr	r3, [r5, #0]
 80016a0:	b103      	cbz	r3, 80016a4 <_fstat_r+0x1c>
 80016a2:	6023      	str	r3, [r4, #0]
 80016a4:	bd38      	pop	{r3, r4, r5, pc}
 80016a6:	bf00      	nop
 80016a8:	24000090 	.word	0x24000090

080016ac <_isatty_r>:
 80016ac:	b538      	push	{r3, r4, r5, lr}
 80016ae:	4d06      	ldr	r5, [pc, #24]	; (80016c8 <_isatty_r+0x1c>)
 80016b0:	2300      	movs	r3, #0
 80016b2:	4604      	mov	r4, r0
 80016b4:	4608      	mov	r0, r1
 80016b6:	602b      	str	r3, [r5, #0]
 80016b8:	f7fe ff05 	bl	80004c6 <_isatty>
 80016bc:	1c43      	adds	r3, r0, #1
 80016be:	d102      	bne.n	80016c6 <_isatty_r+0x1a>
 80016c0:	682b      	ldr	r3, [r5, #0]
 80016c2:	b103      	cbz	r3, 80016c6 <_isatty_r+0x1a>
 80016c4:	6023      	str	r3, [r4, #0]
 80016c6:	bd38      	pop	{r3, r4, r5, pc}
 80016c8:	24000090 	.word	0x24000090

080016cc <_init>:
 80016cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ce:	bf00      	nop
 80016d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016d2:	bc08      	pop	{r3}
 80016d4:	469e      	mov	lr, r3
 80016d6:	4770      	bx	lr

080016d8 <_fini>:
 80016d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016da:	bf00      	nop
 80016dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016de:	bc08      	pop	{r3}
 80016e0:	469e      	mov	lr, r3
 80016e2:	4770      	bx	lr
