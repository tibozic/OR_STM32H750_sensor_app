
11_temp_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001614  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080018b4  080018b4  000118b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001974  08001974  00011974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001978  08001978  00011978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  24000000  0800197c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000034  24000064  080019e0  00020064  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000098  080019e0  00020098  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  9 .debug_info   000101fb  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003a6b  00000000  00000000  0003028d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000630  00000000  00000000  00033cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000004b9  00000000  00000000  00034328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002a9c4  00000000  00000000  000347e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000609d  00000000  00000000  0005f1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000ef02c  00000000  00000000  00065242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      0000003c  00000000  00000000  0015426e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000d88  00000000  00000000  001542ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 000000b9  00000000  00000000  00155034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000018b1  00000000  00000000  001550ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__do_global_dtors_aux>:
 8000340:	b510      	push	{r4, lr}
 8000342:	4c05      	ldr	r4, [pc, #20]	; (8000358 <__do_global_dtors_aux+0x18>)
 8000344:	7823      	ldrb	r3, [r4, #0]
 8000346:	b933      	cbnz	r3, 8000356 <__do_global_dtors_aux+0x16>
 8000348:	4b04      	ldr	r3, [pc, #16]	; (800035c <__do_global_dtors_aux+0x1c>)
 800034a:	b113      	cbz	r3, 8000352 <__do_global_dtors_aux+0x12>
 800034c:	4804      	ldr	r0, [pc, #16]	; (8000360 <__do_global_dtors_aux+0x20>)
 800034e:	f3af 8000 	nop.w
 8000352:	2301      	movs	r3, #1
 8000354:	7023      	strb	r3, [r4, #0]
 8000356:	bd10      	pop	{r4, pc}
 8000358:	24000064 	.word	0x24000064
 800035c:	00000000 	.word	0x00000000
 8000360:	0800189c 	.word	0x0800189c

08000364 <frame_dummy>:
 8000364:	b508      	push	{r3, lr}
 8000366:	4b03      	ldr	r3, [pc, #12]	; (8000374 <frame_dummy+0x10>)
 8000368:	b11b      	cbz	r3, 8000372 <frame_dummy+0xe>
 800036a:	4903      	ldr	r1, [pc, #12]	; (8000378 <frame_dummy+0x14>)
 800036c:	4803      	ldr	r0, [pc, #12]	; (800037c <frame_dummy+0x18>)
 800036e:	f3af 8000 	nop.w
 8000372:	bd08      	pop	{r3, pc}
 8000374:	00000000 	.word	0x00000000
 8000378:	24000068 	.word	0x24000068
 800037c:	0800189c 	.word	0x0800189c

08000380 <pf8_adc_init>:

#define PIN8		(1u << 8)
#define TEMP_PIN	PIN8

void pf8_adc_init(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0

	/***** Setup *****/
	// Enable clock access to GPIOF
	RCC->AHB4ENR |= GPIOFEN;
 8000384:	4b40      	ldr	r3, [pc, #256]	; (8000488 <pf8_adc_init+0x108>)
 8000386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800038a:	4a3f      	ldr	r2, [pc, #252]	; (8000488 <pf8_adc_init+0x108>)
 800038c:	f043 0320 	orr.w	r3, r3, #32
 8000390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// Set PF8 to analog mode (11)
	GPIOF->MODER |= (1u << 16);
 8000394:	4b3d      	ldr	r3, [pc, #244]	; (800048c <pf8_adc_init+0x10c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a3c      	ldr	r2, [pc, #240]	; (800048c <pf8_adc_init+0x10c>)
 800039a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800039e:	6013      	str	r3, [r2, #0]
	GPIOF->MODER |= (1u << 17);
 80003a0:	4b3a      	ldr	r3, [pc, #232]	; (800048c <pf8_adc_init+0x10c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a39      	ldr	r2, [pc, #228]	; (800048c <pf8_adc_init+0x10c>)
 80003a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003aa:	6013      	str	r3, [r2, #0]

	// Enable clock access to ADC
	RCC->AHB4ENR |= ADC3EN;
 80003ac:	4b36      	ldr	r3, [pc, #216]	; (8000488 <pf8_adc_init+0x108>)
 80003ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003b2:	4a35      	ldr	r2, [pc, #212]	; (8000488 <pf8_adc_init+0x108>)
 80003b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// Configure the ADC independent clock
	ADC3_COMMON->CCR |=  (1u << 16);
 80003bc:	4b34      	ldr	r3, [pc, #208]	; (8000490 <pf8_adc_init+0x110>)
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	4a33      	ldr	r2, [pc, #204]	; (8000490 <pf8_adc_init+0x110>)
 80003c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003c6:	6093      	str	r3, [r2, #8]
	ADC3_COMMON->CCR &= ~(1u << 17);
 80003c8:	4b31      	ldr	r3, [pc, #196]	; (8000490 <pf8_adc_init+0x110>)
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	4a30      	ldr	r2, [pc, #192]	; (8000490 <pf8_adc_init+0x110>)
 80003ce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80003d2:	6093      	str	r3, [r2, #8]

	/***** Enabling the ADC *****/
	// Exit ADC deep-power-down mode (DEEPPWD=0)
	ADC3->CR &= ~(CR_DEEPPWD);
 80003d4:	4b2f      	ldr	r3, [pc, #188]	; (8000494 <pf8_adc_init+0x114>)
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	4a2e      	ldr	r2, [pc, #184]	; (8000494 <pf8_adc_init+0x114>)
 80003da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80003de:	6093      	str	r3, [r2, #8]

	// Enable the internal voltage regulator (ADVREGEN=1)
	ADC3->CR |= CR_ADVREGEN;
 80003e0:	4b2c      	ldr	r3, [pc, #176]	; (8000494 <pf8_adc_init+0x114>)
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	4a2b      	ldr	r2, [pc, #172]	; (8000494 <pf8_adc_init+0x114>)
 80003e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ea:	6093      	str	r3, [r2, #8]

	// Wait for the startup time of the regulator
	while( !(ADC3->ISR & ISR_LDORDY) ) {}
 80003ec:	bf00      	nop
 80003ee:	4b29      	ldr	r3, [pc, #164]	; (8000494 <pf8_adc_init+0x114>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d0f9      	beq.n	80003ee <pf8_adc_init+0x6e>
	// Calibrate the ADC
	// adc_calibrate();

	// Configure the ADC (ADC_CCR, ADC_DIFSEL_DIFSEL, ADC_CR_ADEN, ADC_CR_ADCAL)
	// Clear ADRDY flag
	ADC3->ISR |= ISR_ADRDY;
 80003fa:	4b26      	ldr	r3, [pc, #152]	; (8000494 <pf8_adc_init+0x114>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a25      	ldr	r2, [pc, #148]	; (8000494 <pf8_adc_init+0x114>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6013      	str	r3, [r2, #0]

	// Enable the ADC (ADEN=1)
	ADC3->CR |= CR_ADEN;
 8000406:	4b23      	ldr	r3, [pc, #140]	; (8000494 <pf8_adc_init+0x114>)
 8000408:	689b      	ldr	r3, [r3, #8]
 800040a:	4a22      	ldr	r2, [pc, #136]	; (8000494 <pf8_adc_init+0x114>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	6093      	str	r3, [r2, #8]

	// Wait for ADC to be ready for operation (ADRDY=1)
	while( !(ADC3->ISR & ISR_ADRDY) ) {}
 8000412:	bf00      	nop
 8000414:	4b1f      	ldr	r3, [pc, #124]	; (8000494 <pf8_adc_init+0x114>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f003 0301 	and.w	r3, r3, #1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d0f9      	beq.n	8000414 <pf8_adc_init+0x94>

	// Clear the ADRDY flag
	ADC3->ISR |= ISR_ADRDY;
 8000420:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <pf8_adc_init+0x114>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a1b      	ldr	r2, [pc, #108]	; (8000494 <pf8_adc_init+0x114>)
 8000426:	f043 0301 	orr.w	r3, r3, #1
 800042a:	6013      	str	r3, [r2, #0]

	// Preselect the channels and their corresponding channels (ADC3_INP3 + ADC3_INP7)
	ADC3->PCSEL |= PCSEL_CH3;
 800042c:	4b19      	ldr	r3, [pc, #100]	; (8000494 <pf8_adc_init+0x114>)
 800042e:	69db      	ldr	r3, [r3, #28]
 8000430:	4a18      	ldr	r2, [pc, #96]	; (8000494 <pf8_adc_init+0x114>)
 8000432:	f043 0308 	orr.w	r3, r3, #8
 8000436:	61d3      	str	r3, [r2, #28]
	ADC3->PCSEL |= PCSEL_CH7;
 8000438:	4b16      	ldr	r3, [pc, #88]	; (8000494 <pf8_adc_init+0x114>)
 800043a:	69db      	ldr	r3, [r3, #28]
 800043c:	4a15      	ldr	r2, [pc, #84]	; (8000494 <pf8_adc_init+0x114>)
 800043e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000442:	61d3      	str	r3, [r2, #28]

	// Configure the ADC (ADC_CFGR, ADC_SMPRy, ADC_TRy, ADC_SQRy, ADC_JDRy, ADC_OFRy and ADC_IER)
	// Select the channel
	ADC3->SQR1 = ADC_CH7;
 8000444:	4b13      	ldr	r3, [pc, #76]	; (8000494 <pf8_adc_init+0x114>)
 8000446:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800044a:	631a      	str	r2, [r3, #48]	; 0x30

	// Set the length (length 1 = 0000)
	ADC3->SQR1 &= ~(1u << 0);
 800044c:	4b11      	ldr	r3, [pc, #68]	; (8000494 <pf8_adc_init+0x114>)
 800044e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000450:	4a10      	ldr	r2, [pc, #64]	; (8000494 <pf8_adc_init+0x114>)
 8000452:	f023 0301 	bic.w	r3, r3, #1
 8000456:	6313      	str	r3, [r2, #48]	; 0x30
	ADC3->SQR1 &= ~(1u << 1);
 8000458:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <pf8_adc_init+0x114>)
 800045a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045c:	4a0d      	ldr	r2, [pc, #52]	; (8000494 <pf8_adc_init+0x114>)
 800045e:	f023 0302 	bic.w	r3, r3, #2
 8000462:	6313      	str	r3, [r2, #48]	; 0x30
	ADC3->SQR1 &= ~(1u << 2);
 8000464:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <pf8_adc_init+0x114>)
 8000466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000468:	4a0a      	ldr	r2, [pc, #40]	; (8000494 <pf8_adc_init+0x114>)
 800046a:	f023 0304 	bic.w	r3, r3, #4
 800046e:	6313      	str	r3, [r2, #48]	; 0x30
	ADC3->SQR1 &= ~(1u << 3);
 8000470:	4b08      	ldr	r3, [pc, #32]	; (8000494 <pf8_adc_init+0x114>)
 8000472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000474:	4a07      	ldr	r2, [pc, #28]	; (8000494 <pf8_adc_init+0x114>)
 8000476:	f023 0308 	bic.w	r3, r3, #8
 800047a:	6313      	str	r3, [r2, #48]	; 0x30
	// Set the Sampling time to 810 cycles
	//ADC3->SMPR1 |= SMPR1_SMP7;

	// Use 10-bit resolution
	//ADC3->CFGR |= CFGR_RES;
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	58024400 	.word	0x58024400
 800048c:	58021400 	.word	0x58021400
 8000490:	58026300 	.word	0x58026300
 8000494:	58026000 	.word	0x58026000

08000498 <start_continuous_conversion>:
	// Start the ADC conversion
	ADC3->CR |= CR_ADSTART;
}

void start_continuous_conversion(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
		// Configure ADC for Single conversion mode (CONT=0)
		ADC3->CFGR |= CFGR_CONT;
 800049c:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <start_continuous_conversion+0x28>)
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	4a07      	ldr	r2, [pc, #28]	; (80004c0 <start_continuous_conversion+0x28>)
 80004a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004a6:	60d3      	str	r3, [r2, #12]

		// Start the ADC conversion
		ADC3->CR |= CR_ADSTART;
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <start_continuous_conversion+0x28>)
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <start_continuous_conversion+0x28>)
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	6093      	str	r3, [r2, #8]
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	58026000 	.word	0x58026000

080004c4 <adc_read>:

uint32_t adc_read(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
	// wait for conversion to be complete
	// !(ADC3->ISR & ISR_EOS) ||
	while( !(ADC3->ISR & ISR_EOS) && !(ADC3->ISR & ISR_EOC) ) {}
 80004ca:	bf00      	nop
 80004cc:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <adc_read+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f003 0308 	and.w	r3, r3, #8
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d105      	bne.n	80004e4 <adc_read+0x20>
 80004d8:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <adc_read+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f003 0304 	and.w	r3, r3, #4
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d0f3      	beq.n	80004cc <adc_read+0x8>

	// Clear EOS flag
	ADC3->ISR |= ISR_EOS;
 80004e4:	4b07      	ldr	r3, [pc, #28]	; (8000504 <adc_read+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <adc_read+0x40>)
 80004ea:	f043 0308 	orr.w	r3, r3, #8
 80004ee:	6013      	str	r3, [r2, #0]

	// read converted result
	uint32_t data = (ADC3->DR);
 80004f0:	4b04      	ldr	r3, [pc, #16]	; (8000504 <adc_read+0x40>)
 80004f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004f4:	607b      	str	r3, [r7, #4]
	// VREF+ = 3.3 V x VREFINT_CAL / VREFINT_DATA
	// int32_t v_ref = 3.3 V * VREFINT_CAL / VREFINT_DATA;

	// (ReadData + 32768) * Vref/(gain * 65535)

	return data;
 80004f6:	687b      	ldr	r3, [r7, #4]
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	58026000 	.word	0x58026000

08000508 <main>:


uint32_t sensor_val;

int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
	// connect clock to PD and PJ
	RCC->AHB4ENR |= (GPIOEEN | GPIOJEN | GPIOIEN);
 800050e:	4b30      	ldr	r3, [pc, #192]	; (80005d0 <main+0xc8>)
 8000510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000514:	4a2e      	ldr	r2, [pc, #184]	; (80005d0 <main+0xc8>)
 8000516:	f443 7344 	orr.w	r3, r3, #784	; 0x310
 800051a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// set PE3 (external LED) to output mode (01)
	GPIOE->MODER |=  (1u << 6);
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <main+0xcc>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a2c      	ldr	r2, [pc, #176]	; (80005d4 <main+0xcc>)
 8000524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000528:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(1u << 7);
 800052a:	4b2a      	ldr	r3, [pc, #168]	; (80005d4 <main+0xcc>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a29      	ldr	r2, [pc, #164]	; (80005d4 <main+0xcc>)
 8000530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000534:	6013      	str	r3, [r2, #0]

	// set PJ2 (internal LED) to output mode (01)
	GPIOJ->MODER |=  (1u << 4);
 8000536:	4b28      	ldr	r3, [pc, #160]	; (80005d8 <main+0xd0>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a27      	ldr	r2, [pc, #156]	; (80005d8 <main+0xd0>)
 800053c:	f043 0310 	orr.w	r3, r3, #16
 8000540:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER &= ~(1u << 5);
 8000542:	4b25      	ldr	r3, [pc, #148]	; (80005d8 <main+0xd0>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a24      	ldr	r2, [pc, #144]	; (80005d8 <main+0xd0>)
 8000548:	f023 0320 	bic.w	r3, r3, #32
 800054c:	6013      	str	r3, [r2, #0]

	// set PI8 (water sensor) as input (00)
	GPIOI->MODER &= ~(1u << 16);
 800054e:	4b23      	ldr	r3, [pc, #140]	; (80005dc <main+0xd4>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a22      	ldr	r2, [pc, #136]	; (80005dc <main+0xd4>)
 8000554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000558:	6013      	str	r3, [r2, #0]
	GPIOI->MODER &= ~(1u << 17);
 800055a:	4b20      	ldr	r3, [pc, #128]	; (80005dc <main+0xd4>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a1f      	ldr	r2, [pc, #124]	; (80005dc <main+0xd4>)
 8000560:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000564:	6013      	str	r3, [r2, #0]


	uart3_tx_init();
 8000566:	f000 f923 	bl	80007b0 <uart3_tx_init>
	systick_init();
 800056a:	f000 f8e3 	bl	8000734 <systick_init>
	pf8_adc_init();
 800056e:	f7ff ff07 	bl	8000380 <pf8_adc_init>

	// Start temperature conversion
	start_continuous_conversion();
 8000572:	f7ff ff91 	bl	8000498 <start_continuous_conversion>

	while(1)
	{
		// start_single_conversion();
		sensor_val = adc_read();
 8000576:	f7ff ffa5 	bl	80004c4 <adc_read>
 800057a:	4603      	mov	r3, r0
 800057c:	4a18      	ldr	r2, [pc, #96]	; (80005e0 <main+0xd8>)
 800057e:	6013      	str	r3, [r2, #0]
		printf("Temperature: 0x%X (%d), ", (int) sensor_val, (int) sensor_val);
 8000580:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <main+0xd8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4619      	mov	r1, r3
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <main+0xd8>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	461a      	mov	r2, r3
 800058c:	4815      	ldr	r0, [pc, #84]	; (80005e4 <main+0xdc>)
 800058e:	f000 f9fd 	bl	800098c <iprintf>


		// Check if water sensor has detected anything
		int water = (GPIOI->IDR & WATER_PIN) > 0;
 8000592:	4b12      	ldr	r3, [pc, #72]	; (80005dc <main+0xd4>)
 8000594:	691b      	ldr	r3, [r3, #16]
 8000596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800059a:	2b00      	cmp	r3, #0
 800059c:	bf14      	ite	ne
 800059e:	2301      	movne	r3, #1
 80005a0:	2300      	moveq	r3, #0
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	607b      	str	r3, [r7, #4]
		printf("Water: %d\n\r", water);
 80005a6:	6879      	ldr	r1, [r7, #4]
 80005a8:	480f      	ldr	r0, [pc, #60]	; (80005e8 <main+0xe0>)
 80005aa:	f000 f9ef 	bl	800098c <iprintf>
		if( water )
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d003      	beq.n	80005bc <main+0xb4>
		{
			// enable external LED (on pin 0)
			GPIOE->BSRR = (1u << 3);
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <main+0xcc>)
 80005b6:	2208      	movs	r2, #8
 80005b8:	619a      	str	r2, [r3, #24]
 80005ba:	e003      	b.n	80005c4 <main+0xbc>
		}
		else
		{
			// disable external LED
			GPIOE->BSRR = (1u << 19);
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <main+0xcc>)
 80005be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80005c2:	619a      	str	r2, [r3, #24]
		}

		systick_delay_ms(1000);
 80005c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c8:	f000 f8c8 	bl	800075c <systick_delay_ms>
	{
 80005cc:	e7d3      	b.n	8000576 <main+0x6e>
 80005ce:	bf00      	nop
 80005d0:	58024400 	.word	0x58024400
 80005d4:	58021000 	.word	0x58021000
 80005d8:	58022400 	.word	0x58022400
 80005dc:	58022000 	.word	0x58022000
 80005e0:	24000080 	.word	0x24000080
 80005e4:	080018b4 	.word	0x080018b4
 80005e8:	080018d0 	.word	0x080018d0

080005ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	e00a      	b.n	8000614 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005fe:	f3af 8000 	nop.w
 8000602:	4601      	mov	r1, r0
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	1c5a      	adds	r2, r3, #1
 8000608:	60ba      	str	r2, [r7, #8]
 800060a:	b2ca      	uxtb	r2, r1
 800060c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	3301      	adds	r3, #1
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	429a      	cmp	r2, r3
 800061a:	dbf0      	blt.n	80005fe <_read+0x12>
	}

return len;
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	4618      	mov	r0, r3
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b086      	sub	sp, #24
 800062a:	af00      	add	r7, sp, #0
 800062c:	60f8      	str	r0, [r7, #12]
 800062e:	60b9      	str	r1, [r7, #8]
 8000630:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
 8000636:	e009      	b.n	800064c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	1c5a      	adds	r2, r3, #1
 800063c:	60ba      	str	r2, [r7, #8]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f000 f8a9 	bl	8000798 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	3301      	adds	r3, #1
 800064a:	617b      	str	r3, [r7, #20]
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	429a      	cmp	r2, r3
 8000652:	dbf1      	blt.n	8000638 <_write+0x12>
	}
	return len;
 8000654:	687b      	ldr	r3, [r7, #4]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <_close>:

int _close(int file)
{
 800065e:	b480      	push	{r7}
 8000660:	b083      	sub	sp, #12
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
	return -1;
 8000666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800066a:	4618      	mov	r0, r3
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000676:	b480      	push	{r7}
 8000678:	b083      	sub	sp, #12
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
 800067e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000686:	605a      	str	r2, [r3, #4]
	return 0;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <_isatty>:

int _isatty(int file)
{
 8000696:	b480      	push	{r7}
 8000698:	b083      	sub	sp, #12
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
	return 1;
 800069e:	2301      	movs	r3, #1
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
	return 0;
 80006b8:	2300      	movs	r3, #0
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
	...

080006c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006d0:	4a14      	ldr	r2, [pc, #80]	; (8000724 <_sbrk+0x5c>)
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <_sbrk+0x60>)
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <_sbrk+0x64>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d102      	bne.n	80006ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <_sbrk+0x64>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	; (8000730 <_sbrk+0x68>)
 80006e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <_sbrk+0x64>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	693a      	ldr	r2, [r7, #16]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d207      	bcs.n	8000708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006f8:	f000 f916 	bl	8000928 <__errno>
 80006fc:	4603      	mov	r3, r0
 80006fe:	220c      	movs	r2, #12
 8000700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000706:	e009      	b.n	800071c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000708:	4b08      	ldr	r3, [pc, #32]	; (800072c <_sbrk+0x64>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800070e:	4b07      	ldr	r3, [pc, #28]	; (800072c <_sbrk+0x64>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	4a05      	ldr	r2, [pc, #20]	; (800072c <_sbrk+0x64>)
 8000718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800071a:	68fb      	ldr	r3, [r7, #12]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	24080000 	.word	0x24080000
 8000728:	00000400 	.word	0x00000400
 800072c:	24000084 	.word	0x24000084
 8000730:	24000098 	.word	0x24000098

08000734 <systick_init>:
#define CTRL_ENABLE			(1u << 0)
#define CTRL_CLKSRC			(1u << 2)
#define CTRL_COUNTFLG		(1u << 16)

void systick_init(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
	// Reload with number of clocks per ms
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <systick_init+0x24>)
 800073a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800073e:	605a      	str	r2, [r3, #4]

	// clear systick current value register
	SysTick->VAL = 0;
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <systick_init+0x24>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]

	// enable systick and select internal clock source
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 8000746:	4b04      	ldr	r3, [pc, #16]	; (8000758 <systick_init+0x24>)
 8000748:	2205      	movs	r2, #5
 800074a:	601a      	str	r2, [r3, #0]
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000e010 	.word	0xe000e010

0800075c <systick_delay_ms>:
{
	SysTick->CTRL = 0;
}

void systick_delay_ms(int delay)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < delay; ++i)
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	e009      	b.n	800077e <systick_delay_ms+0x22>
	{
		// wait until count flag is set
		while(!(SysTick->CTRL & CTRL_COUNTFLG)) {}
 800076a:	bf00      	nop
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <systick_delay_ms+0x38>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000774:	2b00      	cmp	r3, #0
 8000776:	d0f9      	beq.n	800076c <systick_delay_ms+0x10>
	for(int i = 0; i < delay; ++i)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3301      	adds	r3, #1
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fa      	ldr	r2, [r7, #12]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	429a      	cmp	r2, r3
 8000784:	dbf1      	blt.n	800076a <systick_delay_ms+0xe>
	}
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000e010 	.word	0xe000e010

08000798 <__io_putchar>:
static int32_t compute_uart_baudrate(uint32_t periph_clock, uint32_t baudrate);
void uart3_write(int ch);
int  uart3_read(void);

int __io_putchar(int ch)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	uart3_write(ch);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f000 f87f 	bl	80008a4 <uart3_write>
	return ch;
 80007a6:	687b      	ldr	r3, [r7, #4]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <uart3_tx_init>:

void uart3_tx_init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	/* configure uart gpio pin */
	// enable clock access to gpiob
	RCC->AHB4ENR |= GPIOBEN;
 80007b4:	4b26      	ldr	r3, [pc, #152]	; (8000850 <uart3_tx_init+0xa0>)
 80007b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ba:	4a25      	ldr	r2, [pc, #148]	; (8000850 <uart3_tx_init+0xa0>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// set PB10 to alternate function mode
	GPIOB->MODER &= ~(1u << 20);
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <uart3_tx_init+0xa4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a22      	ldr	r2, [pc, #136]	; (8000854 <uart3_tx_init+0xa4>)
 80007ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80007ce:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1u << 21);
 80007d0:	4b20      	ldr	r3, [pc, #128]	; (8000854 <uart3_tx_init+0xa4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a1f      	ldr	r2, [pc, #124]	; (8000854 <uart3_tx_init+0xa4>)
 80007d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007da:	6013      	str	r3, [r2, #0]

	// set PB10 to alternate function type to UART_TX (AF7)
	GPIOB->AFR[1] |= (1u << 8);
 80007dc:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <uart3_tx_init+0xa4>)
 80007de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e0:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <uart3_tx_init+0xa4>)
 80007e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007e6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1u << 9);
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <uart3_tx_init+0xa4>)
 80007ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ec:	4a19      	ldr	r2, [pc, #100]	; (8000854 <uart3_tx_init+0xa4>)
 80007ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007f2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1u << 10);
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <uart3_tx_init+0xa4>)
 80007f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f8:	4a16      	ldr	r2, [pc, #88]	; (8000854 <uart3_tx_init+0xa4>)
 80007fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007fe:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1u << 11);
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <uart3_tx_init+0xa4>)
 8000802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000804:	4a13      	ldr	r2, [pc, #76]	; (8000854 <uart3_tx_init+0xa4>)
 8000806:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800080a:	6253      	str	r3, [r2, #36]	; 0x24


	/* Configure the UART module */
	// enable clock access to uart3
	RCC->APB1LENR |= UART3EN;
 800080c:	4b10      	ldr	r3, [pc, #64]	; (8000850 <uart3_tx_init+0xa0>)
 800080e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000812:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <uart3_tx_init+0xa0>)
 8000814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000818:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

	// when configuring usart it should be disabled
	USART3->CR1 &= ~(CR1_UE);
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <uart3_tx_init+0xa8>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <uart3_tx_init+0xa8>)
 8000822:	f023 0301 	bic.w	r3, r3, #1
 8000826:	6013      	str	r3, [r2, #0]

	// configure baudrate
	uart_set_baudrate(USART3, APB1_CLK, UART_BAUDRATE);
 8000828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800082c:	490b      	ldr	r1, [pc, #44]	; (800085c <uart3_tx_init+0xac>)
 800082e:	480a      	ldr	r0, [pc, #40]	; (8000858 <uart3_tx_init+0xa8>)
 8000830:	f000 f816 	bl	8000860 <uart_set_baudrate>

	// configure transfer direction
	USART3->CR1 |= CR1_TE;
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <uart3_tx_init+0xa8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a07      	ldr	r2, [pc, #28]	; (8000858 <uart3_tx_init+0xa8>)
 800083a:	f043 0308 	orr.w	r3, r3, #8
 800083e:	6013      	str	r3, [r2, #0]

	// enable uart module
	USART3->CR1 |= CR1_UE;
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <uart3_tx_init+0xa8>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <uart3_tx_init+0xa8>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	6013      	str	r3, [r2, #0]
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	58024400 	.word	0x58024400
 8000854:	58020400 	.word	0x58020400
 8000858:	40004800 	.word	0x40004800
 800085c:	03d09000 	.word	0x03d09000

08000860 <uart_set_baudrate>:
	// enable uart module
	USART3->CR1 |= CR1_UE;
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periph_clock, uint32_t baudrate)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_baudrate(periph_clock, baudrate);
 800086c:	6879      	ldr	r1, [r7, #4]
 800086e:	68b8      	ldr	r0, [r7, #8]
 8000870:	f000 f808 	bl	8000884 <compute_uart_baudrate>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	60da      	str	r2, [r3, #12]
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <compute_uart_baudrate>:

static int32_t compute_uart_baudrate(uint32_t periph_clock, uint32_t baudrate)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
	return (periph_clock/baudrate);
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000896:	4618      	mov	r0, r3
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
	...

080008a4 <uart3_write>:

void uart3_write(int ch)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	// make sure transmit data register is empty
	while( !(USART3->ISR & SR_TXE) ) {}
 80008ac:	bf00      	nop
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <uart3_write+0x2c>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d0f9      	beq.n	80008ae <uart3_write+0xa>

	// write to transmit data register
	USART3->TDR = (ch & 0xFF);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <uart3_write+0x2c>)
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40004800 	.word	0x40004800

080008d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008dc:	480c      	ldr	r0, [pc, #48]	; (8000910 <LoopForever+0x6>)
  ldr r1, =_edata
 80008de:	490d      	ldr	r1, [pc, #52]	; (8000914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <LoopForever+0xe>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a0a      	ldr	r2, [pc, #40]	; (800091c <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f4:	4c0a      	ldr	r4, [pc, #40]	; (8000920 <LoopForever+0x16>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000902:	f000 f817 	bl	8000934 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000906:	f7ff fdff 	bl	8000508 <main>

0800090a <LoopForever>:

LoopForever:
    b LoopForever
 800090a:	e7fe      	b.n	800090a <LoopForever>
  ldr   r0, =_estack
 800090c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000910:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000914:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8000918:	0800197c 	.word	0x0800197c
  ldr r2, =_sbss
 800091c:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8000920:	24000098 	.word	0x24000098

08000924 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000924:	e7fe      	b.n	8000924 <ADC1_2_IRQHandler>
	...

08000928 <__errno>:
 8000928:	4b01      	ldr	r3, [pc, #4]	; (8000930 <__errno+0x8>)
 800092a:	6818      	ldr	r0, [r3, #0]
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	24000000 	.word	0x24000000

08000934 <__libc_init_array>:
 8000934:	b570      	push	{r4, r5, r6, lr}
 8000936:	4d0d      	ldr	r5, [pc, #52]	; (800096c <__libc_init_array+0x38>)
 8000938:	4c0d      	ldr	r4, [pc, #52]	; (8000970 <__libc_init_array+0x3c>)
 800093a:	1b64      	subs	r4, r4, r5
 800093c:	10a4      	asrs	r4, r4, #2
 800093e:	2600      	movs	r6, #0
 8000940:	42a6      	cmp	r6, r4
 8000942:	d109      	bne.n	8000958 <__libc_init_array+0x24>
 8000944:	4d0b      	ldr	r5, [pc, #44]	; (8000974 <__libc_init_array+0x40>)
 8000946:	4c0c      	ldr	r4, [pc, #48]	; (8000978 <__libc_init_array+0x44>)
 8000948:	f000 ffa8 	bl	800189c <_init>
 800094c:	1b64      	subs	r4, r4, r5
 800094e:	10a4      	asrs	r4, r4, #2
 8000950:	2600      	movs	r6, #0
 8000952:	42a6      	cmp	r6, r4
 8000954:	d105      	bne.n	8000962 <__libc_init_array+0x2e>
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f855 3b04 	ldr.w	r3, [r5], #4
 800095c:	4798      	blx	r3
 800095e:	3601      	adds	r6, #1
 8000960:	e7ee      	b.n	8000940 <__libc_init_array+0xc>
 8000962:	f855 3b04 	ldr.w	r3, [r5], #4
 8000966:	4798      	blx	r3
 8000968:	3601      	adds	r6, #1
 800096a:	e7f2      	b.n	8000952 <__libc_init_array+0x1e>
 800096c:	08001974 	.word	0x08001974
 8000970:	08001974 	.word	0x08001974
 8000974:	08001974 	.word	0x08001974
 8000978:	08001978 	.word	0x08001978

0800097c <memset>:
 800097c:	4402      	add	r2, r0
 800097e:	4603      	mov	r3, r0
 8000980:	4293      	cmp	r3, r2
 8000982:	d100      	bne.n	8000986 <memset+0xa>
 8000984:	4770      	bx	lr
 8000986:	f803 1b01 	strb.w	r1, [r3], #1
 800098a:	e7f9      	b.n	8000980 <memset+0x4>

0800098c <iprintf>:
 800098c:	b40f      	push	{r0, r1, r2, r3}
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <iprintf+0x2c>)
 8000990:	b513      	push	{r0, r1, r4, lr}
 8000992:	681c      	ldr	r4, [r3, #0]
 8000994:	b124      	cbz	r4, 80009a0 <iprintf+0x14>
 8000996:	69a3      	ldr	r3, [r4, #24]
 8000998:	b913      	cbnz	r3, 80009a0 <iprintf+0x14>
 800099a:	4620      	mov	r0, r4
 800099c:	f000 f866 	bl	8000a6c <__sinit>
 80009a0:	ab05      	add	r3, sp, #20
 80009a2:	9a04      	ldr	r2, [sp, #16]
 80009a4:	68a1      	ldr	r1, [r4, #8]
 80009a6:	9301      	str	r3, [sp, #4]
 80009a8:	4620      	mov	r0, r4
 80009aa:	f000 f9bd 	bl	8000d28 <_vfiprintf_r>
 80009ae:	b002      	add	sp, #8
 80009b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009b4:	b004      	add	sp, #16
 80009b6:	4770      	bx	lr
 80009b8:	24000000 	.word	0x24000000

080009bc <std>:
 80009bc:	2300      	movs	r3, #0
 80009be:	b510      	push	{r4, lr}
 80009c0:	4604      	mov	r4, r0
 80009c2:	e9c0 3300 	strd	r3, r3, [r0]
 80009c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80009ca:	6083      	str	r3, [r0, #8]
 80009cc:	8181      	strh	r1, [r0, #12]
 80009ce:	6643      	str	r3, [r0, #100]	; 0x64
 80009d0:	81c2      	strh	r2, [r0, #14]
 80009d2:	6183      	str	r3, [r0, #24]
 80009d4:	4619      	mov	r1, r3
 80009d6:	2208      	movs	r2, #8
 80009d8:	305c      	adds	r0, #92	; 0x5c
 80009da:	f7ff ffcf 	bl	800097c <memset>
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <std+0x38>)
 80009e0:	6263      	str	r3, [r4, #36]	; 0x24
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <std+0x3c>)
 80009e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <std+0x40>)
 80009e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <std+0x44>)
 80009ec:	6224      	str	r4, [r4, #32]
 80009ee:	6323      	str	r3, [r4, #48]	; 0x30
 80009f0:	bd10      	pop	{r4, pc}
 80009f2:	bf00      	nop
 80009f4:	08000fa5 	.word	0x08000fa5
 80009f8:	08000fc7 	.word	0x08000fc7
 80009fc:	08000fff 	.word	0x08000fff
 8000a00:	08001023 	.word	0x08001023

08000a04 <_cleanup_r>:
 8000a04:	4901      	ldr	r1, [pc, #4]	; (8000a0c <_cleanup_r+0x8>)
 8000a06:	f000 b8af 	b.w	8000b68 <_fwalk_reent>
 8000a0a:	bf00      	nop
 8000a0c:	080012fd 	.word	0x080012fd

08000a10 <__sfmoreglue>:
 8000a10:	b570      	push	{r4, r5, r6, lr}
 8000a12:	2368      	movs	r3, #104	; 0x68
 8000a14:	1e4d      	subs	r5, r1, #1
 8000a16:	435d      	muls	r5, r3
 8000a18:	460e      	mov	r6, r1
 8000a1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000a1e:	f000 f8e5 	bl	8000bec <_malloc_r>
 8000a22:	4604      	mov	r4, r0
 8000a24:	b140      	cbz	r0, 8000a38 <__sfmoreglue+0x28>
 8000a26:	2100      	movs	r1, #0
 8000a28:	e9c0 1600 	strd	r1, r6, [r0]
 8000a2c:	300c      	adds	r0, #12
 8000a2e:	60a0      	str	r0, [r4, #8]
 8000a30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000a34:	f7ff ffa2 	bl	800097c <memset>
 8000a38:	4620      	mov	r0, r4
 8000a3a:	bd70      	pop	{r4, r5, r6, pc}

08000a3c <__sfp_lock_acquire>:
 8000a3c:	4801      	ldr	r0, [pc, #4]	; (8000a44 <__sfp_lock_acquire+0x8>)
 8000a3e:	f000 b8b3 	b.w	8000ba8 <__retarget_lock_acquire_recursive>
 8000a42:	bf00      	nop
 8000a44:	24000089 	.word	0x24000089

08000a48 <__sfp_lock_release>:
 8000a48:	4801      	ldr	r0, [pc, #4]	; (8000a50 <__sfp_lock_release+0x8>)
 8000a4a:	f000 b8ae 	b.w	8000baa <__retarget_lock_release_recursive>
 8000a4e:	bf00      	nop
 8000a50:	24000089 	.word	0x24000089

08000a54 <__sinit_lock_acquire>:
 8000a54:	4801      	ldr	r0, [pc, #4]	; (8000a5c <__sinit_lock_acquire+0x8>)
 8000a56:	f000 b8a7 	b.w	8000ba8 <__retarget_lock_acquire_recursive>
 8000a5a:	bf00      	nop
 8000a5c:	2400008a 	.word	0x2400008a

08000a60 <__sinit_lock_release>:
 8000a60:	4801      	ldr	r0, [pc, #4]	; (8000a68 <__sinit_lock_release+0x8>)
 8000a62:	f000 b8a2 	b.w	8000baa <__retarget_lock_release_recursive>
 8000a66:	bf00      	nop
 8000a68:	2400008a 	.word	0x2400008a

08000a6c <__sinit>:
 8000a6c:	b510      	push	{r4, lr}
 8000a6e:	4604      	mov	r4, r0
 8000a70:	f7ff fff0 	bl	8000a54 <__sinit_lock_acquire>
 8000a74:	69a3      	ldr	r3, [r4, #24]
 8000a76:	b11b      	cbz	r3, 8000a80 <__sinit+0x14>
 8000a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a7c:	f7ff bff0 	b.w	8000a60 <__sinit_lock_release>
 8000a80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000a84:	6523      	str	r3, [r4, #80]	; 0x50
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <__sinit+0x68>)
 8000a88:	4a13      	ldr	r2, [pc, #76]	; (8000ad8 <__sinit+0x6c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8000a8e:	42a3      	cmp	r3, r4
 8000a90:	bf04      	itt	eq
 8000a92:	2301      	moveq	r3, #1
 8000a94:	61a3      	streq	r3, [r4, #24]
 8000a96:	4620      	mov	r0, r4
 8000a98:	f000 f820 	bl	8000adc <__sfp>
 8000a9c:	6060      	str	r0, [r4, #4]
 8000a9e:	4620      	mov	r0, r4
 8000aa0:	f000 f81c 	bl	8000adc <__sfp>
 8000aa4:	60a0      	str	r0, [r4, #8]
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	f000 f818 	bl	8000adc <__sfp>
 8000aac:	2200      	movs	r2, #0
 8000aae:	60e0      	str	r0, [r4, #12]
 8000ab0:	2104      	movs	r1, #4
 8000ab2:	6860      	ldr	r0, [r4, #4]
 8000ab4:	f7ff ff82 	bl	80009bc <std>
 8000ab8:	68a0      	ldr	r0, [r4, #8]
 8000aba:	2201      	movs	r2, #1
 8000abc:	2109      	movs	r1, #9
 8000abe:	f7ff ff7d 	bl	80009bc <std>
 8000ac2:	68e0      	ldr	r0, [r4, #12]
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	2112      	movs	r1, #18
 8000ac8:	f7ff ff78 	bl	80009bc <std>
 8000acc:	2301      	movs	r3, #1
 8000ace:	61a3      	str	r3, [r4, #24]
 8000ad0:	e7d2      	b.n	8000a78 <__sinit+0xc>
 8000ad2:	bf00      	nop
 8000ad4:	080018dc 	.word	0x080018dc
 8000ad8:	08000a05 	.word	0x08000a05

08000adc <__sfp>:
 8000adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ade:	4607      	mov	r7, r0
 8000ae0:	f7ff ffac 	bl	8000a3c <__sfp_lock_acquire>
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <__sfp+0x84>)
 8000ae6:	681e      	ldr	r6, [r3, #0]
 8000ae8:	69b3      	ldr	r3, [r6, #24]
 8000aea:	b913      	cbnz	r3, 8000af2 <__sfp+0x16>
 8000aec:	4630      	mov	r0, r6
 8000aee:	f7ff ffbd 	bl	8000a6c <__sinit>
 8000af2:	3648      	adds	r6, #72	; 0x48
 8000af4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	d503      	bpl.n	8000b04 <__sfp+0x28>
 8000afc:	6833      	ldr	r3, [r6, #0]
 8000afe:	b30b      	cbz	r3, 8000b44 <__sfp+0x68>
 8000b00:	6836      	ldr	r6, [r6, #0]
 8000b02:	e7f7      	b.n	8000af4 <__sfp+0x18>
 8000b04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000b08:	b9d5      	cbnz	r5, 8000b40 <__sfp+0x64>
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <__sfp+0x88>)
 8000b0c:	60e3      	str	r3, [r4, #12]
 8000b0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b12:	6665      	str	r5, [r4, #100]	; 0x64
 8000b14:	f000 f847 	bl	8000ba6 <__retarget_lock_init_recursive>
 8000b18:	f7ff ff96 	bl	8000a48 <__sfp_lock_release>
 8000b1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000b20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000b24:	6025      	str	r5, [r4, #0]
 8000b26:	61a5      	str	r5, [r4, #24]
 8000b28:	2208      	movs	r2, #8
 8000b2a:	4629      	mov	r1, r5
 8000b2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000b30:	f7ff ff24 	bl	800097c <memset>
 8000b34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000b38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b40:	3468      	adds	r4, #104	; 0x68
 8000b42:	e7d9      	b.n	8000af8 <__sfp+0x1c>
 8000b44:	2104      	movs	r1, #4
 8000b46:	4638      	mov	r0, r7
 8000b48:	f7ff ff62 	bl	8000a10 <__sfmoreglue>
 8000b4c:	4604      	mov	r4, r0
 8000b4e:	6030      	str	r0, [r6, #0]
 8000b50:	2800      	cmp	r0, #0
 8000b52:	d1d5      	bne.n	8000b00 <__sfp+0x24>
 8000b54:	f7ff ff78 	bl	8000a48 <__sfp_lock_release>
 8000b58:	230c      	movs	r3, #12
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	e7ee      	b.n	8000b3c <__sfp+0x60>
 8000b5e:	bf00      	nop
 8000b60:	080018dc 	.word	0x080018dc
 8000b64:	ffff0001 	.word	0xffff0001

08000b68 <_fwalk_reent>:
 8000b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b6c:	4606      	mov	r6, r0
 8000b6e:	4688      	mov	r8, r1
 8000b70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000b74:	2700      	movs	r7, #0
 8000b76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b7a:	f1b9 0901 	subs.w	r9, r9, #1
 8000b7e:	d505      	bpl.n	8000b8c <_fwalk_reent+0x24>
 8000b80:	6824      	ldr	r4, [r4, #0]
 8000b82:	2c00      	cmp	r4, #0
 8000b84:	d1f7      	bne.n	8000b76 <_fwalk_reent+0xe>
 8000b86:	4638      	mov	r0, r7
 8000b88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b8c:	89ab      	ldrh	r3, [r5, #12]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d907      	bls.n	8000ba2 <_fwalk_reent+0x3a>
 8000b92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b96:	3301      	adds	r3, #1
 8000b98:	d003      	beq.n	8000ba2 <_fwalk_reent+0x3a>
 8000b9a:	4629      	mov	r1, r5
 8000b9c:	4630      	mov	r0, r6
 8000b9e:	47c0      	blx	r8
 8000ba0:	4307      	orrs	r7, r0
 8000ba2:	3568      	adds	r5, #104	; 0x68
 8000ba4:	e7e9      	b.n	8000b7a <_fwalk_reent+0x12>

08000ba6 <__retarget_lock_init_recursive>:
 8000ba6:	4770      	bx	lr

08000ba8 <__retarget_lock_acquire_recursive>:
 8000ba8:	4770      	bx	lr

08000baa <__retarget_lock_release_recursive>:
 8000baa:	4770      	bx	lr

08000bac <sbrk_aligned>:
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	4e0e      	ldr	r6, [pc, #56]	; (8000be8 <sbrk_aligned+0x3c>)
 8000bb0:	460c      	mov	r4, r1
 8000bb2:	6831      	ldr	r1, [r6, #0]
 8000bb4:	4605      	mov	r5, r0
 8000bb6:	b911      	cbnz	r1, 8000bbe <sbrk_aligned+0x12>
 8000bb8:	f000 f9e4 	bl	8000f84 <_sbrk_r>
 8000bbc:	6030      	str	r0, [r6, #0]
 8000bbe:	4621      	mov	r1, r4
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	f000 f9df 	bl	8000f84 <_sbrk_r>
 8000bc6:	1c43      	adds	r3, r0, #1
 8000bc8:	d00a      	beq.n	8000be0 <sbrk_aligned+0x34>
 8000bca:	1cc4      	adds	r4, r0, #3
 8000bcc:	f024 0403 	bic.w	r4, r4, #3
 8000bd0:	42a0      	cmp	r0, r4
 8000bd2:	d007      	beq.n	8000be4 <sbrk_aligned+0x38>
 8000bd4:	1a21      	subs	r1, r4, r0
 8000bd6:	4628      	mov	r0, r5
 8000bd8:	f000 f9d4 	bl	8000f84 <_sbrk_r>
 8000bdc:	3001      	adds	r0, #1
 8000bde:	d101      	bne.n	8000be4 <sbrk_aligned+0x38>
 8000be0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000be4:	4620      	mov	r0, r4
 8000be6:	bd70      	pop	{r4, r5, r6, pc}
 8000be8:	24000090 	.word	0x24000090

08000bec <_malloc_r>:
 8000bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bf0:	1ccd      	adds	r5, r1, #3
 8000bf2:	f025 0503 	bic.w	r5, r5, #3
 8000bf6:	3508      	adds	r5, #8
 8000bf8:	2d0c      	cmp	r5, #12
 8000bfa:	bf38      	it	cc
 8000bfc:	250c      	movcc	r5, #12
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	4607      	mov	r7, r0
 8000c02:	db01      	blt.n	8000c08 <_malloc_r+0x1c>
 8000c04:	42a9      	cmp	r1, r5
 8000c06:	d905      	bls.n	8000c14 <_malloc_r+0x28>
 8000c08:	230c      	movs	r3, #12
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	4630      	mov	r0, r6
 8000c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c14:	4e2e      	ldr	r6, [pc, #184]	; (8000cd0 <_malloc_r+0xe4>)
 8000c16:	f000 fc25 	bl	8001464 <__malloc_lock>
 8000c1a:	6833      	ldr	r3, [r6, #0]
 8000c1c:	461c      	mov	r4, r3
 8000c1e:	bb34      	cbnz	r4, 8000c6e <_malloc_r+0x82>
 8000c20:	4629      	mov	r1, r5
 8000c22:	4638      	mov	r0, r7
 8000c24:	f7ff ffc2 	bl	8000bac <sbrk_aligned>
 8000c28:	1c43      	adds	r3, r0, #1
 8000c2a:	4604      	mov	r4, r0
 8000c2c:	d14d      	bne.n	8000cca <_malloc_r+0xde>
 8000c2e:	6834      	ldr	r4, [r6, #0]
 8000c30:	4626      	mov	r6, r4
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	d140      	bne.n	8000cb8 <_malloc_r+0xcc>
 8000c36:	6823      	ldr	r3, [r4, #0]
 8000c38:	4631      	mov	r1, r6
 8000c3a:	4638      	mov	r0, r7
 8000c3c:	eb04 0803 	add.w	r8, r4, r3
 8000c40:	f000 f9a0 	bl	8000f84 <_sbrk_r>
 8000c44:	4580      	cmp	r8, r0
 8000c46:	d13a      	bne.n	8000cbe <_malloc_r+0xd2>
 8000c48:	6823      	ldr	r3, [r4, #0]
 8000c4a:	3503      	adds	r5, #3
 8000c4c:	1aed      	subs	r5, r5, r3
 8000c4e:	f025 0503 	bic.w	r5, r5, #3
 8000c52:	3508      	adds	r5, #8
 8000c54:	2d0c      	cmp	r5, #12
 8000c56:	bf38      	it	cc
 8000c58:	250c      	movcc	r5, #12
 8000c5a:	4629      	mov	r1, r5
 8000c5c:	4638      	mov	r0, r7
 8000c5e:	f7ff ffa5 	bl	8000bac <sbrk_aligned>
 8000c62:	3001      	adds	r0, #1
 8000c64:	d02b      	beq.n	8000cbe <_malloc_r+0xd2>
 8000c66:	6823      	ldr	r3, [r4, #0]
 8000c68:	442b      	add	r3, r5
 8000c6a:	6023      	str	r3, [r4, #0]
 8000c6c:	e00e      	b.n	8000c8c <_malloc_r+0xa0>
 8000c6e:	6822      	ldr	r2, [r4, #0]
 8000c70:	1b52      	subs	r2, r2, r5
 8000c72:	d41e      	bmi.n	8000cb2 <_malloc_r+0xc6>
 8000c74:	2a0b      	cmp	r2, #11
 8000c76:	d916      	bls.n	8000ca6 <_malloc_r+0xba>
 8000c78:	1961      	adds	r1, r4, r5
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	6025      	str	r5, [r4, #0]
 8000c7e:	bf18      	it	ne
 8000c80:	6059      	strne	r1, [r3, #4]
 8000c82:	6863      	ldr	r3, [r4, #4]
 8000c84:	bf08      	it	eq
 8000c86:	6031      	streq	r1, [r6, #0]
 8000c88:	5162      	str	r2, [r4, r5]
 8000c8a:	604b      	str	r3, [r1, #4]
 8000c8c:	4638      	mov	r0, r7
 8000c8e:	f104 060b 	add.w	r6, r4, #11
 8000c92:	f000 fbed 	bl	8001470 <__malloc_unlock>
 8000c96:	f026 0607 	bic.w	r6, r6, #7
 8000c9a:	1d23      	adds	r3, r4, #4
 8000c9c:	1af2      	subs	r2, r6, r3
 8000c9e:	d0b6      	beq.n	8000c0e <_malloc_r+0x22>
 8000ca0:	1b9b      	subs	r3, r3, r6
 8000ca2:	50a3      	str	r3, [r4, r2]
 8000ca4:	e7b3      	b.n	8000c0e <_malloc_r+0x22>
 8000ca6:	6862      	ldr	r2, [r4, #4]
 8000ca8:	42a3      	cmp	r3, r4
 8000caa:	bf0c      	ite	eq
 8000cac:	6032      	streq	r2, [r6, #0]
 8000cae:	605a      	strne	r2, [r3, #4]
 8000cb0:	e7ec      	b.n	8000c8c <_malloc_r+0xa0>
 8000cb2:	4623      	mov	r3, r4
 8000cb4:	6864      	ldr	r4, [r4, #4]
 8000cb6:	e7b2      	b.n	8000c1e <_malloc_r+0x32>
 8000cb8:	4634      	mov	r4, r6
 8000cba:	6876      	ldr	r6, [r6, #4]
 8000cbc:	e7b9      	b.n	8000c32 <_malloc_r+0x46>
 8000cbe:	230c      	movs	r3, #12
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4638      	mov	r0, r7
 8000cc4:	f000 fbd4 	bl	8001470 <__malloc_unlock>
 8000cc8:	e7a1      	b.n	8000c0e <_malloc_r+0x22>
 8000cca:	6025      	str	r5, [r4, #0]
 8000ccc:	e7de      	b.n	8000c8c <_malloc_r+0xa0>
 8000cce:	bf00      	nop
 8000cd0:	2400008c 	.word	0x2400008c

08000cd4 <__sfputc_r>:
 8000cd4:	6893      	ldr	r3, [r2, #8]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	b410      	push	{r4}
 8000cdc:	6093      	str	r3, [r2, #8]
 8000cde:	da08      	bge.n	8000cf2 <__sfputc_r+0x1e>
 8000ce0:	6994      	ldr	r4, [r2, #24]
 8000ce2:	42a3      	cmp	r3, r4
 8000ce4:	db01      	blt.n	8000cea <__sfputc_r+0x16>
 8000ce6:	290a      	cmp	r1, #10
 8000ce8:	d103      	bne.n	8000cf2 <__sfputc_r+0x1e>
 8000cea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cee:	f000 b99d 	b.w	800102c <__swbuf_r>
 8000cf2:	6813      	ldr	r3, [r2, #0]
 8000cf4:	1c58      	adds	r0, r3, #1
 8000cf6:	6010      	str	r0, [r2, #0]
 8000cf8:	7019      	strb	r1, [r3, #0]
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <__sfputs_r>:
 8000d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d04:	4606      	mov	r6, r0
 8000d06:	460f      	mov	r7, r1
 8000d08:	4614      	mov	r4, r2
 8000d0a:	18d5      	adds	r5, r2, r3
 8000d0c:	42ac      	cmp	r4, r5
 8000d0e:	d101      	bne.n	8000d14 <__sfputs_r+0x12>
 8000d10:	2000      	movs	r0, #0
 8000d12:	e007      	b.n	8000d24 <__sfputs_r+0x22>
 8000d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d18:	463a      	mov	r2, r7
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	f7ff ffda 	bl	8000cd4 <__sfputc_r>
 8000d20:	1c43      	adds	r3, r0, #1
 8000d22:	d1f3      	bne.n	8000d0c <__sfputs_r+0xa>
 8000d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d28 <_vfiprintf_r>:
 8000d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d2c:	460d      	mov	r5, r1
 8000d2e:	b09d      	sub	sp, #116	; 0x74
 8000d30:	4614      	mov	r4, r2
 8000d32:	4698      	mov	r8, r3
 8000d34:	4606      	mov	r6, r0
 8000d36:	b118      	cbz	r0, 8000d40 <_vfiprintf_r+0x18>
 8000d38:	6983      	ldr	r3, [r0, #24]
 8000d3a:	b90b      	cbnz	r3, 8000d40 <_vfiprintf_r+0x18>
 8000d3c:	f7ff fe96 	bl	8000a6c <__sinit>
 8000d40:	4b88      	ldr	r3, [pc, #544]	; (8000f64 <_vfiprintf_r+0x23c>)
 8000d42:	429d      	cmp	r5, r3
 8000d44:	d11b      	bne.n	8000d7e <_vfiprintf_r+0x56>
 8000d46:	6875      	ldr	r5, [r6, #4]
 8000d48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d4a:	07d9      	lsls	r1, r3, #31
 8000d4c:	d405      	bmi.n	8000d5a <_vfiprintf_r+0x32>
 8000d4e:	89ab      	ldrh	r3, [r5, #12]
 8000d50:	059a      	lsls	r2, r3, #22
 8000d52:	d402      	bmi.n	8000d5a <_vfiprintf_r+0x32>
 8000d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d56:	f7ff ff27 	bl	8000ba8 <__retarget_lock_acquire_recursive>
 8000d5a:	89ab      	ldrh	r3, [r5, #12]
 8000d5c:	071b      	lsls	r3, r3, #28
 8000d5e:	d501      	bpl.n	8000d64 <_vfiprintf_r+0x3c>
 8000d60:	692b      	ldr	r3, [r5, #16]
 8000d62:	b9eb      	cbnz	r3, 8000da0 <_vfiprintf_r+0x78>
 8000d64:	4629      	mov	r1, r5
 8000d66:	4630      	mov	r0, r6
 8000d68:	f000 f9c4 	bl	80010f4 <__swsetup_r>
 8000d6c:	b1c0      	cbz	r0, 8000da0 <_vfiprintf_r+0x78>
 8000d6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d70:	07dc      	lsls	r4, r3, #31
 8000d72:	d50e      	bpl.n	8000d92 <_vfiprintf_r+0x6a>
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d78:	b01d      	add	sp, #116	; 0x74
 8000d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d7e:	4b7a      	ldr	r3, [pc, #488]	; (8000f68 <_vfiprintf_r+0x240>)
 8000d80:	429d      	cmp	r5, r3
 8000d82:	d101      	bne.n	8000d88 <_vfiprintf_r+0x60>
 8000d84:	68b5      	ldr	r5, [r6, #8]
 8000d86:	e7df      	b.n	8000d48 <_vfiprintf_r+0x20>
 8000d88:	4b78      	ldr	r3, [pc, #480]	; (8000f6c <_vfiprintf_r+0x244>)
 8000d8a:	429d      	cmp	r5, r3
 8000d8c:	bf08      	it	eq
 8000d8e:	68f5      	ldreq	r5, [r6, #12]
 8000d90:	e7da      	b.n	8000d48 <_vfiprintf_r+0x20>
 8000d92:	89ab      	ldrh	r3, [r5, #12]
 8000d94:	0598      	lsls	r0, r3, #22
 8000d96:	d4ed      	bmi.n	8000d74 <_vfiprintf_r+0x4c>
 8000d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d9a:	f7ff ff06 	bl	8000baa <__retarget_lock_release_recursive>
 8000d9e:	e7e9      	b.n	8000d74 <_vfiprintf_r+0x4c>
 8000da0:	2300      	movs	r3, #0
 8000da2:	9309      	str	r3, [sp, #36]	; 0x24
 8000da4:	2320      	movs	r3, #32
 8000da6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000daa:	f8cd 800c 	str.w	r8, [sp, #12]
 8000dae:	2330      	movs	r3, #48	; 0x30
 8000db0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000f70 <_vfiprintf_r+0x248>
 8000db4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000db8:	f04f 0901 	mov.w	r9, #1
 8000dbc:	4623      	mov	r3, r4
 8000dbe:	469a      	mov	sl, r3
 8000dc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000dc4:	b10a      	cbz	r2, 8000dca <_vfiprintf_r+0xa2>
 8000dc6:	2a25      	cmp	r2, #37	; 0x25
 8000dc8:	d1f9      	bne.n	8000dbe <_vfiprintf_r+0x96>
 8000dca:	ebba 0b04 	subs.w	fp, sl, r4
 8000dce:	d00b      	beq.n	8000de8 <_vfiprintf_r+0xc0>
 8000dd0:	465b      	mov	r3, fp
 8000dd2:	4622      	mov	r2, r4
 8000dd4:	4629      	mov	r1, r5
 8000dd6:	4630      	mov	r0, r6
 8000dd8:	f7ff ff93 	bl	8000d02 <__sfputs_r>
 8000ddc:	3001      	adds	r0, #1
 8000dde:	f000 80a9 	beq.w	8000f34 <_vfiprintf_r+0x20c>
 8000de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000de4:	445a      	add	r2, fp
 8000de6:	9209      	str	r2, [sp, #36]	; 0x24
 8000de8:	f89a 3000 	ldrb.w	r3, [sl]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f000 80a1 	beq.w	8000f34 <_vfiprintf_r+0x20c>
 8000df2:	2300      	movs	r3, #0
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000df8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000dfc:	f10a 0a01 	add.w	sl, sl, #1
 8000e00:	9304      	str	r3, [sp, #16]
 8000e02:	9307      	str	r3, [sp, #28]
 8000e04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e08:	931a      	str	r3, [sp, #104]	; 0x68
 8000e0a:	4654      	mov	r4, sl
 8000e0c:	2205      	movs	r2, #5
 8000e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e12:	4857      	ldr	r0, [pc, #348]	; (8000f70 <_vfiprintf_r+0x248>)
 8000e14:	f7ff fa44 	bl	80002a0 <memchr>
 8000e18:	9a04      	ldr	r2, [sp, #16]
 8000e1a:	b9d8      	cbnz	r0, 8000e54 <_vfiprintf_r+0x12c>
 8000e1c:	06d1      	lsls	r1, r2, #27
 8000e1e:	bf44      	itt	mi
 8000e20:	2320      	movmi	r3, #32
 8000e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e26:	0713      	lsls	r3, r2, #28
 8000e28:	bf44      	itt	mi
 8000e2a:	232b      	movmi	r3, #43	; 0x2b
 8000e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e30:	f89a 3000 	ldrb.w	r3, [sl]
 8000e34:	2b2a      	cmp	r3, #42	; 0x2a
 8000e36:	d015      	beq.n	8000e64 <_vfiprintf_r+0x13c>
 8000e38:	9a07      	ldr	r2, [sp, #28]
 8000e3a:	4654      	mov	r4, sl
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f04f 0c0a 	mov.w	ip, #10
 8000e42:	4621      	mov	r1, r4
 8000e44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e48:	3b30      	subs	r3, #48	; 0x30
 8000e4a:	2b09      	cmp	r3, #9
 8000e4c:	d94d      	bls.n	8000eea <_vfiprintf_r+0x1c2>
 8000e4e:	b1b0      	cbz	r0, 8000e7e <_vfiprintf_r+0x156>
 8000e50:	9207      	str	r2, [sp, #28]
 8000e52:	e014      	b.n	8000e7e <_vfiprintf_r+0x156>
 8000e54:	eba0 0308 	sub.w	r3, r0, r8
 8000e58:	fa09 f303 	lsl.w	r3, r9, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	9304      	str	r3, [sp, #16]
 8000e60:	46a2      	mov	sl, r4
 8000e62:	e7d2      	b.n	8000e0a <_vfiprintf_r+0xe2>
 8000e64:	9b03      	ldr	r3, [sp, #12]
 8000e66:	1d19      	adds	r1, r3, #4
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	9103      	str	r1, [sp, #12]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	bfbb      	ittet	lt
 8000e70:	425b      	neglt	r3, r3
 8000e72:	f042 0202 	orrlt.w	r2, r2, #2
 8000e76:	9307      	strge	r3, [sp, #28]
 8000e78:	9307      	strlt	r3, [sp, #28]
 8000e7a:	bfb8      	it	lt
 8000e7c:	9204      	strlt	r2, [sp, #16]
 8000e7e:	7823      	ldrb	r3, [r4, #0]
 8000e80:	2b2e      	cmp	r3, #46	; 0x2e
 8000e82:	d10c      	bne.n	8000e9e <_vfiprintf_r+0x176>
 8000e84:	7863      	ldrb	r3, [r4, #1]
 8000e86:	2b2a      	cmp	r3, #42	; 0x2a
 8000e88:	d134      	bne.n	8000ef4 <_vfiprintf_r+0x1cc>
 8000e8a:	9b03      	ldr	r3, [sp, #12]
 8000e8c:	1d1a      	adds	r2, r3, #4
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	9203      	str	r2, [sp, #12]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	bfb8      	it	lt
 8000e96:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000e9a:	3402      	adds	r4, #2
 8000e9c:	9305      	str	r3, [sp, #20]
 8000e9e:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8000f80 <_vfiprintf_r+0x258>
 8000ea2:	7821      	ldrb	r1, [r4, #0]
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	f7ff f9fa 	bl	80002a0 <memchr>
 8000eac:	b138      	cbz	r0, 8000ebe <_vfiprintf_r+0x196>
 8000eae:	9b04      	ldr	r3, [sp, #16]
 8000eb0:	eba0 000a 	sub.w	r0, r0, sl
 8000eb4:	2240      	movs	r2, #64	; 0x40
 8000eb6:	4082      	lsls	r2, r0
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	3401      	adds	r4, #1
 8000ebc:	9304      	str	r3, [sp, #16]
 8000ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ec2:	482c      	ldr	r0, [pc, #176]	; (8000f74 <_vfiprintf_r+0x24c>)
 8000ec4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000ec8:	2206      	movs	r2, #6
 8000eca:	f7ff f9e9 	bl	80002a0 <memchr>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	d03f      	beq.n	8000f52 <_vfiprintf_r+0x22a>
 8000ed2:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <_vfiprintf_r+0x250>)
 8000ed4:	bb1b      	cbnz	r3, 8000f1e <_vfiprintf_r+0x1f6>
 8000ed6:	9b03      	ldr	r3, [sp, #12]
 8000ed8:	3307      	adds	r3, #7
 8000eda:	f023 0307 	bic.w	r3, r3, #7
 8000ede:	3308      	adds	r3, #8
 8000ee0:	9303      	str	r3, [sp, #12]
 8000ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ee4:	443b      	add	r3, r7
 8000ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8000ee8:	e768      	b.n	8000dbc <_vfiprintf_r+0x94>
 8000eea:	fb0c 3202 	mla	r2, ip, r2, r3
 8000eee:	460c      	mov	r4, r1
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	e7a6      	b.n	8000e42 <_vfiprintf_r+0x11a>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	3401      	adds	r4, #1
 8000ef8:	9305      	str	r3, [sp, #20]
 8000efa:	4619      	mov	r1, r3
 8000efc:	f04f 0c0a 	mov.w	ip, #10
 8000f00:	4620      	mov	r0, r4
 8000f02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f06:	3a30      	subs	r2, #48	; 0x30
 8000f08:	2a09      	cmp	r2, #9
 8000f0a:	d903      	bls.n	8000f14 <_vfiprintf_r+0x1ec>
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0c6      	beq.n	8000e9e <_vfiprintf_r+0x176>
 8000f10:	9105      	str	r1, [sp, #20]
 8000f12:	e7c4      	b.n	8000e9e <_vfiprintf_r+0x176>
 8000f14:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f18:	4604      	mov	r4, r0
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e7f0      	b.n	8000f00 <_vfiprintf_r+0x1d8>
 8000f1e:	ab03      	add	r3, sp, #12
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	462a      	mov	r2, r5
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <_vfiprintf_r+0x254>)
 8000f26:	a904      	add	r1, sp, #16
 8000f28:	4630      	mov	r0, r6
 8000f2a:	f3af 8000 	nop.w
 8000f2e:	4607      	mov	r7, r0
 8000f30:	1c78      	adds	r0, r7, #1
 8000f32:	d1d6      	bne.n	8000ee2 <_vfiprintf_r+0x1ba>
 8000f34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f36:	07d9      	lsls	r1, r3, #31
 8000f38:	d405      	bmi.n	8000f46 <_vfiprintf_r+0x21e>
 8000f3a:	89ab      	ldrh	r3, [r5, #12]
 8000f3c:	059a      	lsls	r2, r3, #22
 8000f3e:	d402      	bmi.n	8000f46 <_vfiprintf_r+0x21e>
 8000f40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f42:	f7ff fe32 	bl	8000baa <__retarget_lock_release_recursive>
 8000f46:	89ab      	ldrh	r3, [r5, #12]
 8000f48:	065b      	lsls	r3, r3, #25
 8000f4a:	f53f af13 	bmi.w	8000d74 <_vfiprintf_r+0x4c>
 8000f4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f50:	e712      	b.n	8000d78 <_vfiprintf_r+0x50>
 8000f52:	ab03      	add	r3, sp, #12
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	462a      	mov	r2, r5
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <_vfiprintf_r+0x254>)
 8000f5a:	a904      	add	r1, sp, #16
 8000f5c:	4630      	mov	r0, r6
 8000f5e:	f000 fb47 	bl	80015f0 <_printf_i>
 8000f62:	e7e4      	b.n	8000f2e <_vfiprintf_r+0x206>
 8000f64:	08001900 	.word	0x08001900
 8000f68:	08001920 	.word	0x08001920
 8000f6c:	080018e0 	.word	0x080018e0
 8000f70:	08001940 	.word	0x08001940
 8000f74:	0800194a 	.word	0x0800194a
 8000f78:	00000000 	.word	0x00000000
 8000f7c:	08000d03 	.word	0x08000d03
 8000f80:	08001946 	.word	0x08001946

08000f84 <_sbrk_r>:
 8000f84:	b538      	push	{r3, r4, r5, lr}
 8000f86:	4d06      	ldr	r5, [pc, #24]	; (8000fa0 <_sbrk_r+0x1c>)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	4608      	mov	r0, r1
 8000f8e:	602b      	str	r3, [r5, #0]
 8000f90:	f7ff fb9a 	bl	80006c8 <_sbrk>
 8000f94:	1c43      	adds	r3, r0, #1
 8000f96:	d102      	bne.n	8000f9e <_sbrk_r+0x1a>
 8000f98:	682b      	ldr	r3, [r5, #0]
 8000f9a:	b103      	cbz	r3, 8000f9e <_sbrk_r+0x1a>
 8000f9c:	6023      	str	r3, [r4, #0]
 8000f9e:	bd38      	pop	{r3, r4, r5, pc}
 8000fa0:	24000094 	.word	0x24000094

08000fa4 <__sread>:
 8000fa4:	b510      	push	{r4, lr}
 8000fa6:	460c      	mov	r4, r1
 8000fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fac:	f000 fc42 	bl	8001834 <_read_r>
 8000fb0:	2800      	cmp	r0, #0
 8000fb2:	bfab      	itete	ge
 8000fb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000fb6:	89a3      	ldrhlt	r3, [r4, #12]
 8000fb8:	181b      	addge	r3, r3, r0
 8000fba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000fbe:	bfac      	ite	ge
 8000fc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8000fc2:	81a3      	strhlt	r3, [r4, #12]
 8000fc4:	bd10      	pop	{r4, pc}

08000fc6 <__swrite>:
 8000fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fca:	461f      	mov	r7, r3
 8000fcc:	898b      	ldrh	r3, [r1, #12]
 8000fce:	05db      	lsls	r3, r3, #23
 8000fd0:	4605      	mov	r5, r0
 8000fd2:	460c      	mov	r4, r1
 8000fd4:	4616      	mov	r6, r2
 8000fd6:	d505      	bpl.n	8000fe4 <__swrite+0x1e>
 8000fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fdc:	2302      	movs	r3, #2
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f000 f9c8 	bl	8001374 <_lseek_r>
 8000fe4:	89a3      	ldrh	r3, [r4, #12]
 8000fe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fee:	81a3      	strh	r3, [r4, #12]
 8000ff0:	4632      	mov	r2, r6
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ffa:	f000 b869 	b.w	80010d0 <_write_r>

08000ffe <__sseek>:
 8000ffe:	b510      	push	{r4, lr}
 8001000:	460c      	mov	r4, r1
 8001002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001006:	f000 f9b5 	bl	8001374 <_lseek_r>
 800100a:	1c43      	adds	r3, r0, #1
 800100c:	89a3      	ldrh	r3, [r4, #12]
 800100e:	bf15      	itete	ne
 8001010:	6560      	strne	r0, [r4, #84]	; 0x54
 8001012:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001016:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800101a:	81a3      	strheq	r3, [r4, #12]
 800101c:	bf18      	it	ne
 800101e:	81a3      	strhne	r3, [r4, #12]
 8001020:	bd10      	pop	{r4, pc}

08001022 <__sclose>:
 8001022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001026:	f000 b8d3 	b.w	80011d0 <_close_r>
	...

0800102c <__swbuf_r>:
 800102c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800102e:	460e      	mov	r6, r1
 8001030:	4614      	mov	r4, r2
 8001032:	4605      	mov	r5, r0
 8001034:	b118      	cbz	r0, 800103e <__swbuf_r+0x12>
 8001036:	6983      	ldr	r3, [r0, #24]
 8001038:	b90b      	cbnz	r3, 800103e <__swbuf_r+0x12>
 800103a:	f7ff fd17 	bl	8000a6c <__sinit>
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <__swbuf_r+0x98>)
 8001040:	429c      	cmp	r4, r3
 8001042:	d12b      	bne.n	800109c <__swbuf_r+0x70>
 8001044:	686c      	ldr	r4, [r5, #4]
 8001046:	69a3      	ldr	r3, [r4, #24]
 8001048:	60a3      	str	r3, [r4, #8]
 800104a:	89a3      	ldrh	r3, [r4, #12]
 800104c:	071a      	lsls	r2, r3, #28
 800104e:	d52f      	bpl.n	80010b0 <__swbuf_r+0x84>
 8001050:	6923      	ldr	r3, [r4, #16]
 8001052:	b36b      	cbz	r3, 80010b0 <__swbuf_r+0x84>
 8001054:	6923      	ldr	r3, [r4, #16]
 8001056:	6820      	ldr	r0, [r4, #0]
 8001058:	1ac0      	subs	r0, r0, r3
 800105a:	6963      	ldr	r3, [r4, #20]
 800105c:	b2f6      	uxtb	r6, r6
 800105e:	4283      	cmp	r3, r0
 8001060:	4637      	mov	r7, r6
 8001062:	dc04      	bgt.n	800106e <__swbuf_r+0x42>
 8001064:	4621      	mov	r1, r4
 8001066:	4628      	mov	r0, r5
 8001068:	f000 f948 	bl	80012fc <_fflush_r>
 800106c:	bb30      	cbnz	r0, 80010bc <__swbuf_r+0x90>
 800106e:	68a3      	ldr	r3, [r4, #8]
 8001070:	3b01      	subs	r3, #1
 8001072:	60a3      	str	r3, [r4, #8]
 8001074:	6823      	ldr	r3, [r4, #0]
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	6022      	str	r2, [r4, #0]
 800107a:	701e      	strb	r6, [r3, #0]
 800107c:	6963      	ldr	r3, [r4, #20]
 800107e:	3001      	adds	r0, #1
 8001080:	4283      	cmp	r3, r0
 8001082:	d004      	beq.n	800108e <__swbuf_r+0x62>
 8001084:	89a3      	ldrh	r3, [r4, #12]
 8001086:	07db      	lsls	r3, r3, #31
 8001088:	d506      	bpl.n	8001098 <__swbuf_r+0x6c>
 800108a:	2e0a      	cmp	r6, #10
 800108c:	d104      	bne.n	8001098 <__swbuf_r+0x6c>
 800108e:	4621      	mov	r1, r4
 8001090:	4628      	mov	r0, r5
 8001092:	f000 f933 	bl	80012fc <_fflush_r>
 8001096:	b988      	cbnz	r0, 80010bc <__swbuf_r+0x90>
 8001098:	4638      	mov	r0, r7
 800109a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <__swbuf_r+0x9c>)
 800109e:	429c      	cmp	r4, r3
 80010a0:	d101      	bne.n	80010a6 <__swbuf_r+0x7a>
 80010a2:	68ac      	ldr	r4, [r5, #8]
 80010a4:	e7cf      	b.n	8001046 <__swbuf_r+0x1a>
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <__swbuf_r+0xa0>)
 80010a8:	429c      	cmp	r4, r3
 80010aa:	bf08      	it	eq
 80010ac:	68ec      	ldreq	r4, [r5, #12]
 80010ae:	e7ca      	b.n	8001046 <__swbuf_r+0x1a>
 80010b0:	4621      	mov	r1, r4
 80010b2:	4628      	mov	r0, r5
 80010b4:	f000 f81e 	bl	80010f4 <__swsetup_r>
 80010b8:	2800      	cmp	r0, #0
 80010ba:	d0cb      	beq.n	8001054 <__swbuf_r+0x28>
 80010bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80010c0:	e7ea      	b.n	8001098 <__swbuf_r+0x6c>
 80010c2:	bf00      	nop
 80010c4:	08001900 	.word	0x08001900
 80010c8:	08001920 	.word	0x08001920
 80010cc:	080018e0 	.word	0x080018e0

080010d0 <_write_r>:
 80010d0:	b538      	push	{r3, r4, r5, lr}
 80010d2:	4d07      	ldr	r5, [pc, #28]	; (80010f0 <_write_r+0x20>)
 80010d4:	4604      	mov	r4, r0
 80010d6:	4608      	mov	r0, r1
 80010d8:	4611      	mov	r1, r2
 80010da:	2200      	movs	r2, #0
 80010dc:	602a      	str	r2, [r5, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	f7ff faa1 	bl	8000626 <_write>
 80010e4:	1c43      	adds	r3, r0, #1
 80010e6:	d102      	bne.n	80010ee <_write_r+0x1e>
 80010e8:	682b      	ldr	r3, [r5, #0]
 80010ea:	b103      	cbz	r3, 80010ee <_write_r+0x1e>
 80010ec:	6023      	str	r3, [r4, #0]
 80010ee:	bd38      	pop	{r3, r4, r5, pc}
 80010f0:	24000094 	.word	0x24000094

080010f4 <__swsetup_r>:
 80010f4:	4b32      	ldr	r3, [pc, #200]	; (80011c0 <__swsetup_r+0xcc>)
 80010f6:	b570      	push	{r4, r5, r6, lr}
 80010f8:	681d      	ldr	r5, [r3, #0]
 80010fa:	4606      	mov	r6, r0
 80010fc:	460c      	mov	r4, r1
 80010fe:	b125      	cbz	r5, 800110a <__swsetup_r+0x16>
 8001100:	69ab      	ldr	r3, [r5, #24]
 8001102:	b913      	cbnz	r3, 800110a <__swsetup_r+0x16>
 8001104:	4628      	mov	r0, r5
 8001106:	f7ff fcb1 	bl	8000a6c <__sinit>
 800110a:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <__swsetup_r+0xd0>)
 800110c:	429c      	cmp	r4, r3
 800110e:	d10f      	bne.n	8001130 <__swsetup_r+0x3c>
 8001110:	686c      	ldr	r4, [r5, #4]
 8001112:	89a3      	ldrh	r3, [r4, #12]
 8001114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001118:	0719      	lsls	r1, r3, #28
 800111a:	d42c      	bmi.n	8001176 <__swsetup_r+0x82>
 800111c:	06dd      	lsls	r5, r3, #27
 800111e:	d411      	bmi.n	8001144 <__swsetup_r+0x50>
 8001120:	2309      	movs	r3, #9
 8001122:	6033      	str	r3, [r6, #0]
 8001124:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001128:	81a3      	strh	r3, [r4, #12]
 800112a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800112e:	e03e      	b.n	80011ae <__swsetup_r+0xba>
 8001130:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <__swsetup_r+0xd4>)
 8001132:	429c      	cmp	r4, r3
 8001134:	d101      	bne.n	800113a <__swsetup_r+0x46>
 8001136:	68ac      	ldr	r4, [r5, #8]
 8001138:	e7eb      	b.n	8001112 <__swsetup_r+0x1e>
 800113a:	4b24      	ldr	r3, [pc, #144]	; (80011cc <__swsetup_r+0xd8>)
 800113c:	429c      	cmp	r4, r3
 800113e:	bf08      	it	eq
 8001140:	68ec      	ldreq	r4, [r5, #12]
 8001142:	e7e6      	b.n	8001112 <__swsetup_r+0x1e>
 8001144:	0758      	lsls	r0, r3, #29
 8001146:	d512      	bpl.n	800116e <__swsetup_r+0x7a>
 8001148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800114a:	b141      	cbz	r1, 800115e <__swsetup_r+0x6a>
 800114c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001150:	4299      	cmp	r1, r3
 8001152:	d002      	beq.n	800115a <__swsetup_r+0x66>
 8001154:	4630      	mov	r0, r6
 8001156:	f000 f991 	bl	800147c <_free_r>
 800115a:	2300      	movs	r3, #0
 800115c:	6363      	str	r3, [r4, #52]	; 0x34
 800115e:	89a3      	ldrh	r3, [r4, #12]
 8001160:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001164:	81a3      	strh	r3, [r4, #12]
 8001166:	2300      	movs	r3, #0
 8001168:	6063      	str	r3, [r4, #4]
 800116a:	6923      	ldr	r3, [r4, #16]
 800116c:	6023      	str	r3, [r4, #0]
 800116e:	89a3      	ldrh	r3, [r4, #12]
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	81a3      	strh	r3, [r4, #12]
 8001176:	6923      	ldr	r3, [r4, #16]
 8001178:	b94b      	cbnz	r3, 800118e <__swsetup_r+0x9a>
 800117a:	89a3      	ldrh	r3, [r4, #12]
 800117c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001184:	d003      	beq.n	800118e <__swsetup_r+0x9a>
 8001186:	4621      	mov	r1, r4
 8001188:	4630      	mov	r0, r6
 800118a:	f000 f92b 	bl	80013e4 <__smakebuf_r>
 800118e:	89a0      	ldrh	r0, [r4, #12]
 8001190:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001194:	f010 0301 	ands.w	r3, r0, #1
 8001198:	d00a      	beq.n	80011b0 <__swsetup_r+0xbc>
 800119a:	2300      	movs	r3, #0
 800119c:	60a3      	str	r3, [r4, #8]
 800119e:	6963      	ldr	r3, [r4, #20]
 80011a0:	425b      	negs	r3, r3
 80011a2:	61a3      	str	r3, [r4, #24]
 80011a4:	6923      	ldr	r3, [r4, #16]
 80011a6:	b943      	cbnz	r3, 80011ba <__swsetup_r+0xc6>
 80011a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80011ac:	d1ba      	bne.n	8001124 <__swsetup_r+0x30>
 80011ae:	bd70      	pop	{r4, r5, r6, pc}
 80011b0:	0781      	lsls	r1, r0, #30
 80011b2:	bf58      	it	pl
 80011b4:	6963      	ldrpl	r3, [r4, #20]
 80011b6:	60a3      	str	r3, [r4, #8]
 80011b8:	e7f4      	b.n	80011a4 <__swsetup_r+0xb0>
 80011ba:	2000      	movs	r0, #0
 80011bc:	e7f7      	b.n	80011ae <__swsetup_r+0xba>
 80011be:	bf00      	nop
 80011c0:	24000000 	.word	0x24000000
 80011c4:	08001900 	.word	0x08001900
 80011c8:	08001920 	.word	0x08001920
 80011cc:	080018e0 	.word	0x080018e0

080011d0 <_close_r>:
 80011d0:	b538      	push	{r3, r4, r5, lr}
 80011d2:	4d06      	ldr	r5, [pc, #24]	; (80011ec <_close_r+0x1c>)
 80011d4:	2300      	movs	r3, #0
 80011d6:	4604      	mov	r4, r0
 80011d8:	4608      	mov	r0, r1
 80011da:	602b      	str	r3, [r5, #0]
 80011dc:	f7ff fa3f 	bl	800065e <_close>
 80011e0:	1c43      	adds	r3, r0, #1
 80011e2:	d102      	bne.n	80011ea <_close_r+0x1a>
 80011e4:	682b      	ldr	r3, [r5, #0]
 80011e6:	b103      	cbz	r3, 80011ea <_close_r+0x1a>
 80011e8:	6023      	str	r3, [r4, #0]
 80011ea:	bd38      	pop	{r3, r4, r5, pc}
 80011ec:	24000094 	.word	0x24000094

080011f0 <__sflush_r>:
 80011f0:	898a      	ldrh	r2, [r1, #12]
 80011f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011f6:	4605      	mov	r5, r0
 80011f8:	0710      	lsls	r0, r2, #28
 80011fa:	460c      	mov	r4, r1
 80011fc:	d458      	bmi.n	80012b0 <__sflush_r+0xc0>
 80011fe:	684b      	ldr	r3, [r1, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	dc05      	bgt.n	8001210 <__sflush_r+0x20>
 8001204:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001206:	2b00      	cmp	r3, #0
 8001208:	dc02      	bgt.n	8001210 <__sflush_r+0x20>
 800120a:	2000      	movs	r0, #0
 800120c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001210:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001212:	2e00      	cmp	r6, #0
 8001214:	d0f9      	beq.n	800120a <__sflush_r+0x1a>
 8001216:	2300      	movs	r3, #0
 8001218:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800121c:	682f      	ldr	r7, [r5, #0]
 800121e:	6a21      	ldr	r1, [r4, #32]
 8001220:	602b      	str	r3, [r5, #0]
 8001222:	d032      	beq.n	800128a <__sflush_r+0x9a>
 8001224:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001226:	89a3      	ldrh	r3, [r4, #12]
 8001228:	075a      	lsls	r2, r3, #29
 800122a:	d505      	bpl.n	8001238 <__sflush_r+0x48>
 800122c:	6863      	ldr	r3, [r4, #4]
 800122e:	1ac0      	subs	r0, r0, r3
 8001230:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001232:	b10b      	cbz	r3, 8001238 <__sflush_r+0x48>
 8001234:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001236:	1ac0      	subs	r0, r0, r3
 8001238:	2300      	movs	r3, #0
 800123a:	4602      	mov	r2, r0
 800123c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800123e:	6a21      	ldr	r1, [r4, #32]
 8001240:	4628      	mov	r0, r5
 8001242:	47b0      	blx	r6
 8001244:	1c43      	adds	r3, r0, #1
 8001246:	89a3      	ldrh	r3, [r4, #12]
 8001248:	d106      	bne.n	8001258 <__sflush_r+0x68>
 800124a:	6829      	ldr	r1, [r5, #0]
 800124c:	291d      	cmp	r1, #29
 800124e:	d82b      	bhi.n	80012a8 <__sflush_r+0xb8>
 8001250:	4a29      	ldr	r2, [pc, #164]	; (80012f8 <__sflush_r+0x108>)
 8001252:	410a      	asrs	r2, r1
 8001254:	07d6      	lsls	r6, r2, #31
 8001256:	d427      	bmi.n	80012a8 <__sflush_r+0xb8>
 8001258:	2200      	movs	r2, #0
 800125a:	6062      	str	r2, [r4, #4]
 800125c:	04d9      	lsls	r1, r3, #19
 800125e:	6922      	ldr	r2, [r4, #16]
 8001260:	6022      	str	r2, [r4, #0]
 8001262:	d504      	bpl.n	800126e <__sflush_r+0x7e>
 8001264:	1c42      	adds	r2, r0, #1
 8001266:	d101      	bne.n	800126c <__sflush_r+0x7c>
 8001268:	682b      	ldr	r3, [r5, #0]
 800126a:	b903      	cbnz	r3, 800126e <__sflush_r+0x7e>
 800126c:	6560      	str	r0, [r4, #84]	; 0x54
 800126e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001270:	602f      	str	r7, [r5, #0]
 8001272:	2900      	cmp	r1, #0
 8001274:	d0c9      	beq.n	800120a <__sflush_r+0x1a>
 8001276:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800127a:	4299      	cmp	r1, r3
 800127c:	d002      	beq.n	8001284 <__sflush_r+0x94>
 800127e:	4628      	mov	r0, r5
 8001280:	f000 f8fc 	bl	800147c <_free_r>
 8001284:	2000      	movs	r0, #0
 8001286:	6360      	str	r0, [r4, #52]	; 0x34
 8001288:	e7c0      	b.n	800120c <__sflush_r+0x1c>
 800128a:	2301      	movs	r3, #1
 800128c:	4628      	mov	r0, r5
 800128e:	47b0      	blx	r6
 8001290:	1c41      	adds	r1, r0, #1
 8001292:	d1c8      	bne.n	8001226 <__sflush_r+0x36>
 8001294:	682b      	ldr	r3, [r5, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0c5      	beq.n	8001226 <__sflush_r+0x36>
 800129a:	2b1d      	cmp	r3, #29
 800129c:	d001      	beq.n	80012a2 <__sflush_r+0xb2>
 800129e:	2b16      	cmp	r3, #22
 80012a0:	d101      	bne.n	80012a6 <__sflush_r+0xb6>
 80012a2:	602f      	str	r7, [r5, #0]
 80012a4:	e7b1      	b.n	800120a <__sflush_r+0x1a>
 80012a6:	89a3      	ldrh	r3, [r4, #12]
 80012a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ac:	81a3      	strh	r3, [r4, #12]
 80012ae:	e7ad      	b.n	800120c <__sflush_r+0x1c>
 80012b0:	690f      	ldr	r7, [r1, #16]
 80012b2:	2f00      	cmp	r7, #0
 80012b4:	d0a9      	beq.n	800120a <__sflush_r+0x1a>
 80012b6:	0793      	lsls	r3, r2, #30
 80012b8:	680e      	ldr	r6, [r1, #0]
 80012ba:	bf08      	it	eq
 80012bc:	694b      	ldreq	r3, [r1, #20]
 80012be:	600f      	str	r7, [r1, #0]
 80012c0:	bf18      	it	ne
 80012c2:	2300      	movne	r3, #0
 80012c4:	eba6 0807 	sub.w	r8, r6, r7
 80012c8:	608b      	str	r3, [r1, #8]
 80012ca:	f1b8 0f00 	cmp.w	r8, #0
 80012ce:	dd9c      	ble.n	800120a <__sflush_r+0x1a>
 80012d0:	6a21      	ldr	r1, [r4, #32]
 80012d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80012d4:	4643      	mov	r3, r8
 80012d6:	463a      	mov	r2, r7
 80012d8:	4628      	mov	r0, r5
 80012da:	47b0      	blx	r6
 80012dc:	2800      	cmp	r0, #0
 80012de:	dc06      	bgt.n	80012ee <__sflush_r+0xfe>
 80012e0:	89a3      	ldrh	r3, [r4, #12]
 80012e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e6:	81a3      	strh	r3, [r4, #12]
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012ec:	e78e      	b.n	800120c <__sflush_r+0x1c>
 80012ee:	4407      	add	r7, r0
 80012f0:	eba8 0800 	sub.w	r8, r8, r0
 80012f4:	e7e9      	b.n	80012ca <__sflush_r+0xda>
 80012f6:	bf00      	nop
 80012f8:	dfbffffe 	.word	0xdfbffffe

080012fc <_fflush_r>:
 80012fc:	b538      	push	{r3, r4, r5, lr}
 80012fe:	690b      	ldr	r3, [r1, #16]
 8001300:	4605      	mov	r5, r0
 8001302:	460c      	mov	r4, r1
 8001304:	b913      	cbnz	r3, 800130c <_fflush_r+0x10>
 8001306:	2500      	movs	r5, #0
 8001308:	4628      	mov	r0, r5
 800130a:	bd38      	pop	{r3, r4, r5, pc}
 800130c:	b118      	cbz	r0, 8001316 <_fflush_r+0x1a>
 800130e:	6983      	ldr	r3, [r0, #24]
 8001310:	b90b      	cbnz	r3, 8001316 <_fflush_r+0x1a>
 8001312:	f7ff fbab 	bl	8000a6c <__sinit>
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <_fflush_r+0x6c>)
 8001318:	429c      	cmp	r4, r3
 800131a:	d11b      	bne.n	8001354 <_fflush_r+0x58>
 800131c:	686c      	ldr	r4, [r5, #4]
 800131e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0ef      	beq.n	8001306 <_fflush_r+0xa>
 8001326:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001328:	07d0      	lsls	r0, r2, #31
 800132a:	d404      	bmi.n	8001336 <_fflush_r+0x3a>
 800132c:	0599      	lsls	r1, r3, #22
 800132e:	d402      	bmi.n	8001336 <_fflush_r+0x3a>
 8001330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001332:	f7ff fc39 	bl	8000ba8 <__retarget_lock_acquire_recursive>
 8001336:	4628      	mov	r0, r5
 8001338:	4621      	mov	r1, r4
 800133a:	f7ff ff59 	bl	80011f0 <__sflush_r>
 800133e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001340:	07da      	lsls	r2, r3, #31
 8001342:	4605      	mov	r5, r0
 8001344:	d4e0      	bmi.n	8001308 <_fflush_r+0xc>
 8001346:	89a3      	ldrh	r3, [r4, #12]
 8001348:	059b      	lsls	r3, r3, #22
 800134a:	d4dd      	bmi.n	8001308 <_fflush_r+0xc>
 800134c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800134e:	f7ff fc2c 	bl	8000baa <__retarget_lock_release_recursive>
 8001352:	e7d9      	b.n	8001308 <_fflush_r+0xc>
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <_fflush_r+0x70>)
 8001356:	429c      	cmp	r4, r3
 8001358:	d101      	bne.n	800135e <_fflush_r+0x62>
 800135a:	68ac      	ldr	r4, [r5, #8]
 800135c:	e7df      	b.n	800131e <_fflush_r+0x22>
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <_fflush_r+0x74>)
 8001360:	429c      	cmp	r4, r3
 8001362:	bf08      	it	eq
 8001364:	68ec      	ldreq	r4, [r5, #12]
 8001366:	e7da      	b.n	800131e <_fflush_r+0x22>
 8001368:	08001900 	.word	0x08001900
 800136c:	08001920 	.word	0x08001920
 8001370:	080018e0 	.word	0x080018e0

08001374 <_lseek_r>:
 8001374:	b538      	push	{r3, r4, r5, lr}
 8001376:	4d07      	ldr	r5, [pc, #28]	; (8001394 <_lseek_r+0x20>)
 8001378:	4604      	mov	r4, r0
 800137a:	4608      	mov	r0, r1
 800137c:	4611      	mov	r1, r2
 800137e:	2200      	movs	r2, #0
 8001380:	602a      	str	r2, [r5, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	f7ff f992 	bl	80006ac <_lseek>
 8001388:	1c43      	adds	r3, r0, #1
 800138a:	d102      	bne.n	8001392 <_lseek_r+0x1e>
 800138c:	682b      	ldr	r3, [r5, #0]
 800138e:	b103      	cbz	r3, 8001392 <_lseek_r+0x1e>
 8001390:	6023      	str	r3, [r4, #0]
 8001392:	bd38      	pop	{r3, r4, r5, pc}
 8001394:	24000094 	.word	0x24000094

08001398 <__swhatbuf_r>:
 8001398:	b570      	push	{r4, r5, r6, lr}
 800139a:	460c      	mov	r4, r1
 800139c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013a0:	2900      	cmp	r1, #0
 80013a2:	b096      	sub	sp, #88	; 0x58
 80013a4:	4615      	mov	r5, r2
 80013a6:	461e      	mov	r6, r3
 80013a8:	da0d      	bge.n	80013c6 <__swhatbuf_r+0x2e>
 80013aa:	89a3      	ldrh	r3, [r4, #12]
 80013ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80013b0:	f04f 0100 	mov.w	r1, #0
 80013b4:	bf0c      	ite	eq
 80013b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80013ba:	2340      	movne	r3, #64	; 0x40
 80013bc:	2000      	movs	r0, #0
 80013be:	6031      	str	r1, [r6, #0]
 80013c0:	602b      	str	r3, [r5, #0]
 80013c2:	b016      	add	sp, #88	; 0x58
 80013c4:	bd70      	pop	{r4, r5, r6, pc}
 80013c6:	466a      	mov	r2, sp
 80013c8:	f000 fa46 	bl	8001858 <_fstat_r>
 80013cc:	2800      	cmp	r0, #0
 80013ce:	dbec      	blt.n	80013aa <__swhatbuf_r+0x12>
 80013d0:	9901      	ldr	r1, [sp, #4]
 80013d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80013d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80013da:	4259      	negs	r1, r3
 80013dc:	4159      	adcs	r1, r3
 80013de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e2:	e7eb      	b.n	80013bc <__swhatbuf_r+0x24>

080013e4 <__smakebuf_r>:
 80013e4:	898b      	ldrh	r3, [r1, #12]
 80013e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80013e8:	079d      	lsls	r5, r3, #30
 80013ea:	4606      	mov	r6, r0
 80013ec:	460c      	mov	r4, r1
 80013ee:	d507      	bpl.n	8001400 <__smakebuf_r+0x1c>
 80013f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80013f4:	6023      	str	r3, [r4, #0]
 80013f6:	6123      	str	r3, [r4, #16]
 80013f8:	2301      	movs	r3, #1
 80013fa:	6163      	str	r3, [r4, #20]
 80013fc:	b002      	add	sp, #8
 80013fe:	bd70      	pop	{r4, r5, r6, pc}
 8001400:	ab01      	add	r3, sp, #4
 8001402:	466a      	mov	r2, sp
 8001404:	f7ff ffc8 	bl	8001398 <__swhatbuf_r>
 8001408:	9900      	ldr	r1, [sp, #0]
 800140a:	4605      	mov	r5, r0
 800140c:	4630      	mov	r0, r6
 800140e:	f7ff fbed 	bl	8000bec <_malloc_r>
 8001412:	b948      	cbnz	r0, 8001428 <__smakebuf_r+0x44>
 8001414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001418:	059a      	lsls	r2, r3, #22
 800141a:	d4ef      	bmi.n	80013fc <__smakebuf_r+0x18>
 800141c:	f023 0303 	bic.w	r3, r3, #3
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	81a3      	strh	r3, [r4, #12]
 8001426:	e7e3      	b.n	80013f0 <__smakebuf_r+0xc>
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <__smakebuf_r+0x7c>)
 800142a:	62b3      	str	r3, [r6, #40]	; 0x28
 800142c:	89a3      	ldrh	r3, [r4, #12]
 800142e:	6020      	str	r0, [r4, #0]
 8001430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001434:	81a3      	strh	r3, [r4, #12]
 8001436:	9b00      	ldr	r3, [sp, #0]
 8001438:	6163      	str	r3, [r4, #20]
 800143a:	9b01      	ldr	r3, [sp, #4]
 800143c:	6120      	str	r0, [r4, #16]
 800143e:	b15b      	cbz	r3, 8001458 <__smakebuf_r+0x74>
 8001440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001444:	4630      	mov	r0, r6
 8001446:	f000 fa19 	bl	800187c <_isatty_r>
 800144a:	b128      	cbz	r0, 8001458 <__smakebuf_r+0x74>
 800144c:	89a3      	ldrh	r3, [r4, #12]
 800144e:	f023 0303 	bic.w	r3, r3, #3
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	81a3      	strh	r3, [r4, #12]
 8001458:	89a3      	ldrh	r3, [r4, #12]
 800145a:	431d      	orrs	r5, r3
 800145c:	81a5      	strh	r5, [r4, #12]
 800145e:	e7cd      	b.n	80013fc <__smakebuf_r+0x18>
 8001460:	08000a05 	.word	0x08000a05

08001464 <__malloc_lock>:
 8001464:	4801      	ldr	r0, [pc, #4]	; (800146c <__malloc_lock+0x8>)
 8001466:	f7ff bb9f 	b.w	8000ba8 <__retarget_lock_acquire_recursive>
 800146a:	bf00      	nop
 800146c:	24000088 	.word	0x24000088

08001470 <__malloc_unlock>:
 8001470:	4801      	ldr	r0, [pc, #4]	; (8001478 <__malloc_unlock+0x8>)
 8001472:	f7ff bb9a 	b.w	8000baa <__retarget_lock_release_recursive>
 8001476:	bf00      	nop
 8001478:	24000088 	.word	0x24000088

0800147c <_free_r>:
 800147c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800147e:	2900      	cmp	r1, #0
 8001480:	d044      	beq.n	800150c <_free_r+0x90>
 8001482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001486:	9001      	str	r0, [sp, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	f1a1 0404 	sub.w	r4, r1, #4
 800148e:	bfb8      	it	lt
 8001490:	18e4      	addlt	r4, r4, r3
 8001492:	f7ff ffe7 	bl	8001464 <__malloc_lock>
 8001496:	4a1e      	ldr	r2, [pc, #120]	; (8001510 <_free_r+0x94>)
 8001498:	9801      	ldr	r0, [sp, #4]
 800149a:	6813      	ldr	r3, [r2, #0]
 800149c:	b933      	cbnz	r3, 80014ac <_free_r+0x30>
 800149e:	6063      	str	r3, [r4, #4]
 80014a0:	6014      	str	r4, [r2, #0]
 80014a2:	b003      	add	sp, #12
 80014a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80014a8:	f7ff bfe2 	b.w	8001470 <__malloc_unlock>
 80014ac:	42a3      	cmp	r3, r4
 80014ae:	d908      	bls.n	80014c2 <_free_r+0x46>
 80014b0:	6825      	ldr	r5, [r4, #0]
 80014b2:	1961      	adds	r1, r4, r5
 80014b4:	428b      	cmp	r3, r1
 80014b6:	bf01      	itttt	eq
 80014b8:	6819      	ldreq	r1, [r3, #0]
 80014ba:	685b      	ldreq	r3, [r3, #4]
 80014bc:	1949      	addeq	r1, r1, r5
 80014be:	6021      	streq	r1, [r4, #0]
 80014c0:	e7ed      	b.n	800149e <_free_r+0x22>
 80014c2:	461a      	mov	r2, r3
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	b10b      	cbz	r3, 80014cc <_free_r+0x50>
 80014c8:	42a3      	cmp	r3, r4
 80014ca:	d9fa      	bls.n	80014c2 <_free_r+0x46>
 80014cc:	6811      	ldr	r1, [r2, #0]
 80014ce:	1855      	adds	r5, r2, r1
 80014d0:	42a5      	cmp	r5, r4
 80014d2:	d10b      	bne.n	80014ec <_free_r+0x70>
 80014d4:	6824      	ldr	r4, [r4, #0]
 80014d6:	4421      	add	r1, r4
 80014d8:	1854      	adds	r4, r2, r1
 80014da:	42a3      	cmp	r3, r4
 80014dc:	6011      	str	r1, [r2, #0]
 80014de:	d1e0      	bne.n	80014a2 <_free_r+0x26>
 80014e0:	681c      	ldr	r4, [r3, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	6053      	str	r3, [r2, #4]
 80014e6:	440c      	add	r4, r1
 80014e8:	6014      	str	r4, [r2, #0]
 80014ea:	e7da      	b.n	80014a2 <_free_r+0x26>
 80014ec:	d902      	bls.n	80014f4 <_free_r+0x78>
 80014ee:	230c      	movs	r3, #12
 80014f0:	6003      	str	r3, [r0, #0]
 80014f2:	e7d6      	b.n	80014a2 <_free_r+0x26>
 80014f4:	6825      	ldr	r5, [r4, #0]
 80014f6:	1961      	adds	r1, r4, r5
 80014f8:	428b      	cmp	r3, r1
 80014fa:	bf04      	itt	eq
 80014fc:	6819      	ldreq	r1, [r3, #0]
 80014fe:	685b      	ldreq	r3, [r3, #4]
 8001500:	6063      	str	r3, [r4, #4]
 8001502:	bf04      	itt	eq
 8001504:	1949      	addeq	r1, r1, r5
 8001506:	6021      	streq	r1, [r4, #0]
 8001508:	6054      	str	r4, [r2, #4]
 800150a:	e7ca      	b.n	80014a2 <_free_r+0x26>
 800150c:	b003      	add	sp, #12
 800150e:	bd30      	pop	{r4, r5, pc}
 8001510:	2400008c 	.word	0x2400008c

08001514 <_printf_common>:
 8001514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001518:	4616      	mov	r6, r2
 800151a:	4699      	mov	r9, r3
 800151c:	688a      	ldr	r2, [r1, #8]
 800151e:	690b      	ldr	r3, [r1, #16]
 8001520:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001524:	4293      	cmp	r3, r2
 8001526:	bfb8      	it	lt
 8001528:	4613      	movlt	r3, r2
 800152a:	6033      	str	r3, [r6, #0]
 800152c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001530:	4607      	mov	r7, r0
 8001532:	460c      	mov	r4, r1
 8001534:	b10a      	cbz	r2, 800153a <_printf_common+0x26>
 8001536:	3301      	adds	r3, #1
 8001538:	6033      	str	r3, [r6, #0]
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	0699      	lsls	r1, r3, #26
 800153e:	bf42      	ittt	mi
 8001540:	6833      	ldrmi	r3, [r6, #0]
 8001542:	3302      	addmi	r3, #2
 8001544:	6033      	strmi	r3, [r6, #0]
 8001546:	6825      	ldr	r5, [r4, #0]
 8001548:	f015 0506 	ands.w	r5, r5, #6
 800154c:	d106      	bne.n	800155c <_printf_common+0x48>
 800154e:	f104 0a19 	add.w	sl, r4, #25
 8001552:	68e3      	ldr	r3, [r4, #12]
 8001554:	6832      	ldr	r2, [r6, #0]
 8001556:	1a9b      	subs	r3, r3, r2
 8001558:	42ab      	cmp	r3, r5
 800155a:	dc26      	bgt.n	80015aa <_printf_common+0x96>
 800155c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001560:	1e13      	subs	r3, r2, #0
 8001562:	6822      	ldr	r2, [r4, #0]
 8001564:	bf18      	it	ne
 8001566:	2301      	movne	r3, #1
 8001568:	0692      	lsls	r2, r2, #26
 800156a:	d42b      	bmi.n	80015c4 <_printf_common+0xb0>
 800156c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001570:	4649      	mov	r1, r9
 8001572:	4638      	mov	r0, r7
 8001574:	47c0      	blx	r8
 8001576:	3001      	adds	r0, #1
 8001578:	d01e      	beq.n	80015b8 <_printf_common+0xa4>
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	6922      	ldr	r2, [r4, #16]
 800157e:	f003 0306 	and.w	r3, r3, #6
 8001582:	2b04      	cmp	r3, #4
 8001584:	bf02      	ittt	eq
 8001586:	68e5      	ldreq	r5, [r4, #12]
 8001588:	6833      	ldreq	r3, [r6, #0]
 800158a:	1aed      	subeq	r5, r5, r3
 800158c:	68a3      	ldr	r3, [r4, #8]
 800158e:	bf0c      	ite	eq
 8001590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001594:	2500      	movne	r5, #0
 8001596:	4293      	cmp	r3, r2
 8001598:	bfc4      	itt	gt
 800159a:	1a9b      	subgt	r3, r3, r2
 800159c:	18ed      	addgt	r5, r5, r3
 800159e:	2600      	movs	r6, #0
 80015a0:	341a      	adds	r4, #26
 80015a2:	42b5      	cmp	r5, r6
 80015a4:	d11a      	bne.n	80015dc <_printf_common+0xc8>
 80015a6:	2000      	movs	r0, #0
 80015a8:	e008      	b.n	80015bc <_printf_common+0xa8>
 80015aa:	2301      	movs	r3, #1
 80015ac:	4652      	mov	r2, sl
 80015ae:	4649      	mov	r1, r9
 80015b0:	4638      	mov	r0, r7
 80015b2:	47c0      	blx	r8
 80015b4:	3001      	adds	r0, #1
 80015b6:	d103      	bne.n	80015c0 <_printf_common+0xac>
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015c0:	3501      	adds	r5, #1
 80015c2:	e7c6      	b.n	8001552 <_printf_common+0x3e>
 80015c4:	18e1      	adds	r1, r4, r3
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	2030      	movs	r0, #48	; 0x30
 80015ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80015ce:	4422      	add	r2, r4
 80015d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80015d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80015d8:	3302      	adds	r3, #2
 80015da:	e7c7      	b.n	800156c <_printf_common+0x58>
 80015dc:	2301      	movs	r3, #1
 80015de:	4622      	mov	r2, r4
 80015e0:	4649      	mov	r1, r9
 80015e2:	4638      	mov	r0, r7
 80015e4:	47c0      	blx	r8
 80015e6:	3001      	adds	r0, #1
 80015e8:	d0e6      	beq.n	80015b8 <_printf_common+0xa4>
 80015ea:	3601      	adds	r6, #1
 80015ec:	e7d9      	b.n	80015a2 <_printf_common+0x8e>
	...

080015f0 <_printf_i>:
 80015f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80015f4:	7e0f      	ldrb	r7, [r1, #24]
 80015f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80015f8:	2f78      	cmp	r7, #120	; 0x78
 80015fa:	4691      	mov	r9, r2
 80015fc:	4680      	mov	r8, r0
 80015fe:	460c      	mov	r4, r1
 8001600:	469a      	mov	sl, r3
 8001602:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001606:	d807      	bhi.n	8001618 <_printf_i+0x28>
 8001608:	2f62      	cmp	r7, #98	; 0x62
 800160a:	d80a      	bhi.n	8001622 <_printf_i+0x32>
 800160c:	2f00      	cmp	r7, #0
 800160e:	f000 80d4 	beq.w	80017ba <_printf_i+0x1ca>
 8001612:	2f58      	cmp	r7, #88	; 0x58
 8001614:	f000 80c0 	beq.w	8001798 <_printf_i+0x1a8>
 8001618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800161c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001620:	e03a      	b.n	8001698 <_printf_i+0xa8>
 8001622:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001626:	2b15      	cmp	r3, #21
 8001628:	d8f6      	bhi.n	8001618 <_printf_i+0x28>
 800162a:	a101      	add	r1, pc, #4	; (adr r1, 8001630 <_printf_i+0x40>)
 800162c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001630:	08001689 	.word	0x08001689
 8001634:	0800169d 	.word	0x0800169d
 8001638:	08001619 	.word	0x08001619
 800163c:	08001619 	.word	0x08001619
 8001640:	08001619 	.word	0x08001619
 8001644:	08001619 	.word	0x08001619
 8001648:	0800169d 	.word	0x0800169d
 800164c:	08001619 	.word	0x08001619
 8001650:	08001619 	.word	0x08001619
 8001654:	08001619 	.word	0x08001619
 8001658:	08001619 	.word	0x08001619
 800165c:	080017a1 	.word	0x080017a1
 8001660:	080016c9 	.word	0x080016c9
 8001664:	0800175b 	.word	0x0800175b
 8001668:	08001619 	.word	0x08001619
 800166c:	08001619 	.word	0x08001619
 8001670:	080017c3 	.word	0x080017c3
 8001674:	08001619 	.word	0x08001619
 8001678:	080016c9 	.word	0x080016c9
 800167c:	08001619 	.word	0x08001619
 8001680:	08001619 	.word	0x08001619
 8001684:	08001763 	.word	0x08001763
 8001688:	682b      	ldr	r3, [r5, #0]
 800168a:	1d1a      	adds	r2, r3, #4
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	602a      	str	r2, [r5, #0]
 8001690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001698:	2301      	movs	r3, #1
 800169a:	e09f      	b.n	80017dc <_printf_i+0x1ec>
 800169c:	6820      	ldr	r0, [r4, #0]
 800169e:	682b      	ldr	r3, [r5, #0]
 80016a0:	0607      	lsls	r7, r0, #24
 80016a2:	f103 0104 	add.w	r1, r3, #4
 80016a6:	6029      	str	r1, [r5, #0]
 80016a8:	d501      	bpl.n	80016ae <_printf_i+0xbe>
 80016aa:	681e      	ldr	r6, [r3, #0]
 80016ac:	e003      	b.n	80016b6 <_printf_i+0xc6>
 80016ae:	0646      	lsls	r6, r0, #25
 80016b0:	d5fb      	bpl.n	80016aa <_printf_i+0xba>
 80016b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80016b6:	2e00      	cmp	r6, #0
 80016b8:	da03      	bge.n	80016c2 <_printf_i+0xd2>
 80016ba:	232d      	movs	r3, #45	; 0x2d
 80016bc:	4276      	negs	r6, r6
 80016be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80016c2:	485a      	ldr	r0, [pc, #360]	; (800182c <_printf_i+0x23c>)
 80016c4:	230a      	movs	r3, #10
 80016c6:	e012      	b.n	80016ee <_printf_i+0xfe>
 80016c8:	682b      	ldr	r3, [r5, #0]
 80016ca:	6820      	ldr	r0, [r4, #0]
 80016cc:	1d19      	adds	r1, r3, #4
 80016ce:	6029      	str	r1, [r5, #0]
 80016d0:	0605      	lsls	r5, r0, #24
 80016d2:	d501      	bpl.n	80016d8 <_printf_i+0xe8>
 80016d4:	681e      	ldr	r6, [r3, #0]
 80016d6:	e002      	b.n	80016de <_printf_i+0xee>
 80016d8:	0641      	lsls	r1, r0, #25
 80016da:	d5fb      	bpl.n	80016d4 <_printf_i+0xe4>
 80016dc:	881e      	ldrh	r6, [r3, #0]
 80016de:	4853      	ldr	r0, [pc, #332]	; (800182c <_printf_i+0x23c>)
 80016e0:	2f6f      	cmp	r7, #111	; 0x6f
 80016e2:	bf0c      	ite	eq
 80016e4:	2308      	moveq	r3, #8
 80016e6:	230a      	movne	r3, #10
 80016e8:	2100      	movs	r1, #0
 80016ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80016ee:	6865      	ldr	r5, [r4, #4]
 80016f0:	60a5      	str	r5, [r4, #8]
 80016f2:	2d00      	cmp	r5, #0
 80016f4:	bfa2      	ittt	ge
 80016f6:	6821      	ldrge	r1, [r4, #0]
 80016f8:	f021 0104 	bicge.w	r1, r1, #4
 80016fc:	6021      	strge	r1, [r4, #0]
 80016fe:	b90e      	cbnz	r6, 8001704 <_printf_i+0x114>
 8001700:	2d00      	cmp	r5, #0
 8001702:	d04b      	beq.n	800179c <_printf_i+0x1ac>
 8001704:	4615      	mov	r5, r2
 8001706:	fbb6 f1f3 	udiv	r1, r6, r3
 800170a:	fb03 6711 	mls	r7, r3, r1, r6
 800170e:	5dc7      	ldrb	r7, [r0, r7]
 8001710:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001714:	4637      	mov	r7, r6
 8001716:	42bb      	cmp	r3, r7
 8001718:	460e      	mov	r6, r1
 800171a:	d9f4      	bls.n	8001706 <_printf_i+0x116>
 800171c:	2b08      	cmp	r3, #8
 800171e:	d10b      	bne.n	8001738 <_printf_i+0x148>
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	07de      	lsls	r6, r3, #31
 8001724:	d508      	bpl.n	8001738 <_printf_i+0x148>
 8001726:	6923      	ldr	r3, [r4, #16]
 8001728:	6861      	ldr	r1, [r4, #4]
 800172a:	4299      	cmp	r1, r3
 800172c:	bfde      	ittt	le
 800172e:	2330      	movle	r3, #48	; 0x30
 8001730:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001734:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001738:	1b52      	subs	r2, r2, r5
 800173a:	6122      	str	r2, [r4, #16]
 800173c:	f8cd a000 	str.w	sl, [sp]
 8001740:	464b      	mov	r3, r9
 8001742:	aa03      	add	r2, sp, #12
 8001744:	4621      	mov	r1, r4
 8001746:	4640      	mov	r0, r8
 8001748:	f7ff fee4 	bl	8001514 <_printf_common>
 800174c:	3001      	adds	r0, #1
 800174e:	d14a      	bne.n	80017e6 <_printf_i+0x1f6>
 8001750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001754:	b004      	add	sp, #16
 8001756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	f043 0320 	orr.w	r3, r3, #32
 8001760:	6023      	str	r3, [r4, #0]
 8001762:	4833      	ldr	r0, [pc, #204]	; (8001830 <_printf_i+0x240>)
 8001764:	2778      	movs	r7, #120	; 0x78
 8001766:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	6829      	ldr	r1, [r5, #0]
 800176e:	061f      	lsls	r7, r3, #24
 8001770:	f851 6b04 	ldr.w	r6, [r1], #4
 8001774:	d402      	bmi.n	800177c <_printf_i+0x18c>
 8001776:	065f      	lsls	r7, r3, #25
 8001778:	bf48      	it	mi
 800177a:	b2b6      	uxthmi	r6, r6
 800177c:	07df      	lsls	r7, r3, #31
 800177e:	bf48      	it	mi
 8001780:	f043 0320 	orrmi.w	r3, r3, #32
 8001784:	6029      	str	r1, [r5, #0]
 8001786:	bf48      	it	mi
 8001788:	6023      	strmi	r3, [r4, #0]
 800178a:	b91e      	cbnz	r6, 8001794 <_printf_i+0x1a4>
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	f023 0320 	bic.w	r3, r3, #32
 8001792:	6023      	str	r3, [r4, #0]
 8001794:	2310      	movs	r3, #16
 8001796:	e7a7      	b.n	80016e8 <_printf_i+0xf8>
 8001798:	4824      	ldr	r0, [pc, #144]	; (800182c <_printf_i+0x23c>)
 800179a:	e7e4      	b.n	8001766 <_printf_i+0x176>
 800179c:	4615      	mov	r5, r2
 800179e:	e7bd      	b.n	800171c <_printf_i+0x12c>
 80017a0:	682b      	ldr	r3, [r5, #0]
 80017a2:	6826      	ldr	r6, [r4, #0]
 80017a4:	6961      	ldr	r1, [r4, #20]
 80017a6:	1d18      	adds	r0, r3, #4
 80017a8:	6028      	str	r0, [r5, #0]
 80017aa:	0635      	lsls	r5, r6, #24
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	d501      	bpl.n	80017b4 <_printf_i+0x1c4>
 80017b0:	6019      	str	r1, [r3, #0]
 80017b2:	e002      	b.n	80017ba <_printf_i+0x1ca>
 80017b4:	0670      	lsls	r0, r6, #25
 80017b6:	d5fb      	bpl.n	80017b0 <_printf_i+0x1c0>
 80017b8:	8019      	strh	r1, [r3, #0]
 80017ba:	2300      	movs	r3, #0
 80017bc:	6123      	str	r3, [r4, #16]
 80017be:	4615      	mov	r5, r2
 80017c0:	e7bc      	b.n	800173c <_printf_i+0x14c>
 80017c2:	682b      	ldr	r3, [r5, #0]
 80017c4:	1d1a      	adds	r2, r3, #4
 80017c6:	602a      	str	r2, [r5, #0]
 80017c8:	681d      	ldr	r5, [r3, #0]
 80017ca:	6862      	ldr	r2, [r4, #4]
 80017cc:	2100      	movs	r1, #0
 80017ce:	4628      	mov	r0, r5
 80017d0:	f7fe fd66 	bl	80002a0 <memchr>
 80017d4:	b108      	cbz	r0, 80017da <_printf_i+0x1ea>
 80017d6:	1b40      	subs	r0, r0, r5
 80017d8:	6060      	str	r0, [r4, #4]
 80017da:	6863      	ldr	r3, [r4, #4]
 80017dc:	6123      	str	r3, [r4, #16]
 80017de:	2300      	movs	r3, #0
 80017e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80017e4:	e7aa      	b.n	800173c <_printf_i+0x14c>
 80017e6:	6923      	ldr	r3, [r4, #16]
 80017e8:	462a      	mov	r2, r5
 80017ea:	4649      	mov	r1, r9
 80017ec:	4640      	mov	r0, r8
 80017ee:	47d0      	blx	sl
 80017f0:	3001      	adds	r0, #1
 80017f2:	d0ad      	beq.n	8001750 <_printf_i+0x160>
 80017f4:	6823      	ldr	r3, [r4, #0]
 80017f6:	079b      	lsls	r3, r3, #30
 80017f8:	d413      	bmi.n	8001822 <_printf_i+0x232>
 80017fa:	68e0      	ldr	r0, [r4, #12]
 80017fc:	9b03      	ldr	r3, [sp, #12]
 80017fe:	4298      	cmp	r0, r3
 8001800:	bfb8      	it	lt
 8001802:	4618      	movlt	r0, r3
 8001804:	e7a6      	b.n	8001754 <_printf_i+0x164>
 8001806:	2301      	movs	r3, #1
 8001808:	4632      	mov	r2, r6
 800180a:	4649      	mov	r1, r9
 800180c:	4640      	mov	r0, r8
 800180e:	47d0      	blx	sl
 8001810:	3001      	adds	r0, #1
 8001812:	d09d      	beq.n	8001750 <_printf_i+0x160>
 8001814:	3501      	adds	r5, #1
 8001816:	68e3      	ldr	r3, [r4, #12]
 8001818:	9903      	ldr	r1, [sp, #12]
 800181a:	1a5b      	subs	r3, r3, r1
 800181c:	42ab      	cmp	r3, r5
 800181e:	dcf2      	bgt.n	8001806 <_printf_i+0x216>
 8001820:	e7eb      	b.n	80017fa <_printf_i+0x20a>
 8001822:	2500      	movs	r5, #0
 8001824:	f104 0619 	add.w	r6, r4, #25
 8001828:	e7f5      	b.n	8001816 <_printf_i+0x226>
 800182a:	bf00      	nop
 800182c:	08001951 	.word	0x08001951
 8001830:	08001962 	.word	0x08001962

08001834 <_read_r>:
 8001834:	b538      	push	{r3, r4, r5, lr}
 8001836:	4d07      	ldr	r5, [pc, #28]	; (8001854 <_read_r+0x20>)
 8001838:	4604      	mov	r4, r0
 800183a:	4608      	mov	r0, r1
 800183c:	4611      	mov	r1, r2
 800183e:	2200      	movs	r2, #0
 8001840:	602a      	str	r2, [r5, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	f7fe fed2 	bl	80005ec <_read>
 8001848:	1c43      	adds	r3, r0, #1
 800184a:	d102      	bne.n	8001852 <_read_r+0x1e>
 800184c:	682b      	ldr	r3, [r5, #0]
 800184e:	b103      	cbz	r3, 8001852 <_read_r+0x1e>
 8001850:	6023      	str	r3, [r4, #0]
 8001852:	bd38      	pop	{r3, r4, r5, pc}
 8001854:	24000094 	.word	0x24000094

08001858 <_fstat_r>:
 8001858:	b538      	push	{r3, r4, r5, lr}
 800185a:	4d07      	ldr	r5, [pc, #28]	; (8001878 <_fstat_r+0x20>)
 800185c:	2300      	movs	r3, #0
 800185e:	4604      	mov	r4, r0
 8001860:	4608      	mov	r0, r1
 8001862:	4611      	mov	r1, r2
 8001864:	602b      	str	r3, [r5, #0]
 8001866:	f7fe ff06 	bl	8000676 <_fstat>
 800186a:	1c43      	adds	r3, r0, #1
 800186c:	d102      	bne.n	8001874 <_fstat_r+0x1c>
 800186e:	682b      	ldr	r3, [r5, #0]
 8001870:	b103      	cbz	r3, 8001874 <_fstat_r+0x1c>
 8001872:	6023      	str	r3, [r4, #0]
 8001874:	bd38      	pop	{r3, r4, r5, pc}
 8001876:	bf00      	nop
 8001878:	24000094 	.word	0x24000094

0800187c <_isatty_r>:
 800187c:	b538      	push	{r3, r4, r5, lr}
 800187e:	4d06      	ldr	r5, [pc, #24]	; (8001898 <_isatty_r+0x1c>)
 8001880:	2300      	movs	r3, #0
 8001882:	4604      	mov	r4, r0
 8001884:	4608      	mov	r0, r1
 8001886:	602b      	str	r3, [r5, #0]
 8001888:	f7fe ff05 	bl	8000696 <_isatty>
 800188c:	1c43      	adds	r3, r0, #1
 800188e:	d102      	bne.n	8001896 <_isatty_r+0x1a>
 8001890:	682b      	ldr	r3, [r5, #0]
 8001892:	b103      	cbz	r3, 8001896 <_isatty_r+0x1a>
 8001894:	6023      	str	r3, [r4, #0]
 8001896:	bd38      	pop	{r3, r4, r5, pc}
 8001898:	24000094 	.word	0x24000094

0800189c <_init>:
 800189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189e:	bf00      	nop
 80018a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018a2:	bc08      	pop	{r3}
 80018a4:	469e      	mov	lr, r3
 80018a6:	4770      	bx	lr

080018a8 <_fini>:
 80018a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018aa:	bf00      	nop
 80018ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ae:	bc08      	pop	{r3}
 80018b0:	469e      	mov	lr, r3
 80018b2:	4770      	bx	lr
