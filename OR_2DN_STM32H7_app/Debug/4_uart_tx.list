
4_uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000340  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005d8  080005e0  000105e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080005d8  080005d8  000105d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080005dc  080005dc  000105dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  24000000  24000000  000105e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  24000000  080005e0  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400001c  080005e0  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000105e0  2**0
                  CONTENTS, READONLY
  9 .debug_info   000007c1  00000000  00000000  0001060e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000287  00000000  00000000  00010dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000098  00000000  00000000  00011058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000065  00000000  00000000  000110f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002845a  00000000  00000000  00011155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000005b6  00000000  00000000  000395af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e76ba  00000000  00000000  00039b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      0000003c  00000000  00000000  0012121f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000128  00000000  00000000  0012125c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000067  00000000  00000000  00121384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00000044  00000000  00000000  001213eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000000 	.word	0x24000000
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080005c0 	.word	0x080005c0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000004 	.word	0x24000004
 80002d4:	080005c0 	.word	0x080005c0

080002d8 <main>:
static int32_t compute_uart_baudrate(uint32_t periph_clock, uint32_t baudrate);
void uart3_write(int ch);
int  uart3_read(void);

int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
	RCC->AHB4ENR |= GPIOJEN;
 80002de:	4b10      	ldr	r3, [pc, #64]	; (8000320 <main+0x48>)
 80002e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002e4:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <main+0x48>)
 80002e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	GPIOJ->MODER |=  (1U << 4);
 80002ee:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <main+0x4c>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a0c      	ldr	r2, [pc, #48]	; (8000324 <main+0x4c>)
 80002f4:	f043 0310 	orr.w	r3, r3, #16
 80002f8:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER &= ~(1U << 5);
 80002fa:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <main+0x4c>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a09      	ldr	r2, [pc, #36]	; (8000324 <main+0x4c>)
 8000300:	f023 0320 	bic.w	r3, r3, #32
 8000304:	6013      	str	r3, [r2, #0]

	uart3_tx_init();
 8000306:	f000 f80f 	bl	8000328 <uart3_tx_init>
	uart3_rx_init();
 800030a:	f000 f865 	bl	80003d8 <uart3_rx_init>

	while(1)
	{
		int ch = uart3_read();
 800030e:	f000 f8f5 	bl	80004fc <uart3_read>
 8000312:	6078      	str	r0, [r7, #4]
		uart3_write(ch);
 8000314:	6878      	ldr	r0, [r7, #4]
 8000316:	f000 f8d9 	bl	80004cc <uart3_write>
	{
 800031a:	bf00      	nop
 800031c:	e7f7      	b.n	800030e <main+0x36>
 800031e:	bf00      	nop
 8000320:	58024400 	.word	0x58024400
 8000324:	58022400 	.word	0x58022400

08000328 <uart3_tx_init>:
	}
}

void uart3_tx_init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	/* configure uart gpio pin */
	// enable clock access to gpiob
	RCC->AHB4ENR |= GPIOBEN;
 800032c:	4b26      	ldr	r3, [pc, #152]	; (80003c8 <uart3_tx_init+0xa0>)
 800032e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000332:	4a25      	ldr	r2, [pc, #148]	; (80003c8 <uart3_tx_init+0xa0>)
 8000334:	f043 0302 	orr.w	r3, r3, #2
 8000338:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// set PB10 to alternate function mode
	GPIOB->MODER &= ~(1u << 20);
 800033c:	4b23      	ldr	r3, [pc, #140]	; (80003cc <uart3_tx_init+0xa4>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a22      	ldr	r2, [pc, #136]	; (80003cc <uart3_tx_init+0xa4>)
 8000342:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000346:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1u << 21);
 8000348:	4b20      	ldr	r3, [pc, #128]	; (80003cc <uart3_tx_init+0xa4>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a1f      	ldr	r2, [pc, #124]	; (80003cc <uart3_tx_init+0xa4>)
 800034e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000352:	6013      	str	r3, [r2, #0]

	// set PB10 to alternate function type to UART_TX (AF7)
	GPIOB->AFR[1] |= (1u << 8);
 8000354:	4b1d      	ldr	r3, [pc, #116]	; (80003cc <uart3_tx_init+0xa4>)
 8000356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000358:	4a1c      	ldr	r2, [pc, #112]	; (80003cc <uart3_tx_init+0xa4>)
 800035a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800035e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1u << 9);
 8000360:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <uart3_tx_init+0xa4>)
 8000362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000364:	4a19      	ldr	r2, [pc, #100]	; (80003cc <uart3_tx_init+0xa4>)
 8000366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800036a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1u << 10);
 800036c:	4b17      	ldr	r3, [pc, #92]	; (80003cc <uart3_tx_init+0xa4>)
 800036e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000370:	4a16      	ldr	r2, [pc, #88]	; (80003cc <uart3_tx_init+0xa4>)
 8000372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000376:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1u << 11);
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <uart3_tx_init+0xa4>)
 800037a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800037c:	4a13      	ldr	r2, [pc, #76]	; (80003cc <uart3_tx_init+0xa4>)
 800037e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000382:	6253      	str	r3, [r2, #36]	; 0x24


	/* Configure the UART module */
	// enable clock access to uart3
	RCC->APB1LENR |= UART3EN;
 8000384:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <uart3_tx_init+0xa0>)
 8000386:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800038a:	4a0f      	ldr	r2, [pc, #60]	; (80003c8 <uart3_tx_init+0xa0>)
 800038c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000390:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

	// when configuring usart it should be disabled
	USART3->CR1 &= ~(CR1_UE);
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <uart3_tx_init+0xa8>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a0d      	ldr	r2, [pc, #52]	; (80003d0 <uart3_tx_init+0xa8>)
 800039a:	f023 0301 	bic.w	r3, r3, #1
 800039e:	6013      	str	r3, [r2, #0]

	// configure baudrate
	uart_set_baudrate(USART3, APB1_CLK, UART_BAUDRATE);
 80003a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003a4:	490b      	ldr	r1, [pc, #44]	; (80003d4 <uart3_tx_init+0xac>)
 80003a6:	480a      	ldr	r0, [pc, #40]	; (80003d0 <uart3_tx_init+0xa8>)
 80003a8:	f000 f86e 	bl	8000488 <uart_set_baudrate>

	// configure transfer direction
	USART3->CR1 |= CR1_TE;
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <uart3_tx_init+0xa8>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a07      	ldr	r2, [pc, #28]	; (80003d0 <uart3_tx_init+0xa8>)
 80003b2:	f043 0308 	orr.w	r3, r3, #8
 80003b6:	6013      	str	r3, [r2, #0]

	// enable uart module
	USART3->CR1 |= CR1_UE;
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <uart3_tx_init+0xa8>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a04      	ldr	r2, [pc, #16]	; (80003d0 <uart3_tx_init+0xa8>)
 80003be:	f043 0301 	orr.w	r3, r3, #1
 80003c2:	6013      	str	r3, [r2, #0]
}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	58024400 	.word	0x58024400
 80003cc:	58020400 	.word	0x58020400
 80003d0:	40004800 	.word	0x40004800
 80003d4:	03d09000 	.word	0x03d09000

080003d8 <uart3_rx_init>:

void uart3_rx_init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	/* configure uart gpio pin */
	// enable clock access to gpiob
	RCC->AHB4ENR |= GPIOBEN;
 80003dc:	4b26      	ldr	r3, [pc, #152]	; (8000478 <uart3_rx_init+0xa0>)
 80003de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003e2:	4a25      	ldr	r2, [pc, #148]	; (8000478 <uart3_rx_init+0xa0>)
 80003e4:	f043 0302 	orr.w	r3, r3, #2
 80003e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// set PB11 to alternate function mode
	GPIOB->MODER &= ~(1u << 22);
 80003ec:	4b23      	ldr	r3, [pc, #140]	; (800047c <uart3_rx_init+0xa4>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a22      	ldr	r2, [pc, #136]	; (800047c <uart3_rx_init+0xa4>)
 80003f2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80003f6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1u << 23);
 80003f8:	4b20      	ldr	r3, [pc, #128]	; (800047c <uart3_rx_init+0xa4>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a1f      	ldr	r2, [pc, #124]	; (800047c <uart3_rx_init+0xa4>)
 80003fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000402:	6013      	str	r3, [r2, #0]

	// set PB11 to alternate function type to UART_TX (AF7)
	GPIOB->AFR[1] |= (1u << 12);
 8000404:	4b1d      	ldr	r3, [pc, #116]	; (800047c <uart3_rx_init+0xa4>)
 8000406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000408:	4a1c      	ldr	r2, [pc, #112]	; (800047c <uart3_rx_init+0xa4>)
 800040a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800040e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1u << 13);
 8000410:	4b1a      	ldr	r3, [pc, #104]	; (800047c <uart3_rx_init+0xa4>)
 8000412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000414:	4a19      	ldr	r2, [pc, #100]	; (800047c <uart3_rx_init+0xa4>)
 8000416:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800041a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1u << 14);
 800041c:	4b17      	ldr	r3, [pc, #92]	; (800047c <uart3_rx_init+0xa4>)
 800041e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000420:	4a16      	ldr	r2, [pc, #88]	; (800047c <uart3_rx_init+0xa4>)
 8000422:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000426:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1u << 15);
 8000428:	4b14      	ldr	r3, [pc, #80]	; (800047c <uart3_rx_init+0xa4>)
 800042a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800042c:	4a13      	ldr	r2, [pc, #76]	; (800047c <uart3_rx_init+0xa4>)
 800042e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000432:	6253      	str	r3, [r2, #36]	; 0x24


	/* Configure the UART module */
	// enable clock access to uart3
	RCC->APB1LENR |= UART3EN;
 8000434:	4b10      	ldr	r3, [pc, #64]	; (8000478 <uart3_rx_init+0xa0>)
 8000436:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800043a:	4a0f      	ldr	r2, [pc, #60]	; (8000478 <uart3_rx_init+0xa0>)
 800043c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000440:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

	// when configuring usart it should be disabled
	USART3->CR1 &= ~(CR1_UE);
 8000444:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <uart3_rx_init+0xa8>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a0d      	ldr	r2, [pc, #52]	; (8000480 <uart3_rx_init+0xa8>)
 800044a:	f023 0301 	bic.w	r3, r3, #1
 800044e:	6013      	str	r3, [r2, #0]

	// configure baudrate
	uart_set_baudrate(USART3, APB1_CLK, UART_BAUDRATE);
 8000450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000454:	490b      	ldr	r1, [pc, #44]	; (8000484 <uart3_rx_init+0xac>)
 8000456:	480a      	ldr	r0, [pc, #40]	; (8000480 <uart3_rx_init+0xa8>)
 8000458:	f000 f816 	bl	8000488 <uart_set_baudrate>

	// configure transfer direction
	USART3->CR1 |= CR1_RE;
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <uart3_rx_init+0xa8>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a07      	ldr	r2, [pc, #28]	; (8000480 <uart3_rx_init+0xa8>)
 8000462:	f043 0304 	orr.w	r3, r3, #4
 8000466:	6013      	str	r3, [r2, #0]

	// enable uart module
	USART3->CR1 |= CR1_UE;
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <uart3_rx_init+0xa8>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a04      	ldr	r2, [pc, #16]	; (8000480 <uart3_rx_init+0xa8>)
 800046e:	f043 0301 	orr.w	r3, r3, #1
 8000472:	6013      	str	r3, [r2, #0]
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	58024400 	.word	0x58024400
 800047c:	58020400 	.word	0x58020400
 8000480:	40004800 	.word	0x40004800
 8000484:	03d09000 	.word	0x03d09000

08000488 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periph_clock, uint32_t baudrate)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	60f8      	str	r0, [r7, #12]
 8000490:	60b9      	str	r1, [r7, #8]
 8000492:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_baudrate(periph_clock, baudrate);
 8000494:	6879      	ldr	r1, [r7, #4]
 8000496:	68b8      	ldr	r0, [r7, #8]
 8000498:	f000 f808 	bl	80004ac <compute_uart_baudrate>
 800049c:	4603      	mov	r3, r0
 800049e:	461a      	mov	r2, r3
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	60da      	str	r2, [r3, #12]
}
 80004a4:	bf00      	nop
 80004a6:	3710      	adds	r7, #16
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <compute_uart_baudrate>:

static int32_t compute_uart_baudrate(uint32_t periph_clock, uint32_t baudrate)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
	return (periph_clock/baudrate);
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80004be:	4618      	mov	r0, r3
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
	...

080004cc <uart3_write>:

void uart3_write(int ch)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	// make sure transmit data register is empty
	while( !(USART3->ISR & SR_TXE) ) {}
 80004d4:	bf00      	nop
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <uart3_write+0x2c>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d0f9      	beq.n	80004d6 <uart3_write+0xa>

	// write to transmit data register
	USART3->TDR = (ch & 0xFF);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <uart3_write+0x2c>)
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40004800 	.word	0x40004800

080004fc <uart3_read>:

int uart3_read(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
	// make sure data is ready to be read
	while( !(USART3->ISR & SR_RXE) ) {}
 8000500:	bf00      	nop
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <uart3_read+0x24>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	f003 0320 	and.w	r3, r3, #32
 800050a:	2b00      	cmp	r3, #0
 800050c:	d0f9      	beq.n	8000502 <uart3_read+0x6>

	// read the data from the register
	return (USART3->RDR & 0xFF);
 800050e:	4b04      	ldr	r3, [pc, #16]	; (8000520 <uart3_read+0x24>)
 8000510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000512:	b2db      	uxtb	r3, r3
}
 8000514:	4618      	mov	r0, r3
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40004800 	.word	0x40004800

08000524 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000526:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000528:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800052c:	480c      	ldr	r0, [pc, #48]	; (8000560 <LoopForever+0x6>)
  ldr r1, =_edata
 800052e:	490d      	ldr	r1, [pc, #52]	; (8000564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000530:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <LoopForever+0xe>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000534:	e002      	b.n	800053c <LoopCopyDataInit>

08000536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053a:	3304      	adds	r3, #4

0800053c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800053c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000540:	d3f9      	bcc.n	8000536 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000542:	4a0a      	ldr	r2, [pc, #40]	; (800056c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000544:	4c0a      	ldr	r4, [pc, #40]	; (8000570 <LoopForever+0x16>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000548:	e001      	b.n	800054e <LoopFillZerobss>

0800054a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800054c:	3204      	adds	r2, #4

0800054e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000550:	d3fb      	bcc.n	800054a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000552:	f000 f811 	bl	8000578 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000556:	f7ff febf 	bl	80002d8 <main>

0800055a <LoopForever>:

LoopForever:
    b LoopForever
 800055a:	e7fe      	b.n	800055a <LoopForever>
  ldr   r0, =_estack
 800055c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000560:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000564:	24000000 	.word	0x24000000
  ldr r2, =_sidata
 8000568:	080005e0 	.word	0x080005e0
  ldr r2, =_sbss
 800056c:	24000000 	.word	0x24000000
  ldr r4, =_ebss
 8000570:	2400001c 	.word	0x2400001c

08000574 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000574:	e7fe      	b.n	8000574 <ADC1_2_IRQHandler>
	...

08000578 <__libc_init_array>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	4d0d      	ldr	r5, [pc, #52]	; (80005b0 <__libc_init_array+0x38>)
 800057c:	4c0d      	ldr	r4, [pc, #52]	; (80005b4 <__libc_init_array+0x3c>)
 800057e:	1b64      	subs	r4, r4, r5
 8000580:	10a4      	asrs	r4, r4, #2
 8000582:	2600      	movs	r6, #0
 8000584:	42a6      	cmp	r6, r4
 8000586:	d109      	bne.n	800059c <__libc_init_array+0x24>
 8000588:	4d0b      	ldr	r5, [pc, #44]	; (80005b8 <__libc_init_array+0x40>)
 800058a:	4c0c      	ldr	r4, [pc, #48]	; (80005bc <__libc_init_array+0x44>)
 800058c:	f000 f818 	bl	80005c0 <_init>
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	10a4      	asrs	r4, r4, #2
 8000594:	2600      	movs	r6, #0
 8000596:	42a6      	cmp	r6, r4
 8000598:	d105      	bne.n	80005a6 <__libc_init_array+0x2e>
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f855 3b04 	ldr.w	r3, [r5], #4
 80005a0:	4798      	blx	r3
 80005a2:	3601      	adds	r6, #1
 80005a4:	e7ee      	b.n	8000584 <__libc_init_array+0xc>
 80005a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005aa:	4798      	blx	r3
 80005ac:	3601      	adds	r6, #1
 80005ae:	e7f2      	b.n	8000596 <__libc_init_array+0x1e>
 80005b0:	080005d8 	.word	0x080005d8
 80005b4:	080005d8 	.word	0x080005d8
 80005b8:	080005d8 	.word	0x080005d8
 80005bc:	080005dc 	.word	0x080005dc

080005c0 <_init>:
 80005c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c2:	bf00      	nop
 80005c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c6:	bc08      	pop	{r3}
 80005c8:	469e      	mov	lr, r3
 80005ca:	4770      	bx	lr

080005cc <_fini>:
 80005cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ce:	bf00      	nop
 80005d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005d2:	bc08      	pop	{r3}
 80005d4:	469e      	mov	lr, r3
 80005d6:	4770      	bx	lr
