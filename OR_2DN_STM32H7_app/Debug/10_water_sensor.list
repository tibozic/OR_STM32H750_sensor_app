
10_water_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001458  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080016f8  080016f8  000116f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080017bc  080017bc  000117bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080017c0  080017c0  000117c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  24000000  080017c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000030  24000064  08001828  00020064  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000094  08001828  00020094  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f9bb  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000038a1  00000000  00000000  0002fa4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000005e8  00000000  00000000  000332f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000486  00000000  00000000  000338d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002a6bd  00000000  00000000  00033d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00005ac6  00000000  00000000  0005e41b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000eecf4  00000000  00000000  00063ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      0000003c  00000000  00000000  00152bd5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000ca8  00000000  00000000  00152c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 000000b9  00000000  00000000  001538bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000018b1  00000000  00000000  00153975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__do_global_dtors_aux>:
 8000340:	b510      	push	{r4, lr}
 8000342:	4c05      	ldr	r4, [pc, #20]	; (8000358 <__do_global_dtors_aux+0x18>)
 8000344:	7823      	ldrb	r3, [r4, #0]
 8000346:	b933      	cbnz	r3, 8000356 <__do_global_dtors_aux+0x16>
 8000348:	4b04      	ldr	r3, [pc, #16]	; (800035c <__do_global_dtors_aux+0x1c>)
 800034a:	b113      	cbz	r3, 8000352 <__do_global_dtors_aux+0x12>
 800034c:	4804      	ldr	r0, [pc, #16]	; (8000360 <__do_global_dtors_aux+0x20>)
 800034e:	f3af 8000 	nop.w
 8000352:	2301      	movs	r3, #1
 8000354:	7023      	strb	r3, [r4, #0]
 8000356:	bd10      	pop	{r4, pc}
 8000358:	24000064 	.word	0x24000064
 800035c:	00000000 	.word	0x00000000
 8000360:	080016e0 	.word	0x080016e0

08000364 <frame_dummy>:
 8000364:	b508      	push	{r3, lr}
 8000366:	4b03      	ldr	r3, [pc, #12]	; (8000374 <frame_dummy+0x10>)
 8000368:	b11b      	cbz	r3, 8000372 <frame_dummy+0xe>
 800036a:	4903      	ldr	r1, [pc, #12]	; (8000378 <frame_dummy+0x14>)
 800036c:	4803      	ldr	r0, [pc, #12]	; (800037c <frame_dummy+0x18>)
 800036e:	f3af 8000 	nop.w
 8000372:	bd08      	pop	{r3, pc}
 8000374:	00000000 	.word	0x00000000
 8000378:	24000068 	.word	0x24000068
 800037c:	080016e0 	.word	0x080016e0

08000380 <main>:

#define PIN8		(1u << 8)
#define WATER_PIN	PIN8

int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	// connect clock to PD and PJ
	RCC->AHB4ENR |= (GPIOEEN | GPIOJEN | GPIOIEN);
 8000384:	4b24      	ldr	r3, [pc, #144]	; (8000418 <main+0x98>)
 8000386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800038a:	4a23      	ldr	r2, [pc, #140]	; (8000418 <main+0x98>)
 800038c:	f443 7344 	orr.w	r3, r3, #784	; 0x310
 8000390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// set PE3 (external LED) to output mode (01)
	GPIOE->MODER |=  (1u << 6);
 8000394:	4b21      	ldr	r3, [pc, #132]	; (800041c <main+0x9c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a20      	ldr	r2, [pc, #128]	; (800041c <main+0x9c>)
 800039a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800039e:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(1u << 7);
 80003a0:	4b1e      	ldr	r3, [pc, #120]	; (800041c <main+0x9c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a1d      	ldr	r2, [pc, #116]	; (800041c <main+0x9c>)
 80003a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003aa:	6013      	str	r3, [r2, #0]

	// set PJ2 (internal LED) to output mode (01)
	GPIOJ->MODER |=  (1u << 4);
 80003ac:	4b1c      	ldr	r3, [pc, #112]	; (8000420 <main+0xa0>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a1b      	ldr	r2, [pc, #108]	; (8000420 <main+0xa0>)
 80003b2:	f043 0310 	orr.w	r3, r3, #16
 80003b6:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER &= ~(1u << 5);
 80003b8:	4b19      	ldr	r3, [pc, #100]	; (8000420 <main+0xa0>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a18      	ldr	r2, [pc, #96]	; (8000420 <main+0xa0>)
 80003be:	f023 0320 	bic.w	r3, r3, #32
 80003c2:	6013      	str	r3, [r2, #0]

	// set PI8 (water sensor) as input (00)
	GPIOI->MODER &= ~(1u << 16);
 80003c4:	4b17      	ldr	r3, [pc, #92]	; (8000424 <main+0xa4>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a16      	ldr	r2, [pc, #88]	; (8000424 <main+0xa4>)
 80003ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003ce:	6013      	str	r3, [r2, #0]
	GPIOI->MODER &= ~(1u << 17);
 80003d0:	4b14      	ldr	r3, [pc, #80]	; (8000424 <main+0xa4>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a13      	ldr	r2, [pc, #76]	; (8000424 <main+0xa4>)
 80003d6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80003da:	6013      	str	r3, [r2, #0]

	uart3_tx_init();
 80003dc:	f000 f90a 	bl	80005f4 <uart3_tx_init>
	systick_init();
 80003e0:	f000 f8ca 	bl	8000578 <systick_init>

	while(1)
	{

		if( (GPIOI->IDR & WATER_PIN) )
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <main+0xa4>)
 80003e6:	691b      	ldr	r3, [r3, #16]
 80003e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d006      	beq.n	80003fe <main+0x7e>
		{
			printf("Water IS detected\n\r");
 80003f0:	480d      	ldr	r0, [pc, #52]	; (8000428 <main+0xa8>)
 80003f2:	f000 f9ed 	bl	80007d0 <iprintf>

			// enable external LED (on pin 0)
			GPIOE->BSRR = (1u << 3);
 80003f6:	4b09      	ldr	r3, [pc, #36]	; (800041c <main+0x9c>)
 80003f8:	2208      	movs	r2, #8
 80003fa:	619a      	str	r2, [r3, #24]
 80003fc:	e006      	b.n	800040c <main+0x8c>
		}
		else
		{
			printf("Water IS NOT detected\n\r");
 80003fe:	480b      	ldr	r0, [pc, #44]	; (800042c <main+0xac>)
 8000400:	f000 f9e6 	bl	80007d0 <iprintf>

			// disable external LED
			GPIOE->BSRR = (1u << 19);
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <main+0x9c>)
 8000406:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800040a:	619a      	str	r2, [r3, #24]
		}

		//printf("Both LEDs are ON\n\r");

		systick_delay_ms(1000);
 800040c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000410:	f000 f8c6 	bl	80005a0 <systick_delay_ms>
		if( (GPIOI->IDR & WATER_PIN) )
 8000414:	e7e6      	b.n	80003e4 <main+0x64>
 8000416:	bf00      	nop
 8000418:	58024400 	.word	0x58024400
 800041c:	58021000 	.word	0x58021000
 8000420:	58022400 	.word	0x58022400
 8000424:	58022000 	.word	0x58022000
 8000428:	080016f8 	.word	0x080016f8
 800042c:	0800170c 	.word	0x0800170c

08000430 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]
 8000440:	e00a      	b.n	8000458 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000442:	f3af 8000 	nop.w
 8000446:	4601      	mov	r1, r0
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	1c5a      	adds	r2, r3, #1
 800044c:	60ba      	str	r2, [r7, #8]
 800044e:	b2ca      	uxtb	r2, r1
 8000450:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	3301      	adds	r3, #1
 8000456:	617b      	str	r3, [r7, #20]
 8000458:	697a      	ldr	r2, [r7, #20]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	429a      	cmp	r2, r3
 800045e:	dbf0      	blt.n	8000442 <_read+0x12>
	}

return len;
 8000460:	687b      	ldr	r3, [r7, #4]
}
 8000462:	4618      	mov	r0, r3
 8000464:	3718      	adds	r7, #24
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}

0800046a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800046a:	b580      	push	{r7, lr}
 800046c:	b086      	sub	sp, #24
 800046e:	af00      	add	r7, sp, #0
 8000470:	60f8      	str	r0, [r7, #12]
 8000472:	60b9      	str	r1, [r7, #8]
 8000474:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
 800047a:	e009      	b.n	8000490 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	1c5a      	adds	r2, r3, #1
 8000480:	60ba      	str	r2, [r7, #8]
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	4618      	mov	r0, r3
 8000486:	f000 f8a9 	bl	80005dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	3301      	adds	r3, #1
 800048e:	617b      	str	r3, [r7, #20]
 8000490:	697a      	ldr	r2, [r7, #20]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	429a      	cmp	r2, r3
 8000496:	dbf1      	blt.n	800047c <_write+0x12>
	}
	return len;
 8000498:	687b      	ldr	r3, [r7, #4]
}
 800049a:	4618      	mov	r0, r3
 800049c:	3718      	adds	r7, #24
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <_close>:

int _close(int file)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b083      	sub	sp, #12
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
	return -1;
 80004aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr

080004ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004ba:	b480      	push	{r7}
 80004bc:	b083      	sub	sp, #12
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
 80004c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004ca:	605a      	str	r2, [r3, #4]
	return 0;
 80004cc:	2300      	movs	r3, #0
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr

080004da <_isatty>:

int _isatty(int file)
{
 80004da:	b480      	push	{r7}
 80004dc:	b083      	sub	sp, #12
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
	return 1;
 80004e2:	2301      	movs	r3, #1
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
	return 0;
 80004fc:	2300      	movs	r3, #0
}
 80004fe:	4618      	mov	r0, r3
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
	...

0800050c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000514:	4a14      	ldr	r2, [pc, #80]	; (8000568 <_sbrk+0x5c>)
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <_sbrk+0x60>)
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000520:	4b13      	ldr	r3, [pc, #76]	; (8000570 <_sbrk+0x64>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d102      	bne.n	800052e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <_sbrk+0x64>)
 800052a:	4a12      	ldr	r2, [pc, #72]	; (8000574 <_sbrk+0x68>)
 800052c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <_sbrk+0x64>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4413      	add	r3, r2
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	429a      	cmp	r2, r3
 800053a:	d207      	bcs.n	800054c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800053c:	f000 f916 	bl	800076c <__errno>
 8000540:	4603      	mov	r3, r0
 8000542:	220c      	movs	r2, #12
 8000544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800054a:	e009      	b.n	8000560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <_sbrk+0x64>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <_sbrk+0x64>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	4a05      	ldr	r2, [pc, #20]	; (8000570 <_sbrk+0x64>)
 800055c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800055e:	68fb      	ldr	r3, [r7, #12]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3718      	adds	r7, #24
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	24080000 	.word	0x24080000
 800056c:	00000400 	.word	0x00000400
 8000570:	24000080 	.word	0x24000080
 8000574:	24000098 	.word	0x24000098

08000578 <systick_init>:
#define CTRL_ENABLE			(1u << 0)
#define CTRL_CLKSRC			(1u << 2)
#define CTRL_COUNTFLG		(1u << 16)

void systick_init(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	// Reload with number of clocks per ms
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <systick_init+0x24>)
 800057e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000582:	605a      	str	r2, [r3, #4]

	// clear systick current value register
	SysTick->VAL = 0;
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <systick_init+0x24>)
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]

	// enable systick and select internal clock source
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 800058a:	4b04      	ldr	r3, [pc, #16]	; (800059c <systick_init+0x24>)
 800058c:	2205      	movs	r2, #5
 800058e:	601a      	str	r2, [r3, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	e000e010 	.word	0xe000e010

080005a0 <systick_delay_ms>:
{
	SysTick->CTRL = 0;
}

void systick_delay_ms(int delay)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < delay; ++i)
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	e009      	b.n	80005c2 <systick_delay_ms+0x22>
	{
		// wait until count flag is set
		while(!(SysTick->CTRL & CTRL_COUNTFLG)) {}
 80005ae:	bf00      	nop
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <systick_delay_ms+0x38>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0f9      	beq.n	80005b0 <systick_delay_ms+0x10>
	for(int i = 0; i < delay; ++i)
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	3301      	adds	r3, #1
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	dbf1      	blt.n	80005ae <systick_delay_ms+0xe>
	}
}
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	e000e010 	.word	0xe000e010

080005dc <__io_putchar>:
static int32_t compute_uart_baudrate(uint32_t periph_clock, uint32_t baudrate);
void uart3_write(int ch);
int  uart3_read(void);

int __io_putchar(int ch)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	uart3_write(ch);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f000 f87f 	bl	80006e8 <uart3_write>
	return ch;
 80005ea:	687b      	ldr	r3, [r7, #4]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <uart3_tx_init>:

void uart3_tx_init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	/* configure uart gpio pin */
	// enable clock access to gpiob
	RCC->AHB4ENR |= GPIOBEN;
 80005f8:	4b26      	ldr	r3, [pc, #152]	; (8000694 <uart3_tx_init+0xa0>)
 80005fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005fe:	4a25      	ldr	r2, [pc, #148]	; (8000694 <uart3_tx_init+0xa0>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// set PB10 to alternate function mode
	GPIOB->MODER &= ~(1u << 20);
 8000608:	4b23      	ldr	r3, [pc, #140]	; (8000698 <uart3_tx_init+0xa4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a22      	ldr	r2, [pc, #136]	; (8000698 <uart3_tx_init+0xa4>)
 800060e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000612:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1u << 21);
 8000614:	4b20      	ldr	r3, [pc, #128]	; (8000698 <uart3_tx_init+0xa4>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a1f      	ldr	r2, [pc, #124]	; (8000698 <uart3_tx_init+0xa4>)
 800061a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800061e:	6013      	str	r3, [r2, #0]

	// set PB10 to alternate function type to UART_TX (AF7)
	GPIOB->AFR[1] |= (1u << 8);
 8000620:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <uart3_tx_init+0xa4>)
 8000622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000624:	4a1c      	ldr	r2, [pc, #112]	; (8000698 <uart3_tx_init+0xa4>)
 8000626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800062a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1u << 9);
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <uart3_tx_init+0xa4>)
 800062e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000630:	4a19      	ldr	r2, [pc, #100]	; (8000698 <uart3_tx_init+0xa4>)
 8000632:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000636:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1u << 10);
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <uart3_tx_init+0xa4>)
 800063a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800063c:	4a16      	ldr	r2, [pc, #88]	; (8000698 <uart3_tx_init+0xa4>)
 800063e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000642:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1u << 11);
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <uart3_tx_init+0xa4>)
 8000646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000648:	4a13      	ldr	r2, [pc, #76]	; (8000698 <uart3_tx_init+0xa4>)
 800064a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800064e:	6253      	str	r3, [r2, #36]	; 0x24


	/* Configure the UART module */
	// enable clock access to uart3
	RCC->APB1LENR |= UART3EN;
 8000650:	4b10      	ldr	r3, [pc, #64]	; (8000694 <uart3_tx_init+0xa0>)
 8000652:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000656:	4a0f      	ldr	r2, [pc, #60]	; (8000694 <uart3_tx_init+0xa0>)
 8000658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800065c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

	// when configuring usart it should be disabled
	USART3->CR1 &= ~(CR1_UE);
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <uart3_tx_init+0xa8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a0d      	ldr	r2, [pc, #52]	; (800069c <uart3_tx_init+0xa8>)
 8000666:	f023 0301 	bic.w	r3, r3, #1
 800066a:	6013      	str	r3, [r2, #0]

	// configure baudrate
	uart_set_baudrate(USART3, APB1_CLK, UART_BAUDRATE);
 800066c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000670:	490b      	ldr	r1, [pc, #44]	; (80006a0 <uart3_tx_init+0xac>)
 8000672:	480a      	ldr	r0, [pc, #40]	; (800069c <uart3_tx_init+0xa8>)
 8000674:	f000 f816 	bl	80006a4 <uart_set_baudrate>

	// configure transfer direction
	USART3->CR1 |= CR1_TE;
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <uart3_tx_init+0xa8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a07      	ldr	r2, [pc, #28]	; (800069c <uart3_tx_init+0xa8>)
 800067e:	f043 0308 	orr.w	r3, r3, #8
 8000682:	6013      	str	r3, [r2, #0]

	// enable uart module
	USART3->CR1 |= CR1_UE;
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <uart3_tx_init+0xa8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a04      	ldr	r2, [pc, #16]	; (800069c <uart3_tx_init+0xa8>)
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	6013      	str	r3, [r2, #0]
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	58024400 	.word	0x58024400
 8000698:	58020400 	.word	0x58020400
 800069c:	40004800 	.word	0x40004800
 80006a0:	03d09000 	.word	0x03d09000

080006a4 <uart_set_baudrate>:
	// enable uart module
	USART3->CR1 |= CR1_UE;
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periph_clock, uint32_t baudrate)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_baudrate(periph_clock, baudrate);
 80006b0:	6879      	ldr	r1, [r7, #4]
 80006b2:	68b8      	ldr	r0, [r7, #8]
 80006b4:	f000 f808 	bl	80006c8 <compute_uart_baudrate>
 80006b8:	4603      	mov	r3, r0
 80006ba:	461a      	mov	r2, r3
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	60da      	str	r2, [r3, #12]
}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <compute_uart_baudrate>:

static int32_t compute_uart_baudrate(uint32_t periph_clock, uint32_t baudrate)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
	return (periph_clock/baudrate);
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
	...

080006e8 <uart3_write>:

void uart3_write(int ch)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	// make sure transmit data register is empty
	while( !(USART3->ISR & SR_TXE) ) {}
 80006f0:	bf00      	nop
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <uart3_write+0x2c>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d0f9      	beq.n	80006f2 <uart3_write+0xa>

	// write to transmit data register
	USART3->TDR = (ch & 0xFF);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <uart3_write+0x2c>)
 8000702:	b2db      	uxtb	r3, r3
 8000704:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40004800 	.word	0x40004800

08000718 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000718:	480d      	ldr	r0, [pc, #52]	; (8000750 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800071a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800071c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000720:	480c      	ldr	r0, [pc, #48]	; (8000754 <LoopForever+0x6>)
  ldr r1, =_edata
 8000722:	490d      	ldr	r1, [pc, #52]	; (8000758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000724:	4a0d      	ldr	r2, [pc, #52]	; (800075c <LoopForever+0xe>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000728:	e002      	b.n	8000730 <LoopCopyDataInit>

0800072a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800072c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072e:	3304      	adds	r3, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000734:	d3f9      	bcc.n	800072a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000738:	4c0a      	ldr	r4, [pc, #40]	; (8000764 <LoopForever+0x16>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800073c:	e001      	b.n	8000742 <LoopFillZerobss>

0800073e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000740:	3204      	adds	r2, #4

08000742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000744:	d3fb      	bcc.n	800073e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000746:	f000 f817 	bl	8000778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800074a:	f7ff fe19 	bl	8000380 <main>

0800074e <LoopForever>:

LoopForever:
    b LoopForever
 800074e:	e7fe      	b.n	800074e <LoopForever>
  ldr   r0, =_estack
 8000750:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000754:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000758:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 800075c:	080017c4 	.word	0x080017c4
  ldr r2, =_sbss
 8000760:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8000764:	24000094 	.word	0x24000094

08000768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <ADC1_2_IRQHandler>
	...

0800076c <__errno>:
 800076c:	4b01      	ldr	r3, [pc, #4]	; (8000774 <__errno+0x8>)
 800076e:	6818      	ldr	r0, [r3, #0]
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	24000000 	.word	0x24000000

08000778 <__libc_init_array>:
 8000778:	b570      	push	{r4, r5, r6, lr}
 800077a:	4d0d      	ldr	r5, [pc, #52]	; (80007b0 <__libc_init_array+0x38>)
 800077c:	4c0d      	ldr	r4, [pc, #52]	; (80007b4 <__libc_init_array+0x3c>)
 800077e:	1b64      	subs	r4, r4, r5
 8000780:	10a4      	asrs	r4, r4, #2
 8000782:	2600      	movs	r6, #0
 8000784:	42a6      	cmp	r6, r4
 8000786:	d109      	bne.n	800079c <__libc_init_array+0x24>
 8000788:	4d0b      	ldr	r5, [pc, #44]	; (80007b8 <__libc_init_array+0x40>)
 800078a:	4c0c      	ldr	r4, [pc, #48]	; (80007bc <__libc_init_array+0x44>)
 800078c:	f000 ffa8 	bl	80016e0 <_init>
 8000790:	1b64      	subs	r4, r4, r5
 8000792:	10a4      	asrs	r4, r4, #2
 8000794:	2600      	movs	r6, #0
 8000796:	42a6      	cmp	r6, r4
 8000798:	d105      	bne.n	80007a6 <__libc_init_array+0x2e>
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f855 3b04 	ldr.w	r3, [r5], #4
 80007a0:	4798      	blx	r3
 80007a2:	3601      	adds	r6, #1
 80007a4:	e7ee      	b.n	8000784 <__libc_init_array+0xc>
 80007a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80007aa:	4798      	blx	r3
 80007ac:	3601      	adds	r6, #1
 80007ae:	e7f2      	b.n	8000796 <__libc_init_array+0x1e>
 80007b0:	080017bc 	.word	0x080017bc
 80007b4:	080017bc 	.word	0x080017bc
 80007b8:	080017bc 	.word	0x080017bc
 80007bc:	080017c0 	.word	0x080017c0

080007c0 <memset>:
 80007c0:	4402      	add	r2, r0
 80007c2:	4603      	mov	r3, r0
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d100      	bne.n	80007ca <memset+0xa>
 80007c8:	4770      	bx	lr
 80007ca:	f803 1b01 	strb.w	r1, [r3], #1
 80007ce:	e7f9      	b.n	80007c4 <memset+0x4>

080007d0 <iprintf>:
 80007d0:	b40f      	push	{r0, r1, r2, r3}
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <iprintf+0x2c>)
 80007d4:	b513      	push	{r0, r1, r4, lr}
 80007d6:	681c      	ldr	r4, [r3, #0]
 80007d8:	b124      	cbz	r4, 80007e4 <iprintf+0x14>
 80007da:	69a3      	ldr	r3, [r4, #24]
 80007dc:	b913      	cbnz	r3, 80007e4 <iprintf+0x14>
 80007de:	4620      	mov	r0, r4
 80007e0:	f000 f866 	bl	80008b0 <__sinit>
 80007e4:	ab05      	add	r3, sp, #20
 80007e6:	9a04      	ldr	r2, [sp, #16]
 80007e8:	68a1      	ldr	r1, [r4, #8]
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	4620      	mov	r0, r4
 80007ee:	f000 f9bd 	bl	8000b6c <_vfiprintf_r>
 80007f2:	b002      	add	sp, #8
 80007f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007f8:	b004      	add	sp, #16
 80007fa:	4770      	bx	lr
 80007fc:	24000000 	.word	0x24000000

08000800 <std>:
 8000800:	2300      	movs	r3, #0
 8000802:	b510      	push	{r4, lr}
 8000804:	4604      	mov	r4, r0
 8000806:	e9c0 3300 	strd	r3, r3, [r0]
 800080a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800080e:	6083      	str	r3, [r0, #8]
 8000810:	8181      	strh	r1, [r0, #12]
 8000812:	6643      	str	r3, [r0, #100]	; 0x64
 8000814:	81c2      	strh	r2, [r0, #14]
 8000816:	6183      	str	r3, [r0, #24]
 8000818:	4619      	mov	r1, r3
 800081a:	2208      	movs	r2, #8
 800081c:	305c      	adds	r0, #92	; 0x5c
 800081e:	f7ff ffcf 	bl	80007c0 <memset>
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <std+0x38>)
 8000824:	6263      	str	r3, [r4, #36]	; 0x24
 8000826:	4b05      	ldr	r3, [pc, #20]	; (800083c <std+0x3c>)
 8000828:	62a3      	str	r3, [r4, #40]	; 0x28
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <std+0x40>)
 800082c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800082e:	4b05      	ldr	r3, [pc, #20]	; (8000844 <std+0x44>)
 8000830:	6224      	str	r4, [r4, #32]
 8000832:	6323      	str	r3, [r4, #48]	; 0x30
 8000834:	bd10      	pop	{r4, pc}
 8000836:	bf00      	nop
 8000838:	08000de9 	.word	0x08000de9
 800083c:	08000e0b 	.word	0x08000e0b
 8000840:	08000e43 	.word	0x08000e43
 8000844:	08000e67 	.word	0x08000e67

08000848 <_cleanup_r>:
 8000848:	4901      	ldr	r1, [pc, #4]	; (8000850 <_cleanup_r+0x8>)
 800084a:	f000 b8af 	b.w	80009ac <_fwalk_reent>
 800084e:	bf00      	nop
 8000850:	08001141 	.word	0x08001141

08000854 <__sfmoreglue>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	2368      	movs	r3, #104	; 0x68
 8000858:	1e4d      	subs	r5, r1, #1
 800085a:	435d      	muls	r5, r3
 800085c:	460e      	mov	r6, r1
 800085e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000862:	f000 f8e5 	bl	8000a30 <_malloc_r>
 8000866:	4604      	mov	r4, r0
 8000868:	b140      	cbz	r0, 800087c <__sfmoreglue+0x28>
 800086a:	2100      	movs	r1, #0
 800086c:	e9c0 1600 	strd	r1, r6, [r0]
 8000870:	300c      	adds	r0, #12
 8000872:	60a0      	str	r0, [r4, #8]
 8000874:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000878:	f7ff ffa2 	bl	80007c0 <memset>
 800087c:	4620      	mov	r0, r4
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__sfp_lock_acquire>:
 8000880:	4801      	ldr	r0, [pc, #4]	; (8000888 <__sfp_lock_acquire+0x8>)
 8000882:	f000 b8b3 	b.w	80009ec <__retarget_lock_acquire_recursive>
 8000886:	bf00      	nop
 8000888:	24000085 	.word	0x24000085

0800088c <__sfp_lock_release>:
 800088c:	4801      	ldr	r0, [pc, #4]	; (8000894 <__sfp_lock_release+0x8>)
 800088e:	f000 b8ae 	b.w	80009ee <__retarget_lock_release_recursive>
 8000892:	bf00      	nop
 8000894:	24000085 	.word	0x24000085

08000898 <__sinit_lock_acquire>:
 8000898:	4801      	ldr	r0, [pc, #4]	; (80008a0 <__sinit_lock_acquire+0x8>)
 800089a:	f000 b8a7 	b.w	80009ec <__retarget_lock_acquire_recursive>
 800089e:	bf00      	nop
 80008a0:	24000086 	.word	0x24000086

080008a4 <__sinit_lock_release>:
 80008a4:	4801      	ldr	r0, [pc, #4]	; (80008ac <__sinit_lock_release+0x8>)
 80008a6:	f000 b8a2 	b.w	80009ee <__retarget_lock_release_recursive>
 80008aa:	bf00      	nop
 80008ac:	24000086 	.word	0x24000086

080008b0 <__sinit>:
 80008b0:	b510      	push	{r4, lr}
 80008b2:	4604      	mov	r4, r0
 80008b4:	f7ff fff0 	bl	8000898 <__sinit_lock_acquire>
 80008b8:	69a3      	ldr	r3, [r4, #24]
 80008ba:	b11b      	cbz	r3, 80008c4 <__sinit+0x14>
 80008bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008c0:	f7ff bff0 	b.w	80008a4 <__sinit_lock_release>
 80008c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80008c8:	6523      	str	r3, [r4, #80]	; 0x50
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <__sinit+0x68>)
 80008cc:	4a13      	ldr	r2, [pc, #76]	; (800091c <__sinit+0x6c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80008d2:	42a3      	cmp	r3, r4
 80008d4:	bf04      	itt	eq
 80008d6:	2301      	moveq	r3, #1
 80008d8:	61a3      	streq	r3, [r4, #24]
 80008da:	4620      	mov	r0, r4
 80008dc:	f000 f820 	bl	8000920 <__sfp>
 80008e0:	6060      	str	r0, [r4, #4]
 80008e2:	4620      	mov	r0, r4
 80008e4:	f000 f81c 	bl	8000920 <__sfp>
 80008e8:	60a0      	str	r0, [r4, #8]
 80008ea:	4620      	mov	r0, r4
 80008ec:	f000 f818 	bl	8000920 <__sfp>
 80008f0:	2200      	movs	r2, #0
 80008f2:	60e0      	str	r0, [r4, #12]
 80008f4:	2104      	movs	r1, #4
 80008f6:	6860      	ldr	r0, [r4, #4]
 80008f8:	f7ff ff82 	bl	8000800 <std>
 80008fc:	68a0      	ldr	r0, [r4, #8]
 80008fe:	2201      	movs	r2, #1
 8000900:	2109      	movs	r1, #9
 8000902:	f7ff ff7d 	bl	8000800 <std>
 8000906:	68e0      	ldr	r0, [r4, #12]
 8000908:	2202      	movs	r2, #2
 800090a:	2112      	movs	r1, #18
 800090c:	f7ff ff78 	bl	8000800 <std>
 8000910:	2301      	movs	r3, #1
 8000912:	61a3      	str	r3, [r4, #24]
 8000914:	e7d2      	b.n	80008bc <__sinit+0xc>
 8000916:	bf00      	nop
 8000918:	08001724 	.word	0x08001724
 800091c:	08000849 	.word	0x08000849

08000920 <__sfp>:
 8000920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000922:	4607      	mov	r7, r0
 8000924:	f7ff ffac 	bl	8000880 <__sfp_lock_acquire>
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <__sfp+0x84>)
 800092a:	681e      	ldr	r6, [r3, #0]
 800092c:	69b3      	ldr	r3, [r6, #24]
 800092e:	b913      	cbnz	r3, 8000936 <__sfp+0x16>
 8000930:	4630      	mov	r0, r6
 8000932:	f7ff ffbd 	bl	80008b0 <__sinit>
 8000936:	3648      	adds	r6, #72	; 0x48
 8000938:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800093c:	3b01      	subs	r3, #1
 800093e:	d503      	bpl.n	8000948 <__sfp+0x28>
 8000940:	6833      	ldr	r3, [r6, #0]
 8000942:	b30b      	cbz	r3, 8000988 <__sfp+0x68>
 8000944:	6836      	ldr	r6, [r6, #0]
 8000946:	e7f7      	b.n	8000938 <__sfp+0x18>
 8000948:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800094c:	b9d5      	cbnz	r5, 8000984 <__sfp+0x64>
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <__sfp+0x88>)
 8000950:	60e3      	str	r3, [r4, #12]
 8000952:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000956:	6665      	str	r5, [r4, #100]	; 0x64
 8000958:	f000 f847 	bl	80009ea <__retarget_lock_init_recursive>
 800095c:	f7ff ff96 	bl	800088c <__sfp_lock_release>
 8000960:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000964:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000968:	6025      	str	r5, [r4, #0]
 800096a:	61a5      	str	r5, [r4, #24]
 800096c:	2208      	movs	r2, #8
 800096e:	4629      	mov	r1, r5
 8000970:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000974:	f7ff ff24 	bl	80007c0 <memset>
 8000978:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800097c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000980:	4620      	mov	r0, r4
 8000982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000984:	3468      	adds	r4, #104	; 0x68
 8000986:	e7d9      	b.n	800093c <__sfp+0x1c>
 8000988:	2104      	movs	r1, #4
 800098a:	4638      	mov	r0, r7
 800098c:	f7ff ff62 	bl	8000854 <__sfmoreglue>
 8000990:	4604      	mov	r4, r0
 8000992:	6030      	str	r0, [r6, #0]
 8000994:	2800      	cmp	r0, #0
 8000996:	d1d5      	bne.n	8000944 <__sfp+0x24>
 8000998:	f7ff ff78 	bl	800088c <__sfp_lock_release>
 800099c:	230c      	movs	r3, #12
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	e7ee      	b.n	8000980 <__sfp+0x60>
 80009a2:	bf00      	nop
 80009a4:	08001724 	.word	0x08001724
 80009a8:	ffff0001 	.word	0xffff0001

080009ac <_fwalk_reent>:
 80009ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009b0:	4606      	mov	r6, r0
 80009b2:	4688      	mov	r8, r1
 80009b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80009b8:	2700      	movs	r7, #0
 80009ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80009be:	f1b9 0901 	subs.w	r9, r9, #1
 80009c2:	d505      	bpl.n	80009d0 <_fwalk_reent+0x24>
 80009c4:	6824      	ldr	r4, [r4, #0]
 80009c6:	2c00      	cmp	r4, #0
 80009c8:	d1f7      	bne.n	80009ba <_fwalk_reent+0xe>
 80009ca:	4638      	mov	r0, r7
 80009cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009d0:	89ab      	ldrh	r3, [r5, #12]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d907      	bls.n	80009e6 <_fwalk_reent+0x3a>
 80009d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80009da:	3301      	adds	r3, #1
 80009dc:	d003      	beq.n	80009e6 <_fwalk_reent+0x3a>
 80009de:	4629      	mov	r1, r5
 80009e0:	4630      	mov	r0, r6
 80009e2:	47c0      	blx	r8
 80009e4:	4307      	orrs	r7, r0
 80009e6:	3568      	adds	r5, #104	; 0x68
 80009e8:	e7e9      	b.n	80009be <_fwalk_reent+0x12>

080009ea <__retarget_lock_init_recursive>:
 80009ea:	4770      	bx	lr

080009ec <__retarget_lock_acquire_recursive>:
 80009ec:	4770      	bx	lr

080009ee <__retarget_lock_release_recursive>:
 80009ee:	4770      	bx	lr

080009f0 <sbrk_aligned>:
 80009f0:	b570      	push	{r4, r5, r6, lr}
 80009f2:	4e0e      	ldr	r6, [pc, #56]	; (8000a2c <sbrk_aligned+0x3c>)
 80009f4:	460c      	mov	r4, r1
 80009f6:	6831      	ldr	r1, [r6, #0]
 80009f8:	4605      	mov	r5, r0
 80009fa:	b911      	cbnz	r1, 8000a02 <sbrk_aligned+0x12>
 80009fc:	f000 f9e4 	bl	8000dc8 <_sbrk_r>
 8000a00:	6030      	str	r0, [r6, #0]
 8000a02:	4621      	mov	r1, r4
 8000a04:	4628      	mov	r0, r5
 8000a06:	f000 f9df 	bl	8000dc8 <_sbrk_r>
 8000a0a:	1c43      	adds	r3, r0, #1
 8000a0c:	d00a      	beq.n	8000a24 <sbrk_aligned+0x34>
 8000a0e:	1cc4      	adds	r4, r0, #3
 8000a10:	f024 0403 	bic.w	r4, r4, #3
 8000a14:	42a0      	cmp	r0, r4
 8000a16:	d007      	beq.n	8000a28 <sbrk_aligned+0x38>
 8000a18:	1a21      	subs	r1, r4, r0
 8000a1a:	4628      	mov	r0, r5
 8000a1c:	f000 f9d4 	bl	8000dc8 <_sbrk_r>
 8000a20:	3001      	adds	r0, #1
 8000a22:	d101      	bne.n	8000a28 <sbrk_aligned+0x38>
 8000a24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000a28:	4620      	mov	r0, r4
 8000a2a:	bd70      	pop	{r4, r5, r6, pc}
 8000a2c:	2400008c 	.word	0x2400008c

08000a30 <_malloc_r>:
 8000a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a34:	1ccd      	adds	r5, r1, #3
 8000a36:	f025 0503 	bic.w	r5, r5, #3
 8000a3a:	3508      	adds	r5, #8
 8000a3c:	2d0c      	cmp	r5, #12
 8000a3e:	bf38      	it	cc
 8000a40:	250c      	movcc	r5, #12
 8000a42:	2d00      	cmp	r5, #0
 8000a44:	4607      	mov	r7, r0
 8000a46:	db01      	blt.n	8000a4c <_malloc_r+0x1c>
 8000a48:	42a9      	cmp	r1, r5
 8000a4a:	d905      	bls.n	8000a58 <_malloc_r+0x28>
 8000a4c:	230c      	movs	r3, #12
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	2600      	movs	r6, #0
 8000a52:	4630      	mov	r0, r6
 8000a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a58:	4e2e      	ldr	r6, [pc, #184]	; (8000b14 <_malloc_r+0xe4>)
 8000a5a:	f000 fc25 	bl	80012a8 <__malloc_lock>
 8000a5e:	6833      	ldr	r3, [r6, #0]
 8000a60:	461c      	mov	r4, r3
 8000a62:	bb34      	cbnz	r4, 8000ab2 <_malloc_r+0x82>
 8000a64:	4629      	mov	r1, r5
 8000a66:	4638      	mov	r0, r7
 8000a68:	f7ff ffc2 	bl	80009f0 <sbrk_aligned>
 8000a6c:	1c43      	adds	r3, r0, #1
 8000a6e:	4604      	mov	r4, r0
 8000a70:	d14d      	bne.n	8000b0e <_malloc_r+0xde>
 8000a72:	6834      	ldr	r4, [r6, #0]
 8000a74:	4626      	mov	r6, r4
 8000a76:	2e00      	cmp	r6, #0
 8000a78:	d140      	bne.n	8000afc <_malloc_r+0xcc>
 8000a7a:	6823      	ldr	r3, [r4, #0]
 8000a7c:	4631      	mov	r1, r6
 8000a7e:	4638      	mov	r0, r7
 8000a80:	eb04 0803 	add.w	r8, r4, r3
 8000a84:	f000 f9a0 	bl	8000dc8 <_sbrk_r>
 8000a88:	4580      	cmp	r8, r0
 8000a8a:	d13a      	bne.n	8000b02 <_malloc_r+0xd2>
 8000a8c:	6823      	ldr	r3, [r4, #0]
 8000a8e:	3503      	adds	r5, #3
 8000a90:	1aed      	subs	r5, r5, r3
 8000a92:	f025 0503 	bic.w	r5, r5, #3
 8000a96:	3508      	adds	r5, #8
 8000a98:	2d0c      	cmp	r5, #12
 8000a9a:	bf38      	it	cc
 8000a9c:	250c      	movcc	r5, #12
 8000a9e:	4629      	mov	r1, r5
 8000aa0:	4638      	mov	r0, r7
 8000aa2:	f7ff ffa5 	bl	80009f0 <sbrk_aligned>
 8000aa6:	3001      	adds	r0, #1
 8000aa8:	d02b      	beq.n	8000b02 <_malloc_r+0xd2>
 8000aaa:	6823      	ldr	r3, [r4, #0]
 8000aac:	442b      	add	r3, r5
 8000aae:	6023      	str	r3, [r4, #0]
 8000ab0:	e00e      	b.n	8000ad0 <_malloc_r+0xa0>
 8000ab2:	6822      	ldr	r2, [r4, #0]
 8000ab4:	1b52      	subs	r2, r2, r5
 8000ab6:	d41e      	bmi.n	8000af6 <_malloc_r+0xc6>
 8000ab8:	2a0b      	cmp	r2, #11
 8000aba:	d916      	bls.n	8000aea <_malloc_r+0xba>
 8000abc:	1961      	adds	r1, r4, r5
 8000abe:	42a3      	cmp	r3, r4
 8000ac0:	6025      	str	r5, [r4, #0]
 8000ac2:	bf18      	it	ne
 8000ac4:	6059      	strne	r1, [r3, #4]
 8000ac6:	6863      	ldr	r3, [r4, #4]
 8000ac8:	bf08      	it	eq
 8000aca:	6031      	streq	r1, [r6, #0]
 8000acc:	5162      	str	r2, [r4, r5]
 8000ace:	604b      	str	r3, [r1, #4]
 8000ad0:	4638      	mov	r0, r7
 8000ad2:	f104 060b 	add.w	r6, r4, #11
 8000ad6:	f000 fbed 	bl	80012b4 <__malloc_unlock>
 8000ada:	f026 0607 	bic.w	r6, r6, #7
 8000ade:	1d23      	adds	r3, r4, #4
 8000ae0:	1af2      	subs	r2, r6, r3
 8000ae2:	d0b6      	beq.n	8000a52 <_malloc_r+0x22>
 8000ae4:	1b9b      	subs	r3, r3, r6
 8000ae6:	50a3      	str	r3, [r4, r2]
 8000ae8:	e7b3      	b.n	8000a52 <_malloc_r+0x22>
 8000aea:	6862      	ldr	r2, [r4, #4]
 8000aec:	42a3      	cmp	r3, r4
 8000aee:	bf0c      	ite	eq
 8000af0:	6032      	streq	r2, [r6, #0]
 8000af2:	605a      	strne	r2, [r3, #4]
 8000af4:	e7ec      	b.n	8000ad0 <_malloc_r+0xa0>
 8000af6:	4623      	mov	r3, r4
 8000af8:	6864      	ldr	r4, [r4, #4]
 8000afa:	e7b2      	b.n	8000a62 <_malloc_r+0x32>
 8000afc:	4634      	mov	r4, r6
 8000afe:	6876      	ldr	r6, [r6, #4]
 8000b00:	e7b9      	b.n	8000a76 <_malloc_r+0x46>
 8000b02:	230c      	movs	r3, #12
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	4638      	mov	r0, r7
 8000b08:	f000 fbd4 	bl	80012b4 <__malloc_unlock>
 8000b0c:	e7a1      	b.n	8000a52 <_malloc_r+0x22>
 8000b0e:	6025      	str	r5, [r4, #0]
 8000b10:	e7de      	b.n	8000ad0 <_malloc_r+0xa0>
 8000b12:	bf00      	nop
 8000b14:	24000088 	.word	0x24000088

08000b18 <__sfputc_r>:
 8000b18:	6893      	ldr	r3, [r2, #8]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	b410      	push	{r4}
 8000b20:	6093      	str	r3, [r2, #8]
 8000b22:	da08      	bge.n	8000b36 <__sfputc_r+0x1e>
 8000b24:	6994      	ldr	r4, [r2, #24]
 8000b26:	42a3      	cmp	r3, r4
 8000b28:	db01      	blt.n	8000b2e <__sfputc_r+0x16>
 8000b2a:	290a      	cmp	r1, #10
 8000b2c:	d103      	bne.n	8000b36 <__sfputc_r+0x1e>
 8000b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b32:	f000 b99d 	b.w	8000e70 <__swbuf_r>
 8000b36:	6813      	ldr	r3, [r2, #0]
 8000b38:	1c58      	adds	r0, r3, #1
 8000b3a:	6010      	str	r0, [r2, #0]
 8000b3c:	7019      	strb	r1, [r3, #0]
 8000b3e:	4608      	mov	r0, r1
 8000b40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <__sfputs_r>:
 8000b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b48:	4606      	mov	r6, r0
 8000b4a:	460f      	mov	r7, r1
 8000b4c:	4614      	mov	r4, r2
 8000b4e:	18d5      	adds	r5, r2, r3
 8000b50:	42ac      	cmp	r4, r5
 8000b52:	d101      	bne.n	8000b58 <__sfputs_r+0x12>
 8000b54:	2000      	movs	r0, #0
 8000b56:	e007      	b.n	8000b68 <__sfputs_r+0x22>
 8000b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b5c:	463a      	mov	r2, r7
 8000b5e:	4630      	mov	r0, r6
 8000b60:	f7ff ffda 	bl	8000b18 <__sfputc_r>
 8000b64:	1c43      	adds	r3, r0, #1
 8000b66:	d1f3      	bne.n	8000b50 <__sfputs_r+0xa>
 8000b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b6c <_vfiprintf_r>:
 8000b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b70:	460d      	mov	r5, r1
 8000b72:	b09d      	sub	sp, #116	; 0x74
 8000b74:	4614      	mov	r4, r2
 8000b76:	4698      	mov	r8, r3
 8000b78:	4606      	mov	r6, r0
 8000b7a:	b118      	cbz	r0, 8000b84 <_vfiprintf_r+0x18>
 8000b7c:	6983      	ldr	r3, [r0, #24]
 8000b7e:	b90b      	cbnz	r3, 8000b84 <_vfiprintf_r+0x18>
 8000b80:	f7ff fe96 	bl	80008b0 <__sinit>
 8000b84:	4b88      	ldr	r3, [pc, #544]	; (8000da8 <_vfiprintf_r+0x23c>)
 8000b86:	429d      	cmp	r5, r3
 8000b88:	d11b      	bne.n	8000bc2 <_vfiprintf_r+0x56>
 8000b8a:	6875      	ldr	r5, [r6, #4]
 8000b8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b8e:	07d9      	lsls	r1, r3, #31
 8000b90:	d405      	bmi.n	8000b9e <_vfiprintf_r+0x32>
 8000b92:	89ab      	ldrh	r3, [r5, #12]
 8000b94:	059a      	lsls	r2, r3, #22
 8000b96:	d402      	bmi.n	8000b9e <_vfiprintf_r+0x32>
 8000b98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b9a:	f7ff ff27 	bl	80009ec <__retarget_lock_acquire_recursive>
 8000b9e:	89ab      	ldrh	r3, [r5, #12]
 8000ba0:	071b      	lsls	r3, r3, #28
 8000ba2:	d501      	bpl.n	8000ba8 <_vfiprintf_r+0x3c>
 8000ba4:	692b      	ldr	r3, [r5, #16]
 8000ba6:	b9eb      	cbnz	r3, 8000be4 <_vfiprintf_r+0x78>
 8000ba8:	4629      	mov	r1, r5
 8000baa:	4630      	mov	r0, r6
 8000bac:	f000 f9c4 	bl	8000f38 <__swsetup_r>
 8000bb0:	b1c0      	cbz	r0, 8000be4 <_vfiprintf_r+0x78>
 8000bb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bb4:	07dc      	lsls	r4, r3, #31
 8000bb6:	d50e      	bpl.n	8000bd6 <_vfiprintf_r+0x6a>
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bbc:	b01d      	add	sp, #116	; 0x74
 8000bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bc2:	4b7a      	ldr	r3, [pc, #488]	; (8000dac <_vfiprintf_r+0x240>)
 8000bc4:	429d      	cmp	r5, r3
 8000bc6:	d101      	bne.n	8000bcc <_vfiprintf_r+0x60>
 8000bc8:	68b5      	ldr	r5, [r6, #8]
 8000bca:	e7df      	b.n	8000b8c <_vfiprintf_r+0x20>
 8000bcc:	4b78      	ldr	r3, [pc, #480]	; (8000db0 <_vfiprintf_r+0x244>)
 8000bce:	429d      	cmp	r5, r3
 8000bd0:	bf08      	it	eq
 8000bd2:	68f5      	ldreq	r5, [r6, #12]
 8000bd4:	e7da      	b.n	8000b8c <_vfiprintf_r+0x20>
 8000bd6:	89ab      	ldrh	r3, [r5, #12]
 8000bd8:	0598      	lsls	r0, r3, #22
 8000bda:	d4ed      	bmi.n	8000bb8 <_vfiprintf_r+0x4c>
 8000bdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bde:	f7ff ff06 	bl	80009ee <__retarget_lock_release_recursive>
 8000be2:	e7e9      	b.n	8000bb8 <_vfiprintf_r+0x4c>
 8000be4:	2300      	movs	r3, #0
 8000be6:	9309      	str	r3, [sp, #36]	; 0x24
 8000be8:	2320      	movs	r3, #32
 8000bea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000bee:	f8cd 800c 	str.w	r8, [sp, #12]
 8000bf2:	2330      	movs	r3, #48	; 0x30
 8000bf4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000db4 <_vfiprintf_r+0x248>
 8000bf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000bfc:	f04f 0901 	mov.w	r9, #1
 8000c00:	4623      	mov	r3, r4
 8000c02:	469a      	mov	sl, r3
 8000c04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c08:	b10a      	cbz	r2, 8000c0e <_vfiprintf_r+0xa2>
 8000c0a:	2a25      	cmp	r2, #37	; 0x25
 8000c0c:	d1f9      	bne.n	8000c02 <_vfiprintf_r+0x96>
 8000c0e:	ebba 0b04 	subs.w	fp, sl, r4
 8000c12:	d00b      	beq.n	8000c2c <_vfiprintf_r+0xc0>
 8000c14:	465b      	mov	r3, fp
 8000c16:	4622      	mov	r2, r4
 8000c18:	4629      	mov	r1, r5
 8000c1a:	4630      	mov	r0, r6
 8000c1c:	f7ff ff93 	bl	8000b46 <__sfputs_r>
 8000c20:	3001      	adds	r0, #1
 8000c22:	f000 80a9 	beq.w	8000d78 <_vfiprintf_r+0x20c>
 8000c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c28:	445a      	add	r2, fp
 8000c2a:	9209      	str	r2, [sp, #36]	; 0x24
 8000c2c:	f89a 3000 	ldrb.w	r3, [sl]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f000 80a1 	beq.w	8000d78 <_vfiprintf_r+0x20c>
 8000c36:	2300      	movs	r3, #0
 8000c38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c40:	f10a 0a01 	add.w	sl, sl, #1
 8000c44:	9304      	str	r3, [sp, #16]
 8000c46:	9307      	str	r3, [sp, #28]
 8000c48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c4c:	931a      	str	r3, [sp, #104]	; 0x68
 8000c4e:	4654      	mov	r4, sl
 8000c50:	2205      	movs	r2, #5
 8000c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c56:	4857      	ldr	r0, [pc, #348]	; (8000db4 <_vfiprintf_r+0x248>)
 8000c58:	f7ff fb22 	bl	80002a0 <memchr>
 8000c5c:	9a04      	ldr	r2, [sp, #16]
 8000c5e:	b9d8      	cbnz	r0, 8000c98 <_vfiprintf_r+0x12c>
 8000c60:	06d1      	lsls	r1, r2, #27
 8000c62:	bf44      	itt	mi
 8000c64:	2320      	movmi	r3, #32
 8000c66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c6a:	0713      	lsls	r3, r2, #28
 8000c6c:	bf44      	itt	mi
 8000c6e:	232b      	movmi	r3, #43	; 0x2b
 8000c70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c74:	f89a 3000 	ldrb.w	r3, [sl]
 8000c78:	2b2a      	cmp	r3, #42	; 0x2a
 8000c7a:	d015      	beq.n	8000ca8 <_vfiprintf_r+0x13c>
 8000c7c:	9a07      	ldr	r2, [sp, #28]
 8000c7e:	4654      	mov	r4, sl
 8000c80:	2000      	movs	r0, #0
 8000c82:	f04f 0c0a 	mov.w	ip, #10
 8000c86:	4621      	mov	r1, r4
 8000c88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c8c:	3b30      	subs	r3, #48	; 0x30
 8000c8e:	2b09      	cmp	r3, #9
 8000c90:	d94d      	bls.n	8000d2e <_vfiprintf_r+0x1c2>
 8000c92:	b1b0      	cbz	r0, 8000cc2 <_vfiprintf_r+0x156>
 8000c94:	9207      	str	r2, [sp, #28]
 8000c96:	e014      	b.n	8000cc2 <_vfiprintf_r+0x156>
 8000c98:	eba0 0308 	sub.w	r3, r0, r8
 8000c9c:	fa09 f303 	lsl.w	r3, r9, r3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	9304      	str	r3, [sp, #16]
 8000ca4:	46a2      	mov	sl, r4
 8000ca6:	e7d2      	b.n	8000c4e <_vfiprintf_r+0xe2>
 8000ca8:	9b03      	ldr	r3, [sp, #12]
 8000caa:	1d19      	adds	r1, r3, #4
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	9103      	str	r1, [sp, #12]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	bfbb      	ittet	lt
 8000cb4:	425b      	neglt	r3, r3
 8000cb6:	f042 0202 	orrlt.w	r2, r2, #2
 8000cba:	9307      	strge	r3, [sp, #28]
 8000cbc:	9307      	strlt	r3, [sp, #28]
 8000cbe:	bfb8      	it	lt
 8000cc0:	9204      	strlt	r2, [sp, #16]
 8000cc2:	7823      	ldrb	r3, [r4, #0]
 8000cc4:	2b2e      	cmp	r3, #46	; 0x2e
 8000cc6:	d10c      	bne.n	8000ce2 <_vfiprintf_r+0x176>
 8000cc8:	7863      	ldrb	r3, [r4, #1]
 8000cca:	2b2a      	cmp	r3, #42	; 0x2a
 8000ccc:	d134      	bne.n	8000d38 <_vfiprintf_r+0x1cc>
 8000cce:	9b03      	ldr	r3, [sp, #12]
 8000cd0:	1d1a      	adds	r2, r3, #4
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	9203      	str	r2, [sp, #12]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	bfb8      	it	lt
 8000cda:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000cde:	3402      	adds	r4, #2
 8000ce0:	9305      	str	r3, [sp, #20]
 8000ce2:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8000dc4 <_vfiprintf_r+0x258>
 8000ce6:	7821      	ldrb	r1, [r4, #0]
 8000ce8:	2203      	movs	r2, #3
 8000cea:	4650      	mov	r0, sl
 8000cec:	f7ff fad8 	bl	80002a0 <memchr>
 8000cf0:	b138      	cbz	r0, 8000d02 <_vfiprintf_r+0x196>
 8000cf2:	9b04      	ldr	r3, [sp, #16]
 8000cf4:	eba0 000a 	sub.w	r0, r0, sl
 8000cf8:	2240      	movs	r2, #64	; 0x40
 8000cfa:	4082      	lsls	r2, r0
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	3401      	adds	r4, #1
 8000d00:	9304      	str	r3, [sp, #16]
 8000d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d06:	482c      	ldr	r0, [pc, #176]	; (8000db8 <_vfiprintf_r+0x24c>)
 8000d08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d0c:	2206      	movs	r2, #6
 8000d0e:	f7ff fac7 	bl	80002a0 <memchr>
 8000d12:	2800      	cmp	r0, #0
 8000d14:	d03f      	beq.n	8000d96 <_vfiprintf_r+0x22a>
 8000d16:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <_vfiprintf_r+0x250>)
 8000d18:	bb1b      	cbnz	r3, 8000d62 <_vfiprintf_r+0x1f6>
 8000d1a:	9b03      	ldr	r3, [sp, #12]
 8000d1c:	3307      	adds	r3, #7
 8000d1e:	f023 0307 	bic.w	r3, r3, #7
 8000d22:	3308      	adds	r3, #8
 8000d24:	9303      	str	r3, [sp, #12]
 8000d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d28:	443b      	add	r3, r7
 8000d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8000d2c:	e768      	b.n	8000c00 <_vfiprintf_r+0x94>
 8000d2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d32:	460c      	mov	r4, r1
 8000d34:	2001      	movs	r0, #1
 8000d36:	e7a6      	b.n	8000c86 <_vfiprintf_r+0x11a>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	3401      	adds	r4, #1
 8000d3c:	9305      	str	r3, [sp, #20]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f04f 0c0a 	mov.w	ip, #10
 8000d44:	4620      	mov	r0, r4
 8000d46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d4a:	3a30      	subs	r2, #48	; 0x30
 8000d4c:	2a09      	cmp	r2, #9
 8000d4e:	d903      	bls.n	8000d58 <_vfiprintf_r+0x1ec>
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0c6      	beq.n	8000ce2 <_vfiprintf_r+0x176>
 8000d54:	9105      	str	r1, [sp, #20]
 8000d56:	e7c4      	b.n	8000ce2 <_vfiprintf_r+0x176>
 8000d58:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e7f0      	b.n	8000d44 <_vfiprintf_r+0x1d8>
 8000d62:	ab03      	add	r3, sp, #12
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	462a      	mov	r2, r5
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <_vfiprintf_r+0x254>)
 8000d6a:	a904      	add	r1, sp, #16
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	f3af 8000 	nop.w
 8000d72:	4607      	mov	r7, r0
 8000d74:	1c78      	adds	r0, r7, #1
 8000d76:	d1d6      	bne.n	8000d26 <_vfiprintf_r+0x1ba>
 8000d78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d7a:	07d9      	lsls	r1, r3, #31
 8000d7c:	d405      	bmi.n	8000d8a <_vfiprintf_r+0x21e>
 8000d7e:	89ab      	ldrh	r3, [r5, #12]
 8000d80:	059a      	lsls	r2, r3, #22
 8000d82:	d402      	bmi.n	8000d8a <_vfiprintf_r+0x21e>
 8000d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d86:	f7ff fe32 	bl	80009ee <__retarget_lock_release_recursive>
 8000d8a:	89ab      	ldrh	r3, [r5, #12]
 8000d8c:	065b      	lsls	r3, r3, #25
 8000d8e:	f53f af13 	bmi.w	8000bb8 <_vfiprintf_r+0x4c>
 8000d92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d94:	e712      	b.n	8000bbc <_vfiprintf_r+0x50>
 8000d96:	ab03      	add	r3, sp, #12
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	462a      	mov	r2, r5
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <_vfiprintf_r+0x254>)
 8000d9e:	a904      	add	r1, sp, #16
 8000da0:	4630      	mov	r0, r6
 8000da2:	f000 fb47 	bl	8001434 <_printf_i>
 8000da6:	e7e4      	b.n	8000d72 <_vfiprintf_r+0x206>
 8000da8:	08001748 	.word	0x08001748
 8000dac:	08001768 	.word	0x08001768
 8000db0:	08001728 	.word	0x08001728
 8000db4:	08001788 	.word	0x08001788
 8000db8:	08001792 	.word	0x08001792
 8000dbc:	00000000 	.word	0x00000000
 8000dc0:	08000b47 	.word	0x08000b47
 8000dc4:	0800178e 	.word	0x0800178e

08000dc8 <_sbrk_r>:
 8000dc8:	b538      	push	{r3, r4, r5, lr}
 8000dca:	4d06      	ldr	r5, [pc, #24]	; (8000de4 <_sbrk_r+0x1c>)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	4604      	mov	r4, r0
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	602b      	str	r3, [r5, #0]
 8000dd4:	f7ff fb9a 	bl	800050c <_sbrk>
 8000dd8:	1c43      	adds	r3, r0, #1
 8000dda:	d102      	bne.n	8000de2 <_sbrk_r+0x1a>
 8000ddc:	682b      	ldr	r3, [r5, #0]
 8000dde:	b103      	cbz	r3, 8000de2 <_sbrk_r+0x1a>
 8000de0:	6023      	str	r3, [r4, #0]
 8000de2:	bd38      	pop	{r3, r4, r5, pc}
 8000de4:	24000090 	.word	0x24000090

08000de8 <__sread>:
 8000de8:	b510      	push	{r4, lr}
 8000dea:	460c      	mov	r4, r1
 8000dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000df0:	f000 fc42 	bl	8001678 <_read_r>
 8000df4:	2800      	cmp	r0, #0
 8000df6:	bfab      	itete	ge
 8000df8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000dfa:	89a3      	ldrhlt	r3, [r4, #12]
 8000dfc:	181b      	addge	r3, r3, r0
 8000dfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000e02:	bfac      	ite	ge
 8000e04:	6563      	strge	r3, [r4, #84]	; 0x54
 8000e06:	81a3      	strhlt	r3, [r4, #12]
 8000e08:	bd10      	pop	{r4, pc}

08000e0a <__swrite>:
 8000e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e0e:	461f      	mov	r7, r3
 8000e10:	898b      	ldrh	r3, [r1, #12]
 8000e12:	05db      	lsls	r3, r3, #23
 8000e14:	4605      	mov	r5, r0
 8000e16:	460c      	mov	r4, r1
 8000e18:	4616      	mov	r6, r2
 8000e1a:	d505      	bpl.n	8000e28 <__swrite+0x1e>
 8000e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e20:	2302      	movs	r3, #2
 8000e22:	2200      	movs	r2, #0
 8000e24:	f000 f9c8 	bl	80011b8 <_lseek_r>
 8000e28:	89a3      	ldrh	r3, [r4, #12]
 8000e2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e32:	81a3      	strh	r3, [r4, #12]
 8000e34:	4632      	mov	r2, r6
 8000e36:	463b      	mov	r3, r7
 8000e38:	4628      	mov	r0, r5
 8000e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e3e:	f000 b869 	b.w	8000f14 <_write_r>

08000e42 <__sseek>:
 8000e42:	b510      	push	{r4, lr}
 8000e44:	460c      	mov	r4, r1
 8000e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e4a:	f000 f9b5 	bl	80011b8 <_lseek_r>
 8000e4e:	1c43      	adds	r3, r0, #1
 8000e50:	89a3      	ldrh	r3, [r4, #12]
 8000e52:	bf15      	itete	ne
 8000e54:	6560      	strne	r0, [r4, #84]	; 0x54
 8000e56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000e5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000e5e:	81a3      	strheq	r3, [r4, #12]
 8000e60:	bf18      	it	ne
 8000e62:	81a3      	strhne	r3, [r4, #12]
 8000e64:	bd10      	pop	{r4, pc}

08000e66 <__sclose>:
 8000e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e6a:	f000 b8d3 	b.w	8001014 <_close_r>
	...

08000e70 <__swbuf_r>:
 8000e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e72:	460e      	mov	r6, r1
 8000e74:	4614      	mov	r4, r2
 8000e76:	4605      	mov	r5, r0
 8000e78:	b118      	cbz	r0, 8000e82 <__swbuf_r+0x12>
 8000e7a:	6983      	ldr	r3, [r0, #24]
 8000e7c:	b90b      	cbnz	r3, 8000e82 <__swbuf_r+0x12>
 8000e7e:	f7ff fd17 	bl	80008b0 <__sinit>
 8000e82:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <__swbuf_r+0x98>)
 8000e84:	429c      	cmp	r4, r3
 8000e86:	d12b      	bne.n	8000ee0 <__swbuf_r+0x70>
 8000e88:	686c      	ldr	r4, [r5, #4]
 8000e8a:	69a3      	ldr	r3, [r4, #24]
 8000e8c:	60a3      	str	r3, [r4, #8]
 8000e8e:	89a3      	ldrh	r3, [r4, #12]
 8000e90:	071a      	lsls	r2, r3, #28
 8000e92:	d52f      	bpl.n	8000ef4 <__swbuf_r+0x84>
 8000e94:	6923      	ldr	r3, [r4, #16]
 8000e96:	b36b      	cbz	r3, 8000ef4 <__swbuf_r+0x84>
 8000e98:	6923      	ldr	r3, [r4, #16]
 8000e9a:	6820      	ldr	r0, [r4, #0]
 8000e9c:	1ac0      	subs	r0, r0, r3
 8000e9e:	6963      	ldr	r3, [r4, #20]
 8000ea0:	b2f6      	uxtb	r6, r6
 8000ea2:	4283      	cmp	r3, r0
 8000ea4:	4637      	mov	r7, r6
 8000ea6:	dc04      	bgt.n	8000eb2 <__swbuf_r+0x42>
 8000ea8:	4621      	mov	r1, r4
 8000eaa:	4628      	mov	r0, r5
 8000eac:	f000 f948 	bl	8001140 <_fflush_r>
 8000eb0:	bb30      	cbnz	r0, 8000f00 <__swbuf_r+0x90>
 8000eb2:	68a3      	ldr	r3, [r4, #8]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	60a3      	str	r3, [r4, #8]
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	1c5a      	adds	r2, r3, #1
 8000ebc:	6022      	str	r2, [r4, #0]
 8000ebe:	701e      	strb	r6, [r3, #0]
 8000ec0:	6963      	ldr	r3, [r4, #20]
 8000ec2:	3001      	adds	r0, #1
 8000ec4:	4283      	cmp	r3, r0
 8000ec6:	d004      	beq.n	8000ed2 <__swbuf_r+0x62>
 8000ec8:	89a3      	ldrh	r3, [r4, #12]
 8000eca:	07db      	lsls	r3, r3, #31
 8000ecc:	d506      	bpl.n	8000edc <__swbuf_r+0x6c>
 8000ece:	2e0a      	cmp	r6, #10
 8000ed0:	d104      	bne.n	8000edc <__swbuf_r+0x6c>
 8000ed2:	4621      	mov	r1, r4
 8000ed4:	4628      	mov	r0, r5
 8000ed6:	f000 f933 	bl	8001140 <_fflush_r>
 8000eda:	b988      	cbnz	r0, 8000f00 <__swbuf_r+0x90>
 8000edc:	4638      	mov	r0, r7
 8000ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <__swbuf_r+0x9c>)
 8000ee2:	429c      	cmp	r4, r3
 8000ee4:	d101      	bne.n	8000eea <__swbuf_r+0x7a>
 8000ee6:	68ac      	ldr	r4, [r5, #8]
 8000ee8:	e7cf      	b.n	8000e8a <__swbuf_r+0x1a>
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <__swbuf_r+0xa0>)
 8000eec:	429c      	cmp	r4, r3
 8000eee:	bf08      	it	eq
 8000ef0:	68ec      	ldreq	r4, [r5, #12]
 8000ef2:	e7ca      	b.n	8000e8a <__swbuf_r+0x1a>
 8000ef4:	4621      	mov	r1, r4
 8000ef6:	4628      	mov	r0, r5
 8000ef8:	f000 f81e 	bl	8000f38 <__swsetup_r>
 8000efc:	2800      	cmp	r0, #0
 8000efe:	d0cb      	beq.n	8000e98 <__swbuf_r+0x28>
 8000f00:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000f04:	e7ea      	b.n	8000edc <__swbuf_r+0x6c>
 8000f06:	bf00      	nop
 8000f08:	08001748 	.word	0x08001748
 8000f0c:	08001768 	.word	0x08001768
 8000f10:	08001728 	.word	0x08001728

08000f14 <_write_r>:
 8000f14:	b538      	push	{r3, r4, r5, lr}
 8000f16:	4d07      	ldr	r5, [pc, #28]	; (8000f34 <_write_r+0x20>)
 8000f18:	4604      	mov	r4, r0
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	2200      	movs	r2, #0
 8000f20:	602a      	str	r2, [r5, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	f7ff faa1 	bl	800046a <_write>
 8000f28:	1c43      	adds	r3, r0, #1
 8000f2a:	d102      	bne.n	8000f32 <_write_r+0x1e>
 8000f2c:	682b      	ldr	r3, [r5, #0]
 8000f2e:	b103      	cbz	r3, 8000f32 <_write_r+0x1e>
 8000f30:	6023      	str	r3, [r4, #0]
 8000f32:	bd38      	pop	{r3, r4, r5, pc}
 8000f34:	24000090 	.word	0x24000090

08000f38 <__swsetup_r>:
 8000f38:	4b32      	ldr	r3, [pc, #200]	; (8001004 <__swsetup_r+0xcc>)
 8000f3a:	b570      	push	{r4, r5, r6, lr}
 8000f3c:	681d      	ldr	r5, [r3, #0]
 8000f3e:	4606      	mov	r6, r0
 8000f40:	460c      	mov	r4, r1
 8000f42:	b125      	cbz	r5, 8000f4e <__swsetup_r+0x16>
 8000f44:	69ab      	ldr	r3, [r5, #24]
 8000f46:	b913      	cbnz	r3, 8000f4e <__swsetup_r+0x16>
 8000f48:	4628      	mov	r0, r5
 8000f4a:	f7ff fcb1 	bl	80008b0 <__sinit>
 8000f4e:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <__swsetup_r+0xd0>)
 8000f50:	429c      	cmp	r4, r3
 8000f52:	d10f      	bne.n	8000f74 <__swsetup_r+0x3c>
 8000f54:	686c      	ldr	r4, [r5, #4]
 8000f56:	89a3      	ldrh	r3, [r4, #12]
 8000f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000f5c:	0719      	lsls	r1, r3, #28
 8000f5e:	d42c      	bmi.n	8000fba <__swsetup_r+0x82>
 8000f60:	06dd      	lsls	r5, r3, #27
 8000f62:	d411      	bmi.n	8000f88 <__swsetup_r+0x50>
 8000f64:	2309      	movs	r3, #9
 8000f66:	6033      	str	r3, [r6, #0]
 8000f68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000f6c:	81a3      	strh	r3, [r4, #12]
 8000f6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f72:	e03e      	b.n	8000ff2 <__swsetup_r+0xba>
 8000f74:	4b25      	ldr	r3, [pc, #148]	; (800100c <__swsetup_r+0xd4>)
 8000f76:	429c      	cmp	r4, r3
 8000f78:	d101      	bne.n	8000f7e <__swsetup_r+0x46>
 8000f7a:	68ac      	ldr	r4, [r5, #8]
 8000f7c:	e7eb      	b.n	8000f56 <__swsetup_r+0x1e>
 8000f7e:	4b24      	ldr	r3, [pc, #144]	; (8001010 <__swsetup_r+0xd8>)
 8000f80:	429c      	cmp	r4, r3
 8000f82:	bf08      	it	eq
 8000f84:	68ec      	ldreq	r4, [r5, #12]
 8000f86:	e7e6      	b.n	8000f56 <__swsetup_r+0x1e>
 8000f88:	0758      	lsls	r0, r3, #29
 8000f8a:	d512      	bpl.n	8000fb2 <__swsetup_r+0x7a>
 8000f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f8e:	b141      	cbz	r1, 8000fa2 <__swsetup_r+0x6a>
 8000f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f94:	4299      	cmp	r1, r3
 8000f96:	d002      	beq.n	8000f9e <__swsetup_r+0x66>
 8000f98:	4630      	mov	r0, r6
 8000f9a:	f000 f991 	bl	80012c0 <_free_r>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	6363      	str	r3, [r4, #52]	; 0x34
 8000fa2:	89a3      	ldrh	r3, [r4, #12]
 8000fa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000fa8:	81a3      	strh	r3, [r4, #12]
 8000faa:	2300      	movs	r3, #0
 8000fac:	6063      	str	r3, [r4, #4]
 8000fae:	6923      	ldr	r3, [r4, #16]
 8000fb0:	6023      	str	r3, [r4, #0]
 8000fb2:	89a3      	ldrh	r3, [r4, #12]
 8000fb4:	f043 0308 	orr.w	r3, r3, #8
 8000fb8:	81a3      	strh	r3, [r4, #12]
 8000fba:	6923      	ldr	r3, [r4, #16]
 8000fbc:	b94b      	cbnz	r3, 8000fd2 <__swsetup_r+0x9a>
 8000fbe:	89a3      	ldrh	r3, [r4, #12]
 8000fc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fc8:	d003      	beq.n	8000fd2 <__swsetup_r+0x9a>
 8000fca:	4621      	mov	r1, r4
 8000fcc:	4630      	mov	r0, r6
 8000fce:	f000 f92b 	bl	8001228 <__smakebuf_r>
 8000fd2:	89a0      	ldrh	r0, [r4, #12]
 8000fd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000fd8:	f010 0301 	ands.w	r3, r0, #1
 8000fdc:	d00a      	beq.n	8000ff4 <__swsetup_r+0xbc>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60a3      	str	r3, [r4, #8]
 8000fe2:	6963      	ldr	r3, [r4, #20]
 8000fe4:	425b      	negs	r3, r3
 8000fe6:	61a3      	str	r3, [r4, #24]
 8000fe8:	6923      	ldr	r3, [r4, #16]
 8000fea:	b943      	cbnz	r3, 8000ffe <__swsetup_r+0xc6>
 8000fec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000ff0:	d1ba      	bne.n	8000f68 <__swsetup_r+0x30>
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
 8000ff4:	0781      	lsls	r1, r0, #30
 8000ff6:	bf58      	it	pl
 8000ff8:	6963      	ldrpl	r3, [r4, #20]
 8000ffa:	60a3      	str	r3, [r4, #8]
 8000ffc:	e7f4      	b.n	8000fe8 <__swsetup_r+0xb0>
 8000ffe:	2000      	movs	r0, #0
 8001000:	e7f7      	b.n	8000ff2 <__swsetup_r+0xba>
 8001002:	bf00      	nop
 8001004:	24000000 	.word	0x24000000
 8001008:	08001748 	.word	0x08001748
 800100c:	08001768 	.word	0x08001768
 8001010:	08001728 	.word	0x08001728

08001014 <_close_r>:
 8001014:	b538      	push	{r3, r4, r5, lr}
 8001016:	4d06      	ldr	r5, [pc, #24]	; (8001030 <_close_r+0x1c>)
 8001018:	2300      	movs	r3, #0
 800101a:	4604      	mov	r4, r0
 800101c:	4608      	mov	r0, r1
 800101e:	602b      	str	r3, [r5, #0]
 8001020:	f7ff fa3f 	bl	80004a2 <_close>
 8001024:	1c43      	adds	r3, r0, #1
 8001026:	d102      	bne.n	800102e <_close_r+0x1a>
 8001028:	682b      	ldr	r3, [r5, #0]
 800102a:	b103      	cbz	r3, 800102e <_close_r+0x1a>
 800102c:	6023      	str	r3, [r4, #0]
 800102e:	bd38      	pop	{r3, r4, r5, pc}
 8001030:	24000090 	.word	0x24000090

08001034 <__sflush_r>:
 8001034:	898a      	ldrh	r2, [r1, #12]
 8001036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800103a:	4605      	mov	r5, r0
 800103c:	0710      	lsls	r0, r2, #28
 800103e:	460c      	mov	r4, r1
 8001040:	d458      	bmi.n	80010f4 <__sflush_r+0xc0>
 8001042:	684b      	ldr	r3, [r1, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	dc05      	bgt.n	8001054 <__sflush_r+0x20>
 8001048:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800104a:	2b00      	cmp	r3, #0
 800104c:	dc02      	bgt.n	8001054 <__sflush_r+0x20>
 800104e:	2000      	movs	r0, #0
 8001050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001054:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001056:	2e00      	cmp	r6, #0
 8001058:	d0f9      	beq.n	800104e <__sflush_r+0x1a>
 800105a:	2300      	movs	r3, #0
 800105c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001060:	682f      	ldr	r7, [r5, #0]
 8001062:	6a21      	ldr	r1, [r4, #32]
 8001064:	602b      	str	r3, [r5, #0]
 8001066:	d032      	beq.n	80010ce <__sflush_r+0x9a>
 8001068:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800106a:	89a3      	ldrh	r3, [r4, #12]
 800106c:	075a      	lsls	r2, r3, #29
 800106e:	d505      	bpl.n	800107c <__sflush_r+0x48>
 8001070:	6863      	ldr	r3, [r4, #4]
 8001072:	1ac0      	subs	r0, r0, r3
 8001074:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001076:	b10b      	cbz	r3, 800107c <__sflush_r+0x48>
 8001078:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800107a:	1ac0      	subs	r0, r0, r3
 800107c:	2300      	movs	r3, #0
 800107e:	4602      	mov	r2, r0
 8001080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001082:	6a21      	ldr	r1, [r4, #32]
 8001084:	4628      	mov	r0, r5
 8001086:	47b0      	blx	r6
 8001088:	1c43      	adds	r3, r0, #1
 800108a:	89a3      	ldrh	r3, [r4, #12]
 800108c:	d106      	bne.n	800109c <__sflush_r+0x68>
 800108e:	6829      	ldr	r1, [r5, #0]
 8001090:	291d      	cmp	r1, #29
 8001092:	d82b      	bhi.n	80010ec <__sflush_r+0xb8>
 8001094:	4a29      	ldr	r2, [pc, #164]	; (800113c <__sflush_r+0x108>)
 8001096:	410a      	asrs	r2, r1
 8001098:	07d6      	lsls	r6, r2, #31
 800109a:	d427      	bmi.n	80010ec <__sflush_r+0xb8>
 800109c:	2200      	movs	r2, #0
 800109e:	6062      	str	r2, [r4, #4]
 80010a0:	04d9      	lsls	r1, r3, #19
 80010a2:	6922      	ldr	r2, [r4, #16]
 80010a4:	6022      	str	r2, [r4, #0]
 80010a6:	d504      	bpl.n	80010b2 <__sflush_r+0x7e>
 80010a8:	1c42      	adds	r2, r0, #1
 80010aa:	d101      	bne.n	80010b0 <__sflush_r+0x7c>
 80010ac:	682b      	ldr	r3, [r5, #0]
 80010ae:	b903      	cbnz	r3, 80010b2 <__sflush_r+0x7e>
 80010b0:	6560      	str	r0, [r4, #84]	; 0x54
 80010b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80010b4:	602f      	str	r7, [r5, #0]
 80010b6:	2900      	cmp	r1, #0
 80010b8:	d0c9      	beq.n	800104e <__sflush_r+0x1a>
 80010ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80010be:	4299      	cmp	r1, r3
 80010c0:	d002      	beq.n	80010c8 <__sflush_r+0x94>
 80010c2:	4628      	mov	r0, r5
 80010c4:	f000 f8fc 	bl	80012c0 <_free_r>
 80010c8:	2000      	movs	r0, #0
 80010ca:	6360      	str	r0, [r4, #52]	; 0x34
 80010cc:	e7c0      	b.n	8001050 <__sflush_r+0x1c>
 80010ce:	2301      	movs	r3, #1
 80010d0:	4628      	mov	r0, r5
 80010d2:	47b0      	blx	r6
 80010d4:	1c41      	adds	r1, r0, #1
 80010d6:	d1c8      	bne.n	800106a <__sflush_r+0x36>
 80010d8:	682b      	ldr	r3, [r5, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0c5      	beq.n	800106a <__sflush_r+0x36>
 80010de:	2b1d      	cmp	r3, #29
 80010e0:	d001      	beq.n	80010e6 <__sflush_r+0xb2>
 80010e2:	2b16      	cmp	r3, #22
 80010e4:	d101      	bne.n	80010ea <__sflush_r+0xb6>
 80010e6:	602f      	str	r7, [r5, #0]
 80010e8:	e7b1      	b.n	800104e <__sflush_r+0x1a>
 80010ea:	89a3      	ldrh	r3, [r4, #12]
 80010ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f0:	81a3      	strh	r3, [r4, #12]
 80010f2:	e7ad      	b.n	8001050 <__sflush_r+0x1c>
 80010f4:	690f      	ldr	r7, [r1, #16]
 80010f6:	2f00      	cmp	r7, #0
 80010f8:	d0a9      	beq.n	800104e <__sflush_r+0x1a>
 80010fa:	0793      	lsls	r3, r2, #30
 80010fc:	680e      	ldr	r6, [r1, #0]
 80010fe:	bf08      	it	eq
 8001100:	694b      	ldreq	r3, [r1, #20]
 8001102:	600f      	str	r7, [r1, #0]
 8001104:	bf18      	it	ne
 8001106:	2300      	movne	r3, #0
 8001108:	eba6 0807 	sub.w	r8, r6, r7
 800110c:	608b      	str	r3, [r1, #8]
 800110e:	f1b8 0f00 	cmp.w	r8, #0
 8001112:	dd9c      	ble.n	800104e <__sflush_r+0x1a>
 8001114:	6a21      	ldr	r1, [r4, #32]
 8001116:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001118:	4643      	mov	r3, r8
 800111a:	463a      	mov	r2, r7
 800111c:	4628      	mov	r0, r5
 800111e:	47b0      	blx	r6
 8001120:	2800      	cmp	r0, #0
 8001122:	dc06      	bgt.n	8001132 <__sflush_r+0xfe>
 8001124:	89a3      	ldrh	r3, [r4, #12]
 8001126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800112a:	81a3      	strh	r3, [r4, #12]
 800112c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001130:	e78e      	b.n	8001050 <__sflush_r+0x1c>
 8001132:	4407      	add	r7, r0
 8001134:	eba8 0800 	sub.w	r8, r8, r0
 8001138:	e7e9      	b.n	800110e <__sflush_r+0xda>
 800113a:	bf00      	nop
 800113c:	dfbffffe 	.word	0xdfbffffe

08001140 <_fflush_r>:
 8001140:	b538      	push	{r3, r4, r5, lr}
 8001142:	690b      	ldr	r3, [r1, #16]
 8001144:	4605      	mov	r5, r0
 8001146:	460c      	mov	r4, r1
 8001148:	b913      	cbnz	r3, 8001150 <_fflush_r+0x10>
 800114a:	2500      	movs	r5, #0
 800114c:	4628      	mov	r0, r5
 800114e:	bd38      	pop	{r3, r4, r5, pc}
 8001150:	b118      	cbz	r0, 800115a <_fflush_r+0x1a>
 8001152:	6983      	ldr	r3, [r0, #24]
 8001154:	b90b      	cbnz	r3, 800115a <_fflush_r+0x1a>
 8001156:	f7ff fbab 	bl	80008b0 <__sinit>
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <_fflush_r+0x6c>)
 800115c:	429c      	cmp	r4, r3
 800115e:	d11b      	bne.n	8001198 <_fflush_r+0x58>
 8001160:	686c      	ldr	r4, [r5, #4]
 8001162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0ef      	beq.n	800114a <_fflush_r+0xa>
 800116a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800116c:	07d0      	lsls	r0, r2, #31
 800116e:	d404      	bmi.n	800117a <_fflush_r+0x3a>
 8001170:	0599      	lsls	r1, r3, #22
 8001172:	d402      	bmi.n	800117a <_fflush_r+0x3a>
 8001174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001176:	f7ff fc39 	bl	80009ec <__retarget_lock_acquire_recursive>
 800117a:	4628      	mov	r0, r5
 800117c:	4621      	mov	r1, r4
 800117e:	f7ff ff59 	bl	8001034 <__sflush_r>
 8001182:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001184:	07da      	lsls	r2, r3, #31
 8001186:	4605      	mov	r5, r0
 8001188:	d4e0      	bmi.n	800114c <_fflush_r+0xc>
 800118a:	89a3      	ldrh	r3, [r4, #12]
 800118c:	059b      	lsls	r3, r3, #22
 800118e:	d4dd      	bmi.n	800114c <_fflush_r+0xc>
 8001190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001192:	f7ff fc2c 	bl	80009ee <__retarget_lock_release_recursive>
 8001196:	e7d9      	b.n	800114c <_fflush_r+0xc>
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <_fflush_r+0x70>)
 800119a:	429c      	cmp	r4, r3
 800119c:	d101      	bne.n	80011a2 <_fflush_r+0x62>
 800119e:	68ac      	ldr	r4, [r5, #8]
 80011a0:	e7df      	b.n	8001162 <_fflush_r+0x22>
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <_fflush_r+0x74>)
 80011a4:	429c      	cmp	r4, r3
 80011a6:	bf08      	it	eq
 80011a8:	68ec      	ldreq	r4, [r5, #12]
 80011aa:	e7da      	b.n	8001162 <_fflush_r+0x22>
 80011ac:	08001748 	.word	0x08001748
 80011b0:	08001768 	.word	0x08001768
 80011b4:	08001728 	.word	0x08001728

080011b8 <_lseek_r>:
 80011b8:	b538      	push	{r3, r4, r5, lr}
 80011ba:	4d07      	ldr	r5, [pc, #28]	; (80011d8 <_lseek_r+0x20>)
 80011bc:	4604      	mov	r4, r0
 80011be:	4608      	mov	r0, r1
 80011c0:	4611      	mov	r1, r2
 80011c2:	2200      	movs	r2, #0
 80011c4:	602a      	str	r2, [r5, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	f7ff f992 	bl	80004f0 <_lseek>
 80011cc:	1c43      	adds	r3, r0, #1
 80011ce:	d102      	bne.n	80011d6 <_lseek_r+0x1e>
 80011d0:	682b      	ldr	r3, [r5, #0]
 80011d2:	b103      	cbz	r3, 80011d6 <_lseek_r+0x1e>
 80011d4:	6023      	str	r3, [r4, #0]
 80011d6:	bd38      	pop	{r3, r4, r5, pc}
 80011d8:	24000090 	.word	0x24000090

080011dc <__swhatbuf_r>:
 80011dc:	b570      	push	{r4, r5, r6, lr}
 80011de:	460c      	mov	r4, r1
 80011e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011e4:	2900      	cmp	r1, #0
 80011e6:	b096      	sub	sp, #88	; 0x58
 80011e8:	4615      	mov	r5, r2
 80011ea:	461e      	mov	r6, r3
 80011ec:	da0d      	bge.n	800120a <__swhatbuf_r+0x2e>
 80011ee:	89a3      	ldrh	r3, [r4, #12]
 80011f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80011f4:	f04f 0100 	mov.w	r1, #0
 80011f8:	bf0c      	ite	eq
 80011fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80011fe:	2340      	movne	r3, #64	; 0x40
 8001200:	2000      	movs	r0, #0
 8001202:	6031      	str	r1, [r6, #0]
 8001204:	602b      	str	r3, [r5, #0]
 8001206:	b016      	add	sp, #88	; 0x58
 8001208:	bd70      	pop	{r4, r5, r6, pc}
 800120a:	466a      	mov	r2, sp
 800120c:	f000 fa46 	bl	800169c <_fstat_r>
 8001210:	2800      	cmp	r0, #0
 8001212:	dbec      	blt.n	80011ee <__swhatbuf_r+0x12>
 8001214:	9901      	ldr	r1, [sp, #4]
 8001216:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800121a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800121e:	4259      	negs	r1, r3
 8001220:	4159      	adcs	r1, r3
 8001222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001226:	e7eb      	b.n	8001200 <__swhatbuf_r+0x24>

08001228 <__smakebuf_r>:
 8001228:	898b      	ldrh	r3, [r1, #12]
 800122a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800122c:	079d      	lsls	r5, r3, #30
 800122e:	4606      	mov	r6, r0
 8001230:	460c      	mov	r4, r1
 8001232:	d507      	bpl.n	8001244 <__smakebuf_r+0x1c>
 8001234:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001238:	6023      	str	r3, [r4, #0]
 800123a:	6123      	str	r3, [r4, #16]
 800123c:	2301      	movs	r3, #1
 800123e:	6163      	str	r3, [r4, #20]
 8001240:	b002      	add	sp, #8
 8001242:	bd70      	pop	{r4, r5, r6, pc}
 8001244:	ab01      	add	r3, sp, #4
 8001246:	466a      	mov	r2, sp
 8001248:	f7ff ffc8 	bl	80011dc <__swhatbuf_r>
 800124c:	9900      	ldr	r1, [sp, #0]
 800124e:	4605      	mov	r5, r0
 8001250:	4630      	mov	r0, r6
 8001252:	f7ff fbed 	bl	8000a30 <_malloc_r>
 8001256:	b948      	cbnz	r0, 800126c <__smakebuf_r+0x44>
 8001258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800125c:	059a      	lsls	r2, r3, #22
 800125e:	d4ef      	bmi.n	8001240 <__smakebuf_r+0x18>
 8001260:	f023 0303 	bic.w	r3, r3, #3
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	81a3      	strh	r3, [r4, #12]
 800126a:	e7e3      	b.n	8001234 <__smakebuf_r+0xc>
 800126c:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <__smakebuf_r+0x7c>)
 800126e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001270:	89a3      	ldrh	r3, [r4, #12]
 8001272:	6020      	str	r0, [r4, #0]
 8001274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001278:	81a3      	strh	r3, [r4, #12]
 800127a:	9b00      	ldr	r3, [sp, #0]
 800127c:	6163      	str	r3, [r4, #20]
 800127e:	9b01      	ldr	r3, [sp, #4]
 8001280:	6120      	str	r0, [r4, #16]
 8001282:	b15b      	cbz	r3, 800129c <__smakebuf_r+0x74>
 8001284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001288:	4630      	mov	r0, r6
 800128a:	f000 fa19 	bl	80016c0 <_isatty_r>
 800128e:	b128      	cbz	r0, 800129c <__smakebuf_r+0x74>
 8001290:	89a3      	ldrh	r3, [r4, #12]
 8001292:	f023 0303 	bic.w	r3, r3, #3
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	81a3      	strh	r3, [r4, #12]
 800129c:	89a3      	ldrh	r3, [r4, #12]
 800129e:	431d      	orrs	r5, r3
 80012a0:	81a5      	strh	r5, [r4, #12]
 80012a2:	e7cd      	b.n	8001240 <__smakebuf_r+0x18>
 80012a4:	08000849 	.word	0x08000849

080012a8 <__malloc_lock>:
 80012a8:	4801      	ldr	r0, [pc, #4]	; (80012b0 <__malloc_lock+0x8>)
 80012aa:	f7ff bb9f 	b.w	80009ec <__retarget_lock_acquire_recursive>
 80012ae:	bf00      	nop
 80012b0:	24000084 	.word	0x24000084

080012b4 <__malloc_unlock>:
 80012b4:	4801      	ldr	r0, [pc, #4]	; (80012bc <__malloc_unlock+0x8>)
 80012b6:	f7ff bb9a 	b.w	80009ee <__retarget_lock_release_recursive>
 80012ba:	bf00      	nop
 80012bc:	24000084 	.word	0x24000084

080012c0 <_free_r>:
 80012c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80012c2:	2900      	cmp	r1, #0
 80012c4:	d044      	beq.n	8001350 <_free_r+0x90>
 80012c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012ca:	9001      	str	r0, [sp, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f1a1 0404 	sub.w	r4, r1, #4
 80012d2:	bfb8      	it	lt
 80012d4:	18e4      	addlt	r4, r4, r3
 80012d6:	f7ff ffe7 	bl	80012a8 <__malloc_lock>
 80012da:	4a1e      	ldr	r2, [pc, #120]	; (8001354 <_free_r+0x94>)
 80012dc:	9801      	ldr	r0, [sp, #4]
 80012de:	6813      	ldr	r3, [r2, #0]
 80012e0:	b933      	cbnz	r3, 80012f0 <_free_r+0x30>
 80012e2:	6063      	str	r3, [r4, #4]
 80012e4:	6014      	str	r4, [r2, #0]
 80012e6:	b003      	add	sp, #12
 80012e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80012ec:	f7ff bfe2 	b.w	80012b4 <__malloc_unlock>
 80012f0:	42a3      	cmp	r3, r4
 80012f2:	d908      	bls.n	8001306 <_free_r+0x46>
 80012f4:	6825      	ldr	r5, [r4, #0]
 80012f6:	1961      	adds	r1, r4, r5
 80012f8:	428b      	cmp	r3, r1
 80012fa:	bf01      	itttt	eq
 80012fc:	6819      	ldreq	r1, [r3, #0]
 80012fe:	685b      	ldreq	r3, [r3, #4]
 8001300:	1949      	addeq	r1, r1, r5
 8001302:	6021      	streq	r1, [r4, #0]
 8001304:	e7ed      	b.n	80012e2 <_free_r+0x22>
 8001306:	461a      	mov	r2, r3
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	b10b      	cbz	r3, 8001310 <_free_r+0x50>
 800130c:	42a3      	cmp	r3, r4
 800130e:	d9fa      	bls.n	8001306 <_free_r+0x46>
 8001310:	6811      	ldr	r1, [r2, #0]
 8001312:	1855      	adds	r5, r2, r1
 8001314:	42a5      	cmp	r5, r4
 8001316:	d10b      	bne.n	8001330 <_free_r+0x70>
 8001318:	6824      	ldr	r4, [r4, #0]
 800131a:	4421      	add	r1, r4
 800131c:	1854      	adds	r4, r2, r1
 800131e:	42a3      	cmp	r3, r4
 8001320:	6011      	str	r1, [r2, #0]
 8001322:	d1e0      	bne.n	80012e6 <_free_r+0x26>
 8001324:	681c      	ldr	r4, [r3, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	6053      	str	r3, [r2, #4]
 800132a:	440c      	add	r4, r1
 800132c:	6014      	str	r4, [r2, #0]
 800132e:	e7da      	b.n	80012e6 <_free_r+0x26>
 8001330:	d902      	bls.n	8001338 <_free_r+0x78>
 8001332:	230c      	movs	r3, #12
 8001334:	6003      	str	r3, [r0, #0]
 8001336:	e7d6      	b.n	80012e6 <_free_r+0x26>
 8001338:	6825      	ldr	r5, [r4, #0]
 800133a:	1961      	adds	r1, r4, r5
 800133c:	428b      	cmp	r3, r1
 800133e:	bf04      	itt	eq
 8001340:	6819      	ldreq	r1, [r3, #0]
 8001342:	685b      	ldreq	r3, [r3, #4]
 8001344:	6063      	str	r3, [r4, #4]
 8001346:	bf04      	itt	eq
 8001348:	1949      	addeq	r1, r1, r5
 800134a:	6021      	streq	r1, [r4, #0]
 800134c:	6054      	str	r4, [r2, #4]
 800134e:	e7ca      	b.n	80012e6 <_free_r+0x26>
 8001350:	b003      	add	sp, #12
 8001352:	bd30      	pop	{r4, r5, pc}
 8001354:	24000088 	.word	0x24000088

08001358 <_printf_common>:
 8001358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800135c:	4616      	mov	r6, r2
 800135e:	4699      	mov	r9, r3
 8001360:	688a      	ldr	r2, [r1, #8]
 8001362:	690b      	ldr	r3, [r1, #16]
 8001364:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001368:	4293      	cmp	r3, r2
 800136a:	bfb8      	it	lt
 800136c:	4613      	movlt	r3, r2
 800136e:	6033      	str	r3, [r6, #0]
 8001370:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001374:	4607      	mov	r7, r0
 8001376:	460c      	mov	r4, r1
 8001378:	b10a      	cbz	r2, 800137e <_printf_common+0x26>
 800137a:	3301      	adds	r3, #1
 800137c:	6033      	str	r3, [r6, #0]
 800137e:	6823      	ldr	r3, [r4, #0]
 8001380:	0699      	lsls	r1, r3, #26
 8001382:	bf42      	ittt	mi
 8001384:	6833      	ldrmi	r3, [r6, #0]
 8001386:	3302      	addmi	r3, #2
 8001388:	6033      	strmi	r3, [r6, #0]
 800138a:	6825      	ldr	r5, [r4, #0]
 800138c:	f015 0506 	ands.w	r5, r5, #6
 8001390:	d106      	bne.n	80013a0 <_printf_common+0x48>
 8001392:	f104 0a19 	add.w	sl, r4, #25
 8001396:	68e3      	ldr	r3, [r4, #12]
 8001398:	6832      	ldr	r2, [r6, #0]
 800139a:	1a9b      	subs	r3, r3, r2
 800139c:	42ab      	cmp	r3, r5
 800139e:	dc26      	bgt.n	80013ee <_printf_common+0x96>
 80013a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80013a4:	1e13      	subs	r3, r2, #0
 80013a6:	6822      	ldr	r2, [r4, #0]
 80013a8:	bf18      	it	ne
 80013aa:	2301      	movne	r3, #1
 80013ac:	0692      	lsls	r2, r2, #26
 80013ae:	d42b      	bmi.n	8001408 <_printf_common+0xb0>
 80013b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80013b4:	4649      	mov	r1, r9
 80013b6:	4638      	mov	r0, r7
 80013b8:	47c0      	blx	r8
 80013ba:	3001      	adds	r0, #1
 80013bc:	d01e      	beq.n	80013fc <_printf_common+0xa4>
 80013be:	6823      	ldr	r3, [r4, #0]
 80013c0:	6922      	ldr	r2, [r4, #16]
 80013c2:	f003 0306 	and.w	r3, r3, #6
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	bf02      	ittt	eq
 80013ca:	68e5      	ldreq	r5, [r4, #12]
 80013cc:	6833      	ldreq	r3, [r6, #0]
 80013ce:	1aed      	subeq	r5, r5, r3
 80013d0:	68a3      	ldr	r3, [r4, #8]
 80013d2:	bf0c      	ite	eq
 80013d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80013d8:	2500      	movne	r5, #0
 80013da:	4293      	cmp	r3, r2
 80013dc:	bfc4      	itt	gt
 80013de:	1a9b      	subgt	r3, r3, r2
 80013e0:	18ed      	addgt	r5, r5, r3
 80013e2:	2600      	movs	r6, #0
 80013e4:	341a      	adds	r4, #26
 80013e6:	42b5      	cmp	r5, r6
 80013e8:	d11a      	bne.n	8001420 <_printf_common+0xc8>
 80013ea:	2000      	movs	r0, #0
 80013ec:	e008      	b.n	8001400 <_printf_common+0xa8>
 80013ee:	2301      	movs	r3, #1
 80013f0:	4652      	mov	r2, sl
 80013f2:	4649      	mov	r1, r9
 80013f4:	4638      	mov	r0, r7
 80013f6:	47c0      	blx	r8
 80013f8:	3001      	adds	r0, #1
 80013fa:	d103      	bne.n	8001404 <_printf_common+0xac>
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001404:	3501      	adds	r5, #1
 8001406:	e7c6      	b.n	8001396 <_printf_common+0x3e>
 8001408:	18e1      	adds	r1, r4, r3
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	2030      	movs	r0, #48	; 0x30
 800140e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001412:	4422      	add	r2, r4
 8001414:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001418:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800141c:	3302      	adds	r3, #2
 800141e:	e7c7      	b.n	80013b0 <_printf_common+0x58>
 8001420:	2301      	movs	r3, #1
 8001422:	4622      	mov	r2, r4
 8001424:	4649      	mov	r1, r9
 8001426:	4638      	mov	r0, r7
 8001428:	47c0      	blx	r8
 800142a:	3001      	adds	r0, #1
 800142c:	d0e6      	beq.n	80013fc <_printf_common+0xa4>
 800142e:	3601      	adds	r6, #1
 8001430:	e7d9      	b.n	80013e6 <_printf_common+0x8e>
	...

08001434 <_printf_i>:
 8001434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001438:	7e0f      	ldrb	r7, [r1, #24]
 800143a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800143c:	2f78      	cmp	r7, #120	; 0x78
 800143e:	4691      	mov	r9, r2
 8001440:	4680      	mov	r8, r0
 8001442:	460c      	mov	r4, r1
 8001444:	469a      	mov	sl, r3
 8001446:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800144a:	d807      	bhi.n	800145c <_printf_i+0x28>
 800144c:	2f62      	cmp	r7, #98	; 0x62
 800144e:	d80a      	bhi.n	8001466 <_printf_i+0x32>
 8001450:	2f00      	cmp	r7, #0
 8001452:	f000 80d4 	beq.w	80015fe <_printf_i+0x1ca>
 8001456:	2f58      	cmp	r7, #88	; 0x58
 8001458:	f000 80c0 	beq.w	80015dc <_printf_i+0x1a8>
 800145c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001460:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001464:	e03a      	b.n	80014dc <_printf_i+0xa8>
 8001466:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800146a:	2b15      	cmp	r3, #21
 800146c:	d8f6      	bhi.n	800145c <_printf_i+0x28>
 800146e:	a101      	add	r1, pc, #4	; (adr r1, 8001474 <_printf_i+0x40>)
 8001470:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001474:	080014cd 	.word	0x080014cd
 8001478:	080014e1 	.word	0x080014e1
 800147c:	0800145d 	.word	0x0800145d
 8001480:	0800145d 	.word	0x0800145d
 8001484:	0800145d 	.word	0x0800145d
 8001488:	0800145d 	.word	0x0800145d
 800148c:	080014e1 	.word	0x080014e1
 8001490:	0800145d 	.word	0x0800145d
 8001494:	0800145d 	.word	0x0800145d
 8001498:	0800145d 	.word	0x0800145d
 800149c:	0800145d 	.word	0x0800145d
 80014a0:	080015e5 	.word	0x080015e5
 80014a4:	0800150d 	.word	0x0800150d
 80014a8:	0800159f 	.word	0x0800159f
 80014ac:	0800145d 	.word	0x0800145d
 80014b0:	0800145d 	.word	0x0800145d
 80014b4:	08001607 	.word	0x08001607
 80014b8:	0800145d 	.word	0x0800145d
 80014bc:	0800150d 	.word	0x0800150d
 80014c0:	0800145d 	.word	0x0800145d
 80014c4:	0800145d 	.word	0x0800145d
 80014c8:	080015a7 	.word	0x080015a7
 80014cc:	682b      	ldr	r3, [r5, #0]
 80014ce:	1d1a      	adds	r2, r3, #4
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	602a      	str	r2, [r5, #0]
 80014d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80014d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80014dc:	2301      	movs	r3, #1
 80014de:	e09f      	b.n	8001620 <_printf_i+0x1ec>
 80014e0:	6820      	ldr	r0, [r4, #0]
 80014e2:	682b      	ldr	r3, [r5, #0]
 80014e4:	0607      	lsls	r7, r0, #24
 80014e6:	f103 0104 	add.w	r1, r3, #4
 80014ea:	6029      	str	r1, [r5, #0]
 80014ec:	d501      	bpl.n	80014f2 <_printf_i+0xbe>
 80014ee:	681e      	ldr	r6, [r3, #0]
 80014f0:	e003      	b.n	80014fa <_printf_i+0xc6>
 80014f2:	0646      	lsls	r6, r0, #25
 80014f4:	d5fb      	bpl.n	80014ee <_printf_i+0xba>
 80014f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80014fa:	2e00      	cmp	r6, #0
 80014fc:	da03      	bge.n	8001506 <_printf_i+0xd2>
 80014fe:	232d      	movs	r3, #45	; 0x2d
 8001500:	4276      	negs	r6, r6
 8001502:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001506:	485a      	ldr	r0, [pc, #360]	; (8001670 <_printf_i+0x23c>)
 8001508:	230a      	movs	r3, #10
 800150a:	e012      	b.n	8001532 <_printf_i+0xfe>
 800150c:	682b      	ldr	r3, [r5, #0]
 800150e:	6820      	ldr	r0, [r4, #0]
 8001510:	1d19      	adds	r1, r3, #4
 8001512:	6029      	str	r1, [r5, #0]
 8001514:	0605      	lsls	r5, r0, #24
 8001516:	d501      	bpl.n	800151c <_printf_i+0xe8>
 8001518:	681e      	ldr	r6, [r3, #0]
 800151a:	e002      	b.n	8001522 <_printf_i+0xee>
 800151c:	0641      	lsls	r1, r0, #25
 800151e:	d5fb      	bpl.n	8001518 <_printf_i+0xe4>
 8001520:	881e      	ldrh	r6, [r3, #0]
 8001522:	4853      	ldr	r0, [pc, #332]	; (8001670 <_printf_i+0x23c>)
 8001524:	2f6f      	cmp	r7, #111	; 0x6f
 8001526:	bf0c      	ite	eq
 8001528:	2308      	moveq	r3, #8
 800152a:	230a      	movne	r3, #10
 800152c:	2100      	movs	r1, #0
 800152e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001532:	6865      	ldr	r5, [r4, #4]
 8001534:	60a5      	str	r5, [r4, #8]
 8001536:	2d00      	cmp	r5, #0
 8001538:	bfa2      	ittt	ge
 800153a:	6821      	ldrge	r1, [r4, #0]
 800153c:	f021 0104 	bicge.w	r1, r1, #4
 8001540:	6021      	strge	r1, [r4, #0]
 8001542:	b90e      	cbnz	r6, 8001548 <_printf_i+0x114>
 8001544:	2d00      	cmp	r5, #0
 8001546:	d04b      	beq.n	80015e0 <_printf_i+0x1ac>
 8001548:	4615      	mov	r5, r2
 800154a:	fbb6 f1f3 	udiv	r1, r6, r3
 800154e:	fb03 6711 	mls	r7, r3, r1, r6
 8001552:	5dc7      	ldrb	r7, [r0, r7]
 8001554:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001558:	4637      	mov	r7, r6
 800155a:	42bb      	cmp	r3, r7
 800155c:	460e      	mov	r6, r1
 800155e:	d9f4      	bls.n	800154a <_printf_i+0x116>
 8001560:	2b08      	cmp	r3, #8
 8001562:	d10b      	bne.n	800157c <_printf_i+0x148>
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	07de      	lsls	r6, r3, #31
 8001568:	d508      	bpl.n	800157c <_printf_i+0x148>
 800156a:	6923      	ldr	r3, [r4, #16]
 800156c:	6861      	ldr	r1, [r4, #4]
 800156e:	4299      	cmp	r1, r3
 8001570:	bfde      	ittt	le
 8001572:	2330      	movle	r3, #48	; 0x30
 8001574:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001578:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800157c:	1b52      	subs	r2, r2, r5
 800157e:	6122      	str	r2, [r4, #16]
 8001580:	f8cd a000 	str.w	sl, [sp]
 8001584:	464b      	mov	r3, r9
 8001586:	aa03      	add	r2, sp, #12
 8001588:	4621      	mov	r1, r4
 800158a:	4640      	mov	r0, r8
 800158c:	f7ff fee4 	bl	8001358 <_printf_common>
 8001590:	3001      	adds	r0, #1
 8001592:	d14a      	bne.n	800162a <_printf_i+0x1f6>
 8001594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001598:	b004      	add	sp, #16
 800159a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800159e:	6823      	ldr	r3, [r4, #0]
 80015a0:	f043 0320 	orr.w	r3, r3, #32
 80015a4:	6023      	str	r3, [r4, #0]
 80015a6:	4833      	ldr	r0, [pc, #204]	; (8001674 <_printf_i+0x240>)
 80015a8:	2778      	movs	r7, #120	; 0x78
 80015aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80015ae:	6823      	ldr	r3, [r4, #0]
 80015b0:	6829      	ldr	r1, [r5, #0]
 80015b2:	061f      	lsls	r7, r3, #24
 80015b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80015b8:	d402      	bmi.n	80015c0 <_printf_i+0x18c>
 80015ba:	065f      	lsls	r7, r3, #25
 80015bc:	bf48      	it	mi
 80015be:	b2b6      	uxthmi	r6, r6
 80015c0:	07df      	lsls	r7, r3, #31
 80015c2:	bf48      	it	mi
 80015c4:	f043 0320 	orrmi.w	r3, r3, #32
 80015c8:	6029      	str	r1, [r5, #0]
 80015ca:	bf48      	it	mi
 80015cc:	6023      	strmi	r3, [r4, #0]
 80015ce:	b91e      	cbnz	r6, 80015d8 <_printf_i+0x1a4>
 80015d0:	6823      	ldr	r3, [r4, #0]
 80015d2:	f023 0320 	bic.w	r3, r3, #32
 80015d6:	6023      	str	r3, [r4, #0]
 80015d8:	2310      	movs	r3, #16
 80015da:	e7a7      	b.n	800152c <_printf_i+0xf8>
 80015dc:	4824      	ldr	r0, [pc, #144]	; (8001670 <_printf_i+0x23c>)
 80015de:	e7e4      	b.n	80015aa <_printf_i+0x176>
 80015e0:	4615      	mov	r5, r2
 80015e2:	e7bd      	b.n	8001560 <_printf_i+0x12c>
 80015e4:	682b      	ldr	r3, [r5, #0]
 80015e6:	6826      	ldr	r6, [r4, #0]
 80015e8:	6961      	ldr	r1, [r4, #20]
 80015ea:	1d18      	adds	r0, r3, #4
 80015ec:	6028      	str	r0, [r5, #0]
 80015ee:	0635      	lsls	r5, r6, #24
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	d501      	bpl.n	80015f8 <_printf_i+0x1c4>
 80015f4:	6019      	str	r1, [r3, #0]
 80015f6:	e002      	b.n	80015fe <_printf_i+0x1ca>
 80015f8:	0670      	lsls	r0, r6, #25
 80015fa:	d5fb      	bpl.n	80015f4 <_printf_i+0x1c0>
 80015fc:	8019      	strh	r1, [r3, #0]
 80015fe:	2300      	movs	r3, #0
 8001600:	6123      	str	r3, [r4, #16]
 8001602:	4615      	mov	r5, r2
 8001604:	e7bc      	b.n	8001580 <_printf_i+0x14c>
 8001606:	682b      	ldr	r3, [r5, #0]
 8001608:	1d1a      	adds	r2, r3, #4
 800160a:	602a      	str	r2, [r5, #0]
 800160c:	681d      	ldr	r5, [r3, #0]
 800160e:	6862      	ldr	r2, [r4, #4]
 8001610:	2100      	movs	r1, #0
 8001612:	4628      	mov	r0, r5
 8001614:	f7fe fe44 	bl	80002a0 <memchr>
 8001618:	b108      	cbz	r0, 800161e <_printf_i+0x1ea>
 800161a:	1b40      	subs	r0, r0, r5
 800161c:	6060      	str	r0, [r4, #4]
 800161e:	6863      	ldr	r3, [r4, #4]
 8001620:	6123      	str	r3, [r4, #16]
 8001622:	2300      	movs	r3, #0
 8001624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001628:	e7aa      	b.n	8001580 <_printf_i+0x14c>
 800162a:	6923      	ldr	r3, [r4, #16]
 800162c:	462a      	mov	r2, r5
 800162e:	4649      	mov	r1, r9
 8001630:	4640      	mov	r0, r8
 8001632:	47d0      	blx	sl
 8001634:	3001      	adds	r0, #1
 8001636:	d0ad      	beq.n	8001594 <_printf_i+0x160>
 8001638:	6823      	ldr	r3, [r4, #0]
 800163a:	079b      	lsls	r3, r3, #30
 800163c:	d413      	bmi.n	8001666 <_printf_i+0x232>
 800163e:	68e0      	ldr	r0, [r4, #12]
 8001640:	9b03      	ldr	r3, [sp, #12]
 8001642:	4298      	cmp	r0, r3
 8001644:	bfb8      	it	lt
 8001646:	4618      	movlt	r0, r3
 8001648:	e7a6      	b.n	8001598 <_printf_i+0x164>
 800164a:	2301      	movs	r3, #1
 800164c:	4632      	mov	r2, r6
 800164e:	4649      	mov	r1, r9
 8001650:	4640      	mov	r0, r8
 8001652:	47d0      	blx	sl
 8001654:	3001      	adds	r0, #1
 8001656:	d09d      	beq.n	8001594 <_printf_i+0x160>
 8001658:	3501      	adds	r5, #1
 800165a:	68e3      	ldr	r3, [r4, #12]
 800165c:	9903      	ldr	r1, [sp, #12]
 800165e:	1a5b      	subs	r3, r3, r1
 8001660:	42ab      	cmp	r3, r5
 8001662:	dcf2      	bgt.n	800164a <_printf_i+0x216>
 8001664:	e7eb      	b.n	800163e <_printf_i+0x20a>
 8001666:	2500      	movs	r5, #0
 8001668:	f104 0619 	add.w	r6, r4, #25
 800166c:	e7f5      	b.n	800165a <_printf_i+0x226>
 800166e:	bf00      	nop
 8001670:	08001799 	.word	0x08001799
 8001674:	080017aa 	.word	0x080017aa

08001678 <_read_r>:
 8001678:	b538      	push	{r3, r4, r5, lr}
 800167a:	4d07      	ldr	r5, [pc, #28]	; (8001698 <_read_r+0x20>)
 800167c:	4604      	mov	r4, r0
 800167e:	4608      	mov	r0, r1
 8001680:	4611      	mov	r1, r2
 8001682:	2200      	movs	r2, #0
 8001684:	602a      	str	r2, [r5, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	f7fe fed2 	bl	8000430 <_read>
 800168c:	1c43      	adds	r3, r0, #1
 800168e:	d102      	bne.n	8001696 <_read_r+0x1e>
 8001690:	682b      	ldr	r3, [r5, #0]
 8001692:	b103      	cbz	r3, 8001696 <_read_r+0x1e>
 8001694:	6023      	str	r3, [r4, #0]
 8001696:	bd38      	pop	{r3, r4, r5, pc}
 8001698:	24000090 	.word	0x24000090

0800169c <_fstat_r>:
 800169c:	b538      	push	{r3, r4, r5, lr}
 800169e:	4d07      	ldr	r5, [pc, #28]	; (80016bc <_fstat_r+0x20>)
 80016a0:	2300      	movs	r3, #0
 80016a2:	4604      	mov	r4, r0
 80016a4:	4608      	mov	r0, r1
 80016a6:	4611      	mov	r1, r2
 80016a8:	602b      	str	r3, [r5, #0]
 80016aa:	f7fe ff06 	bl	80004ba <_fstat>
 80016ae:	1c43      	adds	r3, r0, #1
 80016b0:	d102      	bne.n	80016b8 <_fstat_r+0x1c>
 80016b2:	682b      	ldr	r3, [r5, #0]
 80016b4:	b103      	cbz	r3, 80016b8 <_fstat_r+0x1c>
 80016b6:	6023      	str	r3, [r4, #0]
 80016b8:	bd38      	pop	{r3, r4, r5, pc}
 80016ba:	bf00      	nop
 80016bc:	24000090 	.word	0x24000090

080016c0 <_isatty_r>:
 80016c0:	b538      	push	{r3, r4, r5, lr}
 80016c2:	4d06      	ldr	r5, [pc, #24]	; (80016dc <_isatty_r+0x1c>)
 80016c4:	2300      	movs	r3, #0
 80016c6:	4604      	mov	r4, r0
 80016c8:	4608      	mov	r0, r1
 80016ca:	602b      	str	r3, [r5, #0]
 80016cc:	f7fe ff05 	bl	80004da <_isatty>
 80016d0:	1c43      	adds	r3, r0, #1
 80016d2:	d102      	bne.n	80016da <_isatty_r+0x1a>
 80016d4:	682b      	ldr	r3, [r5, #0]
 80016d6:	b103      	cbz	r3, 80016da <_isatty_r+0x1a>
 80016d8:	6023      	str	r3, [r4, #0]
 80016da:	bd38      	pop	{r3, r4, r5, pc}
 80016dc:	24000090 	.word	0x24000090

080016e0 <_init>:
 80016e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e2:	bf00      	nop
 80016e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016e6:	bc08      	pop	{r3}
 80016e8:	469e      	mov	lr, r3
 80016ea:	4770      	bx	lr

080016ec <_fini>:
 80016ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ee:	bf00      	nop
 80016f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016f2:	bc08      	pop	{r3}
 80016f4:	469e      	mov	lr, r3
 80016f6:	4770      	bx	lr
